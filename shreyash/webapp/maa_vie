from django.shortcuts import render
from django.contrib.auth.decorators import login_required,user_passes_test
from ..models import *
from accounts.models import Management, CustomUser

from ..form import SelectInsuranceCompany,SelectCorporate,SelectBranch,SelectHeadOffice,SelectNumberofDays
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from pandas.tseries.offsets import MonthEnd
import statsmodels.api as sm
from plotly.offline import plot
from plotly.offline import iplot
import plotly.figure_factory as ff
import babel
from babel.numbers import format_currency
import textwrap
from textwrap import wrap


# Create your views here.
from django.contrib import messages
from django.views import View
from django.db.models import Q


import time
import numpy as np
from datetime import datetime, timedelta,date,time,timezone
import plotly.express as px
import statsmodels.api as sm
import pyodbc
from django.contrib.auth.views import PasswordResetView
from django.contrib.auth import update_session_auth_hash
from django.contrib.auth.forms import PasswordChangeForm

from django.db.models import Subquery, OuterRef
import os
Driver = 'SQL Server'
Server = r'MDINETPROJECTS\Analytics'
Database = 'Enrollment'
Database2 = 'Claims_SLA'
UID = 'mdianalytics'
PWD= 'mdianalytics@123'
Database_Connection = f'mssql://{UID}:{PWD}@{Server}/{Database}?driver={Driver}'

connection = pyodbc.connect(driver='{SQL Server}', host=Server, database=Database,
                     user=UID, password=PWD)

connection1 = pyodbc.connect(driver='{SQL Server}', host=Server, database=Database2,
                     user=UID, password=PWD)


config = {'responsive': True, 'displaylogo': False}



def is_Management(self):
    if str(self.user_type) == 'Management':
        return True
    else:
        return False
rec_login_required = user_passes_test(lambda u: True if u.is_Management else False, login_url='/')

def Management_login_required(view_func):
    decorated_view_func = login_required(rec_login_required(view_func), login_url='/')

    return decorated_view_func

# @recruiter_login_required
# def index(request):
#     return render(request, 'index.html')
#
#
# @Management_login_required
# class DashboardView(View):
#     def get_prediction(self,request):
#         daily_outcount = DailyOsCount.objects.all().values()
#         daily_outcountdf = pd.DataFrame(daily_outcount)
#         daily_outcountdf['date_1'] = pd.to_datetime(daily_outcountdf['date_1'])
#         daily_outcountdf['os_count'] = daily_outcountdf['os_count'].astype('int')
#
#         # dropping duplicate dates
#         daily_outcountdf.sort_values('date_1', inplace=True)
#         all_dup_dates = daily_outcountdf['date_1'].value_counts()[daily_outcountdf['date_1'].value_counts() > 1].index
#         # daily_outcountdf['os_count'] = daily_outcountdf['os_count'].astype('int')
#         for date in all_dup_dates:
#             max_os = daily_outcountdf[daily_outcountdf['date_1'] == date]['os_count'].max()
#             idx = daily_outcountdf[
#                 (daily_outcountdf['date_1'] == date) & (daily_outcountdf['os_count'] != max_os)].index
#             daily_outcountdf.drop(idx, inplace=True)
#
#         daily_outcountdf.drop_duplicates('date_1', inplace=True)
#
#         # here when as freq is used then missing dates are added
#         daily_outcountdf = daily_outcountdf.set_index('date_1').asfreq('D')
#
#         if daily_outcountdf.isna().sum()['os_count'] != 0:
#             daily_outcountdf["os_count"] = daily_outcountdf["os_count"].interpolate(method='linear')
#
#         daily_outcountdf['os_count'] = daily_outcountdf['os_count'].astype(int)
#         dailyout_data = daily_outcountdf['os_count']
#
#         # start_date =  date.today()
#         # end_date = start_date + timedelta(days=7)
#
#         order = (0, 1, 0)
#         seasonal_order = (1, 1, 1, 7)
#         mod = sm.tsa.statespace.SARIMAX(dailyout_data,
#                                         order=order,
#                                         seasonal_order=seasonal_order,
#                                         enforce_stationarity=False,
#                                         enforce_invertibility=False)
#         result = mod.fit()
#
#         # prediction
#         # no of predicted days
#
#         form = SelectNumberofDays(request.POST or None)
#         if request.method == 'POST':
#             d1 = request.POST.get('No_days')
#         # prediction
#         # no of predicted days
#         # d1 = 14
#         # no of actual days shown in plot
#             d2 = 7
#
#             pred = result.get_prediction(start=len(dailyout_data), end=len(dailyout_data) + d1 - 1, dynamic=False)
#             prediction = (pred.predicted_mean).astype(int)
#
#             # adding last day of actual value to prediction to get contionuos line in plot
#             last_row = daily_outcountdf[['os_count']].iloc[-1:]
#             last_row.columns = ['predicted_mean']
#             prediction_df = pd.concat([last_row, pd.DataFrame(prediction)])
#             # prediction_df = pd.concat([daily_outcountdf[['os_count']][-1:],prediction_df],axis=1)
#
#             # connecting both df to plot
#
#             df_fin = pd.concat([daily_outcountdf[['os_count']][-d2:], prediction_df], axis=1)
#             df_fin.columns = ['Actual', 'Predicted']
#
#             # plot
#             line = px.line(df_fin)
#             pred_plot = plot(line, output_type='div')
#         return render(request, 'webapp/leader/query.html', pred_plot)
#
#     def get_data(self):
#         all_out = Allicdailyoutstanding.objects.all().values()
#         branch = BranchPortal.objects.all().values()
#         all_outdf = pd.DataFrame(all_out)
#         branch_master = pd.DataFrame(branch)
#         return all_outdf,branch_master
#
#     def lastdocument_recived(self,all_outdf):
#         all_outdf['last_document_received'] = pd.to_datetime(all_outdf['last_document_received'], format='%y-%m-%d')
#         Last_Document_Received_Date = all_outdf['last_document_received']
#         return Last_Document_Received_Date
#
#     def today_tat_ldr(self,all_outdf,Last_Document_Received_Date):
#
#         TODAY_TAT_LDR = []
#         for d in Last_Document_Received_Date:
#             TODAY_TAT_LDR.append(today.date() - d.date())
#         all_outdf['TODAY_TAT_LDR'] = TODAY_TAT_LDR
#         all_outdf['TODAY_TAT_LDR'] = all_outdf['TODAY_TAT_LDR'].astype('timedelta64[D]').astype(int)
#
#         # LDR_BAND
#         conditions = [
#             (all_outdf['TODAY_TAT_LDR'] <= 0),
#             (all_outdf['TODAY_TAT_LDR'] > 0) & (all_outdf['TODAY_TAT_LDR'] <= 5),
#             (all_outdf['TODAY_TAT_LDR'] > 5) & (all_outdf['TODAY_TAT_LDR'] <= 10),
#             (all_outdf['TODAY_TAT_LDR'] > 10)
#         ]
#         # create a list of the values we want to assign for each condition
#         values = ['10 Days & ABOVE', '00-05 Days', '06-10 Days', '10 Days & ABOVE']
#
#         # create a new column and use np.select to assign values to it using our lists as arguments
#         all_outdf['LDR_BAND'] = np.select(conditions, values)
#
#         # TAT_LDR
#         TAT_LDR = []
#         for b in Last_Document_Received_Date:
#             TAT_LDR.append(EndOfMonth1.date() - b.date() - timedelta(days=1))
#         all_outdf['TAT_LDR'] = TAT_LDR
#         all_outdf['TAT_LDR'] = all_outdf['TAT_LDR'].astype('timedelta64[D]').astype(int)
#
#         # BAND_LDR_TAT
#
#         all_outdf.loc[(all_outdf['TAT_LDR'] > 30), 'BAND_LDR_TAT'] = 'Above 1 month'
#         all_outdf.loc[(all_outdf['TAT_LDR'] <= 30), 'BAND_LDR_TAT'] = 'Below 1 month'
#
#         # TAT_DOA
#         DOA = pd.to_datetime(all_outdf['doa'])
#         TAT_DOA = []
#         for a in DOA:
#             TAT_DOA.append(EndOfMonth1 - a.replace(tzinfo=None) - timedelta(days=1))
#         all_outdf['TAT_DOA'] = TAT_DOA
#         all_outdf['TAT_DOA'] = all_outdf['TAT_DOA'].astype('timedelta64[D]').astype('Int64')
#
#         # BAND_DOA_TAT
#         all_outdf.loc[(all_outdf['TAT_DOA'] > 30), 'BAND_DOA_TAT'] = 'Above 1 month'
#         all_outdf.loc[(all_outdf['BAND_DOA_TAT'] != 'Above 1 month'), 'BAND_DOA_TAT'] = 'Below 1 month'
#         BAND_DOA_TAT = all_outdf['BAND_DOA_TAT']
#
#         # TAT_FIRST_INTIMATION
#         all_outdf['first_intimation_date'] = pd.to_datetime(all_outdf['first_intimation_date'].dt.date)
#         First_Intimation_Date = pd.to_datetime(all_outdf['first_intimation_date'], format='%y-%m-%d')
#
#         TAT_FIRST_INTIMATION = []
#         for i in First_Intimation_Date:
#             TAT_FIRST_INTIMATION.append(EndOfMonth1 - i - timedelta(days=1))
#         all_outdf['TAT_FIRST_INTIMATION'] = TAT_FIRST_INTIMATION
#         all_outdf['TAT_FIRST_INTIMATION'] = all_outdf['TAT_FIRST_INTIMATION'].astype('timedelta64[D]').astype('Int64')
#
#         # YEAR and MONTH_NO
#
#         all_outdf['year_1'] = pd.DatetimeIndex(all_outdf['doa']).year
#         all_outdf['month_no'] = pd.DatetimeIndex(all_outdf['doa']).month
#
#         # BAND_FIRST_INTIMATION
#         all_outdf.loc[(all_outdf['TAT_FIRST_INTIMATION'] > 90), 'BAND_FIRST_INTIMATION'] = 'Above 3 months'
#         all_outdf.loc[(all_outdf[
#                            'BAND_FIRST_INTIMATION'] != 'Above 3 months'), 'BAND_FIRST_INTIMATION'] = 'Below 3 months'
#         BAND_FIRST_INTIMATION = all_outdf['BAND_FIRST_INTIMATION']
#
#         # DOA_< 1 MONTH_TILL_CURRENT_MONTH_END
#         result = all_outdf.assign(count=(all_outdf['BAND_DOA_TAT'] == 'Below 1 month')).groupby(
#             'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
#         result.rename(columns={'count': 'DOA_<_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
#         # doaless1month = result['DOA_<_1_MONTH_TILL_CURRENT_MONTH_END']
#
#         # DOA_> 1 MONTH_TILL_CURRENT_MONTH_END
#
#         result1 = all_outdf.assign(count=(all_outdf['BAND_DOA_TAT'] == 'Above 1 month')).groupby(
#             'servicing_branch', sort=False, as_index=False).agg({'count': sum})
#         result1.rename(columns={'count': 'DOA_>_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
#         doagreat1month = result1['DOA_>_1_MONTH_TILL_CURRENT_MONTH_END']
#
#         # LDR_<_1 MONTH_TILL_CURRENT_MONTH_END
#
#         result2 = all_outdf.assign(
#             count=(all_outdf['BAND_LDR_TAT'] == 'Below 1 month') & (all_outdf['revised_servicing_branch']).isin(
#                 branch_master['branch_name'])).groupby('revised_servicing_branch', sort=False,
#                                                        as_index=False).agg({'count': sum})
#         result2.rename(columns={'count': 'LDR_<_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
#
#         # LDR_>_1 MONTH_TILL_CURRENT_MONTH_END
#
#         result3 = all_outdf.assign(count=(all_outdf['BAND_LDR_TAT'] == 'Above 1 month')).groupby(
#             'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
#         result3.rename(columns={'count': 'LDR_>_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
#         ldrgreat1month = result3['LDR_>_1_MONTH_TILL_CURRENT_MONTH_END']
#
#         # FI_DATE_>3MONTH_TILL_CURRENT_MONTH_END
#
#         result4 = all_outdf.assign(count=(all_outdf['BAND_FIRST_INTIMATION'] == 'Above 3 months')).groupby(
#             'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
#         result4.rename(columns={'count': 'FI_DATE_>3MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
#         fidategreaterthreemonth = result4['FI_DATE_>3MONTH_TILL_CURRENT_MONTH_END']
#
#         # FI_DATE_<3MONTH_TILL_CURRENT_MONTH_END
#
#         result5 = all_outdf.assign(count=(all_outdf['BAND_FIRST_INTIMATION'] == 'Below 3 months')).groupby(
#             'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
#         result5.rename(columns={'count': 'FI_DATE_<3MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
#         fidatelessthreemonth = result5['FI_DATE_<3MONTH_TILL_CURRENT_MONTH_END']
#
#         # OS CLAIMS
#
#         result6 = pd.DataFrame(all_outdf.assign(
#             count=(all_outdf['revised_servicing_branch']).isin(all_outdf['revised_servicing_branch'])).groupby(
#             'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum}))
#         result6.rename(columns={'count': 'OS_CLAIMS'}, inplace=True)
#
#         # % OS CLAIMS
#
#         result6['per_OS_claims'] = ((result6['OS_CLAIMS'] / sum(result6['OS_CLAIMS'])) * 100).round(2)
#
#         # % OS CLAIMS > 1_MONTH_DOA
#
#         result1['per_OS_claims > 1_MONTH_DOA'] = (
#                 (result1['DOA_>_1_MONTH_TILL_CURRENT_MONTH_END'] / result6['OS_CLAIMS']) * 100).round(2)
#         osonemonthdoa = result1['per_OS_claims > 1_MONTH_DOA']
#         osonemonthdoaact = osonemonthdoa.to_string(index=False)
#         # % OS CLAIMS > 1_MONTH_LDR
#
#         result3['per_OS_claims > 1_MONTH_LDR'] = (
#                 (result3['LDR_>_1_MONTH_TILL_CURRENT_MONTH_END'] / result6['OS_CLAIMS']) * 100).round(2)
#
#         per_os_one_month_ldr = result3['per_OS_claims > 1_MONTH_LDR']
#         per_os_one_month_ldract = per_os_one_month_ldr.to_string(index=False)
#
#         # % OS CLAIMS > 3_MONTHS_FIRST_INTIMATION
#
#         result5['per_OS_claims > 3_MONTHS_FIRST_INTIMATION'] = (
#                 (fidategreaterthreemonth / result6['OS_CLAIMS']) * 100).round(2)
#         os_three_month_fi = result5['per_OS_claims > 3_MONTHS_FIRST_INTIMATION']
#         os_three_month_fiact = os_three_month_fi.to_string(index=False)
#
#         # Merging
#
#         BRANCH = pd.merge(result6, branch_master, left_on='revised_servicing_branch',
#                           right_on='branch_name', how='inner')
#
#         # Concating Results
#
#         BRANCH_UPDATED = pd.concat([BRANCH, result, result1, result2, result3, result4, result5], axis=1)
#
#         # Removing Duplicates
#
#         BRANCH_UPDATED = BRANCH_UPDATED.T.drop_duplicates().T
#
#         BRANCH1 = all_outdf.merge(branch_master[['branch_group_type', 'branch_name']], how='left',
#                                   left_on='servicing_branch', right_on='branch_name')
#
#         BRANCH_FINAL = pd.merge(BRANCH1, BRANCH_UPDATED, left_on='revised_servicing_branch',
#                                 right_on='revised_servicing_branch', how='inner')
#
#         BRANCH_UPDATED.rename(columns={'revised_servicing_branch': 'REVISED_SERVICING_BRANCH'}, inplace=True)
#
#         BRANCH_MAIN = BRANCH_UPDATED[(BRANCH_UPDATED['branch_group_type'] == '02 MAIN')]
#
#         BRANCH_HO = BRANCH_UPDATED[(BRANCH_UPDATED['branch_group_type'] == '01 MDI HO')]
#
#         BRANCH_OTHER = BRANCH_UPDATED[(BRANCH_UPDATED['branch_group_type'] == '03 OTHER')]
#
#         BRANCH_MAIN['RANK_MAIN_DOA'] = BRANCH_MAIN['per_OS_claims > 1_MONTH_DOA'].rank(method='min')
#
#         BRANCH_HO['RANK_HO_DOA'] = BRANCH_HO['per_OS_claims > 1_MONTH_DOA'].rank(method='min')
#
#         BRANCH_OTHER['RANK_OTHER_DOA'] = BRANCH_OTHER['per_OS_claims > 1_MONTH_DOA'].rank(method='min')
#
#         BRANCH_MAIN['RANK_MAIN_LDR'] = BRANCH_MAIN['per_OS_claims > 1_MONTH_LDR'].rank(method='min')
#
#         BRANCH_HO['RANK_HO_LDR'] = BRANCH_HO['per_OS_claims > 1_MONTH_LDR'].rank(method='min')
#
#         BRANCH_OTHER['RANK_OTHER_LDR'] = BRANCH_OTHER['per_OS_claims > 1_MONTH_LDR'].rank(method='min')
#
#         BRANCH_MAIN['RANK_MAIN_FI'] = BRANCH_MAIN['per_OS_claims > 3_MONTHS_FIRST_INTIMATION'].rank(method='min')
#
#         BRANCH_HO['RANK_HO_FI'] = BRANCH_HO['per_OS_claims > 3_MONTHS_FIRST_INTIMATION'].rank(method='min')
#
#         BRANCH_OTHER['RANK_OTHER_FI'] = BRANCH_OTHER['per_OS_claims > 3_MONTHS_FIRST_INTIMATION'].rank(
#             method='min')
#
#         # ####################################################RANK_HO_DOA#################################################
#
#         RANK_HO_DOA1 = BRANCH_HO[['REVISED_SERVICING_BRANCH', 'RANK_HO_DOA']].sort_values(by='RANK_HO_DOA',
#                                                                                           ascending=True).reset_index(
#             drop=True)
#         RANK_HO_DOA1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_HO_DOA': 'HO_DOA'}, inplace=True)
#
#         colorscale = [[0, '#272D31'], [.5, '#ffffff'], [1, '#ffffff']]
#         font = ['#FCFCFC', '#006400', '#52FF00', '#FFD900', '#FF7700', '#FF1500']
#
#         RANK_HO_DOA2 = ff.create_table(np.vstack([RANK_HO_DOA1.columns, RANK_HO_DOA1.values]), font_colors=font,
#                                        colorscale=colorscale)
#         RANK_HO_DOA2.update_layout(title_text='RANK ON > THAN 1 MONTH LAT')
#         RANK_HO_DOA2.layout.width = 250
#         RANK_HO_DOA = plot(RANK_HO_DOA2, output_type='div')
#         # RANK_HO_DOA = plot(RANK_HO_DOA2, output_type='div', config = {'staticPlot': True})
#
#         ##############################################RANK_MAIN_DOA1#######################################################
#         RANK_MAIN_DOA1 = BRANCH_MAIN[['REVISED_SERVICING_BRANCH', 'RANK_MAIN_DOA']].sort_values(
#             by='RANK_MAIN_DOA', ascending=True).reset_index(drop=True)
#         RANK_MAIN_DOA1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_MAIN_DOA': 'MAIN_DOA'}, inplace=True)
#
#         main_doa_font = ['#FCFCFC', '#00EE00', '#008B00', '#FFC500', '#FFB200', '#FF8C00', '#FF3030', '#FF5000',
#                          '#FF3C00', '#FF2900', '#FF1500']
#
#         RANK_MAIN_DOA2 = ff.create_table(np.vstack([RANK_MAIN_DOA1.columns, RANK_MAIN_DOA1.values]),
#                                          font_colors=main_doa_font,
#                                          colorscale=colorscale)
#         RANK_MAIN_DOA2.layout.width = 250
#         RANK_MAIN_DOA = plot(RANK_MAIN_DOA2, output_type='div')
#
#         ##############################################RANK_OTHER_DOA#######################################################
#
#         RANK_OTHER_DOA1 = BRANCH_OTHER[['REVISED_SERVICING_BRANCH', 'RANK_OTHER_DOA']].sort_values(
#             by='RANK_OTHER_DOA', ascending=True).reset_index(drop=True)
#         RANK_OTHER_DOA1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_OTHER_DOA': 'OTHER_DOA'},
#                                inplace=True)
#
#         other_doa_font = ['#FCFCFC', '#00EE00', '#008B00', '#FFC500', '#FFB200', '#FF8C00', '#FF3030', '#FF5000',
#                           '#FF3C00', '#FF2900', '#FF1500']
#
#         RANK_OTHER_DOA2 = ff.create_table(np.vstack([RANK_OTHER_DOA1.columns, RANK_OTHER_DOA1.values]))
#         RANK_OTHER_DOA2.layout.width = 250
#         RANK_OTHER_DOA = plot(RANK_OTHER_DOA2, output_type='div')
#
#         ############################################## RANK_MAIN_LDR ######################################################
#
#         RANK_MAIN_LDR1 = BRANCH_MAIN[['REVISED_SERVICING_BRANCH', 'RANK_MAIN_LDR']].sort_values(
#             by='RANK_MAIN_LDR', ascending=True).reset_index(drop=True)
#         RANK_MAIN_LDR1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_MAIN_LDR': 'MAIN_LDR'}, inplace=True)
#
#         RANK_MAIN_LDR2 = ff.create_table(np.vstack([RANK_MAIN_LDR1.columns, RANK_MAIN_LDR1.values]))
#         RANK_MAIN_LDR2.layout.width = 250
#         RANK_MAIN_LDR = plot(RANK_MAIN_LDR2, output_type='div')
#
#         ###### RANK_HO_LDR #####
#
#         RANK_HO_LDR1 = BRANCH_HO[['REVISED_SERVICING_BRANCH', 'RANK_HO_LDR']].sort_values(by='RANK_HO_LDR',
#                                                                                           ascending=True).reset_index(
#             drop=True)
#
#         RANK_HO_LDR1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_HO_LDR': 'HO_LDR'}, inplace=True)
#
#         RANK_HO_LDR2 = ff.create_table(np.vstack([RANK_HO_LDR1.columns, RANK_HO_LDR1.values]))
#         RANK_HO_LDR2.update_layout(title_text='RANK ON > 1 MONTH DOA')
#         RANK_HO_LDR2.layout.width = 250
#         RANK_HO_LDR = plot(RANK_HO_LDR2, output_type='div')
#
#         ###### RANK_OTHER_LDR ######
#
#         RANK_OTHER_LDR1 = BRANCH_OTHER[['REVISED_SERVICING_BRANCH', 'RANK_OTHER_LDR']].sort_values(
#             by='RANK_OTHER_LDR', ascending=True).reset_index(drop=True)
#         RANK_OTHER_LDR1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_OTHER_LDR': 'OTHER_LDR'},
#                                inplace=True)
#
#         RANK_OTHER_LDR2 = ff.create_table(np.vstack([RANK_OTHER_LDR1.columns, RANK_OTHER_LDR1.values]))
#         RANK_OTHER_LDR2.layout.width = 250
#         RANK_OTHER_LDR = plot(RANK_OTHER_LDR2, output_type='div')
#
#         ###### RANK_MAIN_FI ######
#
#         RANK_MAIN_FI1 = BRANCH_MAIN[['REVISED_SERVICING_BRANCH', 'RANK_MAIN_FI']].sort_values(by='RANK_MAIN_FI',
#                                                                                               ascending=True).reset_index(
#             drop=True)
#         RANK_MAIN_FI1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_MAIN_FI': 'MAIN_FI'}, inplace=True)
#
#         RANK_MAIN_FI2 = ff.create_table(np.vstack([RANK_MAIN_FI1.columns, RANK_MAIN_FI1.values]))
#         RANK_MAIN_FI2.layout.width = 250
#         RANK_MAIN_FI = plot(RANK_MAIN_FI2, output_type='div')
#
#         ###### RANK_HO_FI ######
#
#         RANK_HO_FI1 = BRANCH_HO[['REVISED_SERVICING_BRANCH', 'RANK_HO_FI']].sort_values(by='RANK_HO_FI',
#                                                                                         ascending=True).reset_index(
#             drop=True)
#         RANK_HO_FI1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_HO_FI': 'HO_FI'}, inplace=True)
#
#         RANK_HO_FI2 = ff.create_table(np.vstack([RANK_HO_FI1.columns, RANK_HO_FI1.values]))
#         RANK_HO_FI2.update_layout(title='RANK ON > 3 MONTH FIRST INTIMATION')
#         RANK_HO_FI2.layout.width = 250
#         RANK_HO_FI = plot(RANK_HO_FI2, output_type='div')
#
#         ###### RANK_OTHER_FI ######
#
#         RANK_OTHER_FI1 = BRANCH_OTHER[['REVISED_SERVICING_BRANCH', 'RANK_OTHER_FI']].sort_values(
#             by='RANK_OTHER_FI', ascending=True).reset_index(drop=True)
#         RANK_OTHER_FI1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_OTHER_FI': 'OTHER_FI'}, inplace=True)
#
#         RANK_OTHER_FI2 = ff.create_table(np.vstack([RANK_OTHER_FI1.columns, RANK_OTHER_FI1.values]))
#         RANK_OTHER_FI2.layout.width = 250
#         RANK_OTHER_FI = plot(RANK_OTHER_FI2, output_type='div')
#
#     mycontext = {
#         'pred_plot': pred_plot,
#         'out_count': out_count,
#         'RANK_HO_DOA': RANK_HO_DOA,
#         'RANK_MAIN_DOA': RANK_MAIN_DOA,
#         'RANK_OTHER_DOA': RANK_OTHER_DOA,
#         'RANK_HO_LDR': RANK_HO_LDR,
#         'RANK_MAIN_LDR': RANK_MAIN_LDR,
#         'RANK_OTHER_LDR': RANK_OTHER_LDR,
#         'RANK_HO_FI': RANK_HO_FI,
#         'RANK_MAIN_FI': RANK_MAIN_FI,
#         'RANK_OTHER_FI': RANK_OTHER_FI,
#     }
#
#




@Management_login_required
def dashboard(request):
    if request.user.is_authenticated:
        daily_outcount = DailyOsCount.objects.all().values()
        daily_outcountdf = pd.DataFrame(daily_outcount)
        daily_outcountdf['date_1'] = pd.to_datetime(daily_outcountdf['date_1'])
        daily_outcountdf['os_count'] = daily_outcountdf['os_count'].astype('int')

        # dropping duplicate dates
        daily_outcountdf.sort_values('date_1',inplace=True)
        all_dup_dates = daily_outcountdf['date_1'].value_counts()[daily_outcountdf['date_1'].value_counts() > 1].index
        # daily_outcountdf['os_count'] = daily_outcountdf['os_count'].astype('int')
        for date in all_dup_dates:
            max_os = daily_outcountdf[daily_outcountdf['date_1'] == date]['os_count'].max()
            idx = daily_outcountdf[(daily_outcountdf['date_1'] == date) & (daily_outcountdf['os_count'] != max_os)].index
            daily_outcountdf.drop(idx, inplace=True)

        daily_outcountdf.drop_duplicates('date_1', inplace=True)

        # here when as freq is used then missing dates are added
        daily_outcountdf = daily_outcountdf.set_index('date_1').asfreq('D')


        if daily_outcountdf.isna().sum()['os_count'] != 0:
            daily_outcountdf["os_count"] = daily_outcountdf["os_count"].interpolate(method='linear')

        daily_outcountdf['os_count'] = daily_outcountdf['os_count'].astype(int)
        dailyout_data = daily_outcountdf['os_count']


        #start_date =  date.today()
        #end_date = start_date + timedelta(days=7)

        order = (0,1,0)
        seasonal_order = (1,1,1,7)
        mod = sm.tsa.statespace.SARIMAX(dailyout_data,
                                                 order=order,
                                                 seasonal_order=seasonal_order,
                                                 enforce_stationarity=False,
                                                 enforce_invertibility=False)
        result = mod.fit()

        # prediction
        # no of predicted days
        d1 = 14
        # no of actual days shown in plot
        d2 = 7

        pred = result.get_prediction(start=len(dailyout_data),end=len(dailyout_data)+d1-1,dynamic=False)
        prediction = (pred.predicted_mean).astype(int)

        # adding last day of actual value to prediction to get contionuos line in plot
        last_row = daily_outcountdf[['os_count']].iloc[-1:]
        last_row.columns = ['predicted_mean']
        prediction_df = pd.concat([last_row, pd.DataFrame(prediction)])
        # prediction_df = pd.concat([daily_outcountdf[['os_count']][-1:],prediction_df],axis=1)

        # connecting both df to plot

        df_fin = pd.concat([daily_outcountdf[['os_count']][-d2:],prediction_df],axis=1)
        df_fin.columns = ['Actual', 'Predicted']

        # plot
        line = px.line(df_fin)
        pred_plot = plot(line, output_type='div')


        all_out = Allicdailyoutstanding.objects.values('last_document_received','doa','first_intimation_date','revised_servicing_branch','servicing_branch')
        out_count = all_out.count()
        all_outdf = pd.DataFrame(all_out)
        branch = BranchPortal.objects.all().values()
        branch_master = pd.DataFrame(branch)
        today = datetime.now()
        EndOfMonth1 = today + MonthEnd(1)

        # Todays_TAT_LDR
        all_outdf['last_document_received'] = pd.to_datetime(all_outdf['last_document_received'], format='%y-%m-%d')
        Last_Document_Received_Date = all_outdf['last_document_received']


        TODAY_TAT_LDR =[]
        for d in Last_Document_Received_Date:
            TODAY_TAT_LDR.append(today.date() - d.date())
        all_outdf['TODAY_TAT_LDR'] = TODAY_TAT_LDR
        all_outdf['TODAY_TAT_LDR'] = all_outdf['TODAY_TAT_LDR'].astype('timedelta64[D]').astype(int)

        # LDR_BAND
        conditions = [
            (all_outdf['TODAY_TAT_LDR'] <= 0),
            (all_outdf['TODAY_TAT_LDR'] > 0) & (all_outdf['TODAY_TAT_LDR'] <= 5),
            (all_outdf['TODAY_TAT_LDR'] > 5) & (all_outdf['TODAY_TAT_LDR'] <= 10),
            (all_outdf['TODAY_TAT_LDR'] > 10)
        ]
        # create a list of the values we want to assign for each condition
        values = ['10 Days & ABOVE', '00-05 Days', '06-10 Days', '10 Days & ABOVE']

        # create a new column and use np.select to assign values to it using our lists as arguments
        all_outdf['LDR_BAND'] = np.select(conditions, values)

        # TAT_LDR
        TAT_LDR = []
        for b in Last_Document_Received_Date:
            TAT_LDR.append(EndOfMonth1.date() - b.date() - timedelta(days=1))
        all_outdf['TAT_LDR'] = TAT_LDR
        all_outdf['TAT_LDR'] = all_outdf['TAT_LDR'].astype('timedelta64[D]').astype(int)

        # BAND_LDR_TAT

        all_outdf.loc[(all_outdf['TAT_LDR'] > 30), 'BAND_LDR_TAT'] = 'Above 1 month'
        all_outdf.loc[(all_outdf['TAT_LDR'] <= 30), 'BAND_LDR_TAT'] = 'Below 1 month'

        # TAT_DOA
        DOA = pd.to_datetime(all_outdf['doa'])
        TAT_DOA = []
        for a in DOA:
            TAT_DOA.append(EndOfMonth1 - a.replace(tzinfo=None) - timedelta(days=1))
        all_outdf['TAT_DOA'] = TAT_DOA
        all_outdf['TAT_DOA'] = all_outdf['TAT_DOA'].astype('timedelta64[D]').astype('Int64')

        # BAND_DOA_TAT
        all_outdf.loc[(all_outdf['TAT_DOA'] > 30), 'BAND_DOA_TAT'] = 'Above 1 month'
        all_outdf.loc[(all_outdf['BAND_DOA_TAT'] != 'Above 1 month'), 'BAND_DOA_TAT'] = 'Below 1 month'
        BAND_DOA_TAT = all_outdf['BAND_DOA_TAT']

        # TAT_FIRST_INTIMATION
        all_outdf['first_intimation_date'] = pd.to_datetime(all_outdf['first_intimation_date'].dt.date)
        First_Intimation_Date = pd.to_datetime(all_outdf['first_intimation_date'], format='%y-%m-%d')

        TAT_FIRST_INTIMATION = []
        for i in First_Intimation_Date:
            TAT_FIRST_INTIMATION.append(EndOfMonth1 - i - timedelta(days=1))
        all_outdf['TAT_FIRST_INTIMATION'] = TAT_FIRST_INTIMATION
        all_outdf['TAT_FIRST_INTIMATION'] = all_outdf['TAT_FIRST_INTIMATION'].astype('timedelta64[D]').astype('Int64')

        # YEAR and MONTH_NO

        all_outdf['year_1'] = pd.DatetimeIndex(all_outdf['doa']).year
        all_outdf['month_no'] = pd.DatetimeIndex(all_outdf['doa']).month

        # BAND_FIRST_INTIMATION
        all_outdf.loc[(all_outdf['TAT_FIRST_INTIMATION'] > 90), 'BAND_FIRST_INTIMATION'] = 'Above 3 months'
        all_outdf.loc[(all_outdf[
                           'BAND_FIRST_INTIMATION'] != 'Above 3 months'), 'BAND_FIRST_INTIMATION'] = 'Below 3 months'
        BAND_FIRST_INTIMATION = all_outdf['BAND_FIRST_INTIMATION']

        # DOA_< 1 MONTH_TILL_CURRENT_MONTH_END
        result = all_outdf.assign(count=(all_outdf['BAND_DOA_TAT'] == 'Below 1 month')).groupby(
            'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
        result.rename(columns={'count': 'DOA_<_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
        # doaless1month = result['DOA_<_1_MONTH_TILL_CURRENT_MONTH_END']

        # DOA_> 1 MONTH_TILL_CURRENT_MONTH_END

        result1 = all_outdf.assign(count=(all_outdf['BAND_DOA_TAT'] == 'Above 1 month')).groupby(
            'servicing_branch', sort=False, as_index=False).agg({'count': sum})
        result1.rename(columns={'count': 'DOA_>_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
        doagreat1month = result1['DOA_>_1_MONTH_TILL_CURRENT_MONTH_END']

        # LDR_<_1 MONTH_TILL_CURRENT_MONTH_END

        result2 = all_outdf.assign(
            count=(all_outdf['BAND_LDR_TAT'] == 'Below 1 month') & (all_outdf['revised_servicing_branch']).isin(
                branch_master['branch_name'])).groupby('revised_servicing_branch', sort=False,
                                                       as_index=False).agg({'count': sum})
        result2.rename(columns={'count': 'LDR_<_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)

        # LDR_>_1 MONTH_TILL_CURRENT_MONTH_END

        result3 = all_outdf.assign(count=(all_outdf['BAND_LDR_TAT'] == 'Above 1 month')).groupby(
            'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
        result3.rename(columns={'count': 'LDR_>_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
        ldrgreat1month = result3['LDR_>_1_MONTH_TILL_CURRENT_MONTH_END']

        # FI_DATE_>3MONTH_TILL_CURRENT_MONTH_END

        result4 = all_outdf.assign(count=(all_outdf['BAND_FIRST_INTIMATION'] == 'Above 3 months')).groupby(
            'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
        result4.rename(columns={'count': 'FI_DATE_>3MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
        fidategreaterthreemonth = result4['FI_DATE_>3MONTH_TILL_CURRENT_MONTH_END']

        # FI_DATE_<3MONTH_TILL_CURRENT_MONTH_END

        result5 = all_outdf.assign(count=(all_outdf['BAND_FIRST_INTIMATION'] == 'Below 3 months')).groupby(
            'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
        result5.rename(columns={'count': 'FI_DATE_<3MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
        fidatelessthreemonth = result5['FI_DATE_<3MONTH_TILL_CURRENT_MONTH_END']

        # OS CLAIMS

        result6 = pd.DataFrame(all_outdf.assign(
            count=(all_outdf['revised_servicing_branch']).isin(all_outdf['revised_servicing_branch'])).groupby(
            'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum}))
        result6.rename(columns={'count': 'OS_CLAIMS'}, inplace=True)

        # % OS CLAIMS

        result6['per_OS_claims'] = ((result6['OS_CLAIMS'] / sum(result6['OS_CLAIMS'])) * 100).round(2)

        # % OS CLAIMS > 1_MONTH_DOA

        result1['per_OS_claims > 1_MONTH_DOA'] = (
                (result1['DOA_>_1_MONTH_TILL_CURRENT_MONTH_END'] / result6['OS_CLAIMS']) * 100).round(2)
        osonemonthdoa = result1['per_OS_claims > 1_MONTH_DOA']
        osonemonthdoaact = osonemonthdoa.to_string(index=False)
        # % OS CLAIMS > 1_MONTH_LDR

        result3['per_OS_claims > 1_MONTH_LDR'] = (
                (result3['LDR_>_1_MONTH_TILL_CURRENT_MONTH_END'] / result6['OS_CLAIMS']) * 100).round(2)

        per_os_one_month_ldr = result3['per_OS_claims > 1_MONTH_LDR']
        per_os_one_month_ldract = per_os_one_month_ldr.to_string(index=False)

        # % OS CLAIMS > 3_MONTHS_FIRST_INTIMATION

        result5['per_OS_claims > 3_MONTHS_FIRST_INTIMATION'] = (
                (fidategreaterthreemonth / result6['OS_CLAIMS']) * 100).round(2)
        os_three_month_fi = result5['per_OS_claims > 3_MONTHS_FIRST_INTIMATION']
        os_three_month_fiact = os_three_month_fi.to_string(index=False)

        # Merging

        BRANCH = pd.merge(result6, branch_master, left_on='revised_servicing_branch',
                          right_on='branch_name', how='inner')

        # Concating Results

        BRANCH_UPDATED = pd.concat([BRANCH, result, result1, result2, result3, result4, result5], axis=1)

        # Removing Duplicates

        BRANCH_UPDATED = BRANCH_UPDATED.T.drop_duplicates().T

        BRANCH1 = all_outdf.merge(branch_master[['branch_group_type', 'branch_name']], how='left',
                                  left_on='servicing_branch', right_on='branch_name')

        BRANCH_FINAL = pd.merge(BRANCH1, BRANCH_UPDATED, left_on='revised_servicing_branch',
                                right_on='revised_servicing_branch', how='inner')

        BRANCH_UPDATED.rename(columns={'revised_servicing_branch':'REVISED_SERVICING_BRANCH'}, inplace=True)

        BRANCH_MAIN = BRANCH_UPDATED[(BRANCH_UPDATED['branch_group_type'] == '02 MAIN')]

        BRANCH_HO = BRANCH_UPDATED[(BRANCH_UPDATED['branch_group_type'] == '01 MDI HO')]

        BRANCH_OTHER = BRANCH_UPDATED[(BRANCH_UPDATED['branch_group_type'] == '03 OTHER')]

        BRANCH_MAIN['RANK_MAIN_DOA'] = BRANCH_MAIN['per_OS_claims > 1_MONTH_DOA'].rank(method='min').astype(int)

        BRANCH_HO['RANK_HO_DOA'] = BRANCH_HO['per_OS_claims > 1_MONTH_DOA'].rank(method='min').astype(int)

        BRANCH_OTHER['RANK_OTHER_DOA'] = BRANCH_OTHER['per_OS_claims > 1_MONTH_DOA'].rank(method='min').astype(int)

        BRANCH_MAIN['RANK_MAIN_LDR'] = BRANCH_MAIN['per_OS_claims > 1_MONTH_LDR'].rank(method='min').astype(int)

        BRANCH_HO['RANK_HO_LDR'] = BRANCH_HO['per_OS_claims > 1_MONTH_LDR'].rank(method='min').astype(int)

        BRANCH_OTHER['RANK_OTHER_LDR'] = BRANCH_OTHER['per_OS_claims > 1_MONTH_LDR'].rank(method='min').astype(int)

        BRANCH_MAIN['RANK_MAIN_FI'] = BRANCH_MAIN['per_OS_claims > 3_MONTHS_FIRST_INTIMATION'].rank(method='min').astype(int)

        BRANCH_HO['RANK_HO_FI'] = BRANCH_HO['per_OS_claims > 3_MONTHS_FIRST_INTIMATION'].rank(method='min').astype(int)

        BRANCH_OTHER['RANK_OTHER_FI'] = BRANCH_OTHER['per_OS_claims > 3_MONTHS_FIRST_INTIMATION'].rank(method='min').astype(int)


        # ####################################################RANK_HO_DOA#################################################

        RANK_HO_DOA1 = BRANCH_HO[['REVISED_SERVICING_BRANCH', 'RANK_HO_DOA']].sort_values(by='RANK_HO_DOA',
                                                                                          ascending=True).reset_index(
            drop=True)
        RANK_HO_DOA1.rename(columns = {'REVISED_SERVICING_BRANCH':'BRANCH', 'RANK_HO_DOA':'HO_DOA'}, inplace=True)

        colorscale = [[0, '#272D31'], [.5, '#ffffff'], [1, '#ffffff']]
        font = ['#FCFCFC', '#006400', '#52FF00', '#FFD900', '#FF7700', '#FF1500']

        RANK_HO_DOA2 = ff.create_table(np.vstack([RANK_HO_DOA1.columns, RANK_HO_DOA1.values]), font_colors=font,
                              colorscale=colorscale)
        RANK_HO_DOA2.update_layout(title_text='RANK ON > THAN 1 MONTH LAT')
        RANK_HO_DOA2.layout.width = 250
        RANK_HO_DOA = plot(RANK_HO_DOA2, output_type='div')
        # RANK_HO_DOA = plot(RANK_HO_DOA2, output_type='div', config = {'staticPlot': True})

##############################################RANK_MAIN_DOA1#######################################################
        RANK_MAIN_DOA1 = BRANCH_MAIN[['REVISED_SERVICING_BRANCH', 'RANK_MAIN_DOA']].sort_values(
            by='RANK_MAIN_DOA', ascending=True).reset_index(drop=True)
        RANK_MAIN_DOA1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_MAIN_DOA': 'MAIN_DOA'}, inplace=True)

        main_doa_font = ['#FCFCFC', '#00EE00', '#008B00', '#FFC500', '#FFB200', '#FF8C00', '#FF3030','#FF5000','#FF3C00', '#FF2900','#FF1500']

        RANK_MAIN_DOA2 = ff.create_table(np.vstack([RANK_MAIN_DOA1.columns, RANK_MAIN_DOA1.values]), font_colors=main_doa_font,
                              colorscale=colorscale)
        RANK_MAIN_DOA2.layout.width = 250
        RANK_MAIN_DOA = plot(RANK_MAIN_DOA2, output_type='div')

        ##############################################RANK_OTHER_DOA#######################################################

        RANK_OTHER_DOA1 = BRANCH_OTHER[['REVISED_SERVICING_BRANCH', 'RANK_OTHER_DOA']].sort_values(
            by='RANK_OTHER_DOA', ascending=True).reset_index(drop=True)
        RANK_OTHER_DOA1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_OTHER_DOA': 'OTHER_DOA'}, inplace=True)

        other_doa_font = ['#FCFCFC', '#00EE00', '#008B00', '#FFC500', '#FFB200', '#FF8C00', '#FF3030','#FF5000','#FF3C00', '#FF2900','#FF1500']


        RANK_OTHER_DOA2 = ff.create_table(np.vstack([RANK_OTHER_DOA1.columns, RANK_OTHER_DOA1.values]))
        RANK_OTHER_DOA2.layout.width = 250
        RANK_OTHER_DOA = plot(RANK_OTHER_DOA2, output_type='div')


        ############################################## RANK_MAIN_LDR ######################################################

        RANK_MAIN_LDR1 = BRANCH_MAIN[['REVISED_SERVICING_BRANCH', 'RANK_MAIN_LDR']].sort_values(
            by='RANK_MAIN_LDR', ascending=True).reset_index(drop=True)
        RANK_MAIN_LDR1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_MAIN_LDR': 'MAIN_LDR'}, inplace=True)


        RANK_MAIN_LDR2 = ff.create_table(np.vstack([RANK_MAIN_LDR1.columns, RANK_MAIN_LDR1.values]))
        RANK_MAIN_LDR2.layout.width = 250
        RANK_MAIN_LDR = plot(RANK_MAIN_LDR2, output_type='div')

        ###### RANK_HO_LDR #####

        RANK_HO_LDR1 = BRANCH_HO[['REVISED_SERVICING_BRANCH', 'RANK_HO_LDR']].sort_values(by='RANK_HO_LDR',
                                                                                          ascending=True).reset_index(
            drop=True)

        RANK_HO_LDR1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_HO_LDR': 'HO_LDR'}, inplace=True)

        RANK_HO_LDR2 = ff.create_table(np.vstack([RANK_HO_LDR1.columns, RANK_HO_LDR1.values]))
        RANK_HO_LDR2.update_layout(title_text='RANK ON > 1 MONTH DOA')
        RANK_HO_LDR2.layout.width = 250
        RANK_HO_LDR = plot(RANK_HO_LDR2, output_type='div')

        ###### RANK_OTHER_LDR ######

        RANK_OTHER_LDR1 = BRANCH_OTHER[['REVISED_SERVICING_BRANCH', 'RANK_OTHER_LDR']].sort_values(
            by='RANK_OTHER_LDR', ascending=True).reset_index(drop=True)
        RANK_OTHER_LDR1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_OTHER_LDR': 'OTHER_LDR'}, inplace=True)

        RANK_OTHER_LDR2 = ff.create_table(np.vstack([RANK_OTHER_LDR1.columns, RANK_OTHER_LDR1.values]))
        RANK_OTHER_LDR2.layout.width = 250
        RANK_OTHER_LDR = plot(RANK_OTHER_LDR2, output_type='div')


        ###### RANK_MAIN_FI ######

        RANK_MAIN_FI1 = BRANCH_MAIN[['REVISED_SERVICING_BRANCH', 'RANK_MAIN_FI']].sort_values(by='RANK_MAIN_FI',
                                                                                              ascending=True).reset_index(
            drop=True)
        RANK_MAIN_FI1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_MAIN_FI': 'MAIN_FI'}, inplace=True)

        RANK_MAIN_FI2 = ff.create_table(np.vstack([RANK_MAIN_FI1.columns, RANK_MAIN_FI1.values]))
        RANK_MAIN_FI2.layout.width = 250
        RANK_MAIN_FI = plot(RANK_MAIN_FI2, output_type='div')


        ###### RANK_HO_FI ######

        RANK_HO_FI1 = BRANCH_HO[['REVISED_SERVICING_BRANCH', 'RANK_HO_FI']].sort_values(by='RANK_HO_FI',
                                                                                        ascending=True).reset_index(
            drop=True)
        RANK_HO_FI1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_HO_FI': 'HO_FI'}, inplace=True)

        RANK_HO_FI2 = ff.create_table(np.vstack([RANK_HO_FI1.columns, RANK_HO_FI1.values]))
        RANK_HO_FI2.update_layout(title='RANK ON > 3 MONTH FIRST INTIMATION')
        RANK_HO_FI2.layout.width = 250
        RANK_HO_FI = plot(RANK_HO_FI2, output_type='div')

        ###### RANK_OTHER_FI ######

        RANK_OTHER_FI1 = BRANCH_OTHER[['REVISED_SERVICING_BRANCH', 'RANK_OTHER_FI']].sort_values(
            by='RANK_OTHER_FI', ascending=True).reset_index(drop=True)
        RANK_OTHER_FI1.rename(columns={'REVISED_SERVICING_BRANCH': 'BRANCH', 'RANK_OTHER_FI': 'OTHER_FI'}, inplace=True)

        RANK_OTHER_FI2 = ff.create_table(np.vstack([RANK_OTHER_FI1.columns, RANK_OTHER_FI1.values]))
        RANK_OTHER_FI2.layout.width = 250
        RANK_OTHER_FI = plot(RANK_OTHER_FI2, output_type='div')


    mycontext={
            'pred_plot':pred_plot,
            'out_count':out_count,
            'RANK_HO_DOA':RANK_HO_DOA,
            'RANK_MAIN_DOA':RANK_MAIN_DOA,
            'RANK_OTHER_DOA':RANK_OTHER_DOA,
            'RANK_HO_LDR':RANK_HO_LDR,
            'RANK_MAIN_LDR' :RANK_MAIN_LDR,
            'RANK_OTHER_LDR' :RANK_OTHER_LDR,
            'RANK_HO_FI' :RANK_HO_FI,
            'RANK_MAIN_FI':RANK_MAIN_FI,
            'RANK_OTHER_FI':RANK_OTHER_FI,
        }
    return render(request,'Management/dashboard.html',context=mycontext)

def branches(request):
    if request.user.is_authenticated:
        oscount = None
        alt_label = None
        alt_data = None
        head_label = None
        head_data = None
        osonemonthdoaact = None
        os_three_month_fiact = None
        per_os_one_month_ldract = None
        no_of_claims_vis_a_vis_outstanding_reasons1 = None
        ic_wise_outstanding_reasons1 = None
        reason_wise_corporate_retail_os = None
        reason_wise_corporate_retail_os1 = None
        branch_wise_adr_count_and_avg_tat1 = None
        os_claims_by_actuallosstype_fig1 = None
        os_claims_by_head1=None
        BRANCH_UPDATED1 = None
        MDI_BRANCHES_OUTSTANDING_STATS1 = None


        form = SelectBranch(request.POST or None)
        if request.method == 'POST':
            branch = request.POST.get('branch')
            branch_qs = Allicdailyoutstanding.objects.filter(revised_servicing_branch=branch).values('servicing_branch','actual_loss_type','revised_servicing_branch','servicing_branch','head','last_document_received','doa','first_intimation_date','sub_head','liablity_reserve_amt','ic_name','corp_retail')
            if len(branch_qs) > 0:
                pd.set_option("styler.format.thousands", ",")
                branch_df = pd.DataFrame(branch_qs.values())
                branch = BranchPortal.objects.all().values()
                branch_master = pd.DataFrame(branch)
                today = date.today()
                EndOfMonth1 = today + MonthEnd(1)
                oscount = len(branch_df.index)
                branch_df['servicing_branch'] = branch_df['servicing_branch'].str.upper()
                # End Of Month
                config = {'responsive': True, 'displaylogo': False}
                # EndOfMonth = now + MonthEnd(1)
                # EndOfMonth1 =EndOfMonth - timedelta(days=1)
                # EndOfMonth1 = pd.to_datetime(EndOfMonth1, format='%y-%m-%d')
                EndOfMonth1 = today + MonthEnd(1)

                # for actual loss
                alt = branch_df['actual_loss_type'].value_counts().reset_index()

                os_claims_by_actuallosstype = [go.Pie(labels=alt['index'],
                                                      values=alt['actual_loss_type'], text=alt['actual_loss_type'],
                                                      marker_colors=px.colors.qualitative.Plotly)
                                               ]
                os_claims_by_actuallosstype_fig = go.Figure(data=os_claims_by_actuallosstype)
                os_claims_by_actuallosstype_fig.update_layout(margin=dict(t=100, b=100, l=100, r=100),
                                                              title='')

                os_claims_by_actuallosstype_fig1 = plot(os_claims_by_actuallosstype_fig, output_type='div', config=config)

                # for graph by head
                byhead = branch_df['head'].value_counts().reset_index()
                os_claims_by_head = [go.Pie(labels=byhead['index'],
                                                      values=byhead['head'], text=byhead['head'],
                                                      marker_colors=px.colors.qualitative.Plotly)
                                               ]
                os_claims_by_head = go.Figure(data=os_claims_by_head)
                os_claims_by_head.update_layout(margin=dict(t=100, b=100, l=100, r=100),
                                                              title='')

                os_claims_by_head1 = plot(os_claims_by_head, output_type='div', config=config)

                # TODAY_TAT_LDR
                branch_df['last_document_received'] = pd.to_datetime(branch_df['last_document_received'],
                                                                     format='%y-%m-%d')

                Last_Document_Recived_date = branch_df['last_document_received']

                TODAY_TAT_LDR = []
                for d in Last_Document_Recived_date:
                    TODAY_TAT_LDR.append(today - d.date())
                branch_df['TODAY_TAT_LDR'] = TODAY_TAT_LDR
                branch_df['TODAY_TAT_LDR'] = branch_df['TODAY_TAT_LDR'].astype('timedelta64[D]').astype(int)

                # LDR_BAND
                conditions = [
                    (branch_df['TODAY_TAT_LDR'] <= 0),
                    (branch_df['TODAY_TAT_LDR'] > 0) & (branch_df['TODAY_TAT_LDR'] <= 5),
                    (branch_df['TODAY_TAT_LDR'] > 5) & (branch_df['TODAY_TAT_LDR'] <= 10),
                    (branch_df['TODAY_TAT_LDR'] > 10)
                ]
                # create a list of the values we want to assign for each condition
                values = ['10 Days & ABOVE', '00-05 Days', '06-10 Days', '10 Days & ABOVE']

                # create a new column and use np.select to assign values to it using our lists as arguments
                branch_df['LDR_BAND'] = np.select(conditions, values)

                # TAT_LDR
                TAT_LDR = []
                for b in Last_Document_Recived_date:
                    TAT_LDR.append(EndOfMonth1.date() - b.date() - timedelta(days=1))
                branch_df['TAT_LDR'] = TAT_LDR
                branch_df['TAT_LDR'] = branch_df['TAT_LDR'].astype('timedelta64[D]').astype(int)

                # BAND_LDR_TAT

                branch_df.loc[(branch_df['TAT_LDR'] > 30), 'BAND_LDR_TAT'] = 'Above 1 month'
                branch_df.loc[(branch_df['TAT_LDR'] <= 30), 'BAND_LDR_TAT'] = 'Below 1 month'

                # TAT_DOA
                DOA = pd.to_datetime(branch_df['doa'])
                TAT_DOA = []
                for a in DOA:
                    TAT_DOA.append(EndOfMonth1 - a.replace(tzinfo=None) - timedelta(days=1))
                branch_df['TAT_DOA'] = TAT_DOA
                branch_df['TAT_DOA'] = branch_df['TAT_DOA'].astype('timedelta64[D]').astype(int)

                # BAND_DOA_TAT
                branch_df.loc[(branch_df['TAT_DOA'] > 30), 'BAND_DOA_TAT'] = 'Above 1 month'
                branch_df.loc[(branch_df['BAND_DOA_TAT'] != 'Above 1 month'), 'BAND_DOA_TAT'] = 'Below 1 month'
                BAND_DOA_TAT = branch_df['BAND_DOA_TAT']

                # TAT_FIRST_INTIMATION
                branch_df['first_intimation_date'] = pd.to_datetime(branch_df['first_intimation_date'].dt.date)
                First_Intimation_Date = pd.to_datetime(branch_df['first_intimation_date'], format='%y-%m-%d')

                TAT_FIRST_INTIMATION = []
                for i in First_Intimation_Date:
                    TAT_FIRST_INTIMATION.append(EndOfMonth1 - i - timedelta(days=1))
                branch_df['TAT_FIRST_INTIMATION'] = TAT_FIRST_INTIMATION
                branch_df['TAT_FIRST_INTIMATION'] = branch_df['TAT_FIRST_INTIMATION'].astype('timedelta64[D]').astype(
                    int)

                # YEAR and MONTH_NO

                branch_df['year_1'] = pd.DatetimeIndex(branch_df['doa']).year
                branch_df['month_no'] = pd.DatetimeIndex(branch_df['doa']).month

                # BAND_FIRST_INTIMATION
                branch_df.loc[(branch_df['TAT_FIRST_INTIMATION'] > 90), 'BAND_FIRST_INTIMATION'] = 'Above 3 months'
                branch_df.loc[(branch_df[
                                   'BAND_FIRST_INTIMATION'] != 'Above 3 months'), 'BAND_FIRST_INTIMATION'] = 'Below 3 months'
                BAND_FIRST_INTIMATION = branch_df['BAND_FIRST_INTIMATION']

                # DOA_< 1 MONTH_TILL_CURRENT_MONTH_END
                result = branch_df.assign(count=(branch_df['BAND_DOA_TAT'] == 'Below 1 month')).groupby(
                    'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
                result.rename(columns={'count': 'DOA_<_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
                # doaless1month = result['DOA_<_1_MONTH_TILL_CURRENT_MONTH_END']

                # DOA_> 1 MONTH_TILL_CURRENT_MONTH_END

                result1 = branch_df.assign(count=(branch_df['BAND_DOA_TAT'] == 'Above 1 month')).groupby(
                    'servicing_branch', sort=False, as_index=False).agg({'count': sum})
                result1.rename(columns={'count': 'DOA_>_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
                doagreat1month = result1['DOA_>_1_MONTH_TILL_CURRENT_MONTH_END']

                # LDR_<_1 MONTH_TILL_CURRENT_MONTH_END

                result2 = branch_df.assign(
                    count=(branch_df['BAND_LDR_TAT'] == 'Below 1 month') & (branch_df['revised_servicing_branch']).isin(
                        branch_master['branch_name'])).groupby('revised_servicing_branch', sort=False,
                                                               as_index=False).agg({'count': sum})
                result2.rename(columns={'count': 'LDR_<_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)

                # LDR_>_1 MONTH_TILL_CURRENT_MONTH_END

                result3 = branch_df.assign(count=(branch_df['BAND_LDR_TAT'] == 'Above 1 month')).groupby(
                    'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
                result3.rename(columns={'count': 'LDR_>_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
                ldrgreat1month = result3['LDR_>_1_MONTH_TILL_CURRENT_MONTH_END']

                # FI_DATE_>3MONTH_TILL_CURRENT_MONTH_END

                result4 = branch_df.assign(count=(branch_df['BAND_FIRST_INTIMATION'] == 'Above 3 months')).groupby(
                    'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
                result4.rename(columns={'count': 'FI_DATE_>3MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
                fidategreaterthreemonth = result4['FI_DATE_>3MONTH_TILL_CURRENT_MONTH_END']

                # FI_DATE_<3MONTH_TILL_CURRENT_MONTH_END

                result5 = branch_df.assign(count=(branch_df['BAND_FIRST_INTIMATION'] == 'Below 3 months')).groupby(
                    'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
                result5.rename(columns={'count': 'FI_DATE_<3MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)
                fidatelessthreemonth = result5['FI_DATE_<3MONTH_TILL_CURRENT_MONTH_END']

                # OS CLAIMS

                result6 = pd.DataFrame(branch_df.assign(
                    count=(branch_df['revised_servicing_branch']).isin(branch_master['branch_name'])).groupby(
                    'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum}))
                result6.rename(columns={'count': 'OS_CLAIMS'}, inplace=True)

                # % OS CLAIMS

                result6['per_OS_claims'] = ((result6['OS_CLAIMS'] / sum(result6['OS_CLAIMS'])) * 100).round(2)

                # % OS CLAIMS > 1_MONTH_DOA

                result1['per_OS_claims > 1_MONTH_DOA'] = (
                            (result1['DOA_>_1_MONTH_TILL_CURRENT_MONTH_END'] / result6['OS_CLAIMS']) * 100).round(2)
                osonemonthdoa = result1['per_OS_claims > 1_MONTH_DOA']
                osonemonthdoaact = osonemonthdoa.to_string(index=False)

                # % OS CLAIMS > 1_MONTH_LDR

                result3['per_OS_claims > 1_MONTH_LDR'] = (
                            (result3['LDR_>_1_MONTH_TILL_CURRENT_MONTH_END'] / result6['OS_CLAIMS']) * 100).round(2)

                per_os_one_month_ldr = result3['per_OS_claims > 1_MONTH_LDR']
                per_os_one_month_ldract = per_os_one_month_ldr.to_string(index=False)

                # % OS CLAIMS > 3_MONTHS_FIRST_INTIMATION

                result5['per_OS_claims > 3_MONTHS_FIRST_INTIMATION'] = (
                            (fidategreaterthreemonth / result6['OS_CLAIMS']) * 100).round(2)
                os_three_month_fi = result5['per_OS_claims > 3_MONTHS_FIRST_INTIMATION']
                os_three_month_fiact = os_three_month_fi.to_string(index=False)


                # Merging

                BRANCH = pd.merge(result6, branch_master, left_on='revised_servicing_branch',
                                  right_on='branch_name', how='inner')

                # Concating Results

                BRANCH_UPDATED0 = pd.concat([BRANCH, result, result1, result2, result3, result4, result5], axis=1)
                # Removing Duplicates

                BRANCH_UPDATED = BRANCH_UPDATED0.T.drop_duplicates().T
                # BRANCH_UPDATED1 = BRANCH_UPDATED.to_html()


                BRANCH1 = branch_df.merge(branch_master[['branch_group_type', 'branch_name']], how='left',
                                          left_on='servicing_branch', right_on='branch_name')

                BRANCH_FINAL = pd.merge(BRANCH1, BRANCH_UPDATED, left_on='revised_servicing_branch',
                                        right_on='revised_servicing_branch', how='inner')

                BRANCHES_OUTSTANDING_STATS = BRANCH_UPDATED.groupby(['revised_servicing_branch'])['per_OS_claims > 3_MONTHS_FIRST_INTIMATION', 'per_OS_claims > 1_MONTH_LDR', 'per_OS_claims > 1_MONTH_DOA'].agg('sum')
                MDI_BRANCHES_OUTSTANDING_STATS = BRANCHES_OUTSTANDING_STATS.reset_index()
                # create the trace for each value column
                trace1 = go.Bar(
                    x=MDI_BRANCHES_OUTSTANDING_STATS['revised_servicing_branch'],
                    y=MDI_BRANCHES_OUTSTANDING_STATS['per_OS_claims > 3_MONTHS_FIRST_INTIMATION'],
                    name='% OS CLAIMS > 3_MONTHS_FIRST_INTIMATION'
                )
                trace2 = go.Bar(
                    x=MDI_BRANCHES_OUTSTANDING_STATS['revised_servicing_branch'],
                    y=MDI_BRANCHES_OUTSTANDING_STATS['per_OS_claims > 1_MONTH_LDR'],
                    name='% OS CLAIMS > 1_MONTH_LDR'
                )
                trace3 = go.Bar(
                    x=MDI_BRANCHES_OUTSTANDING_STATS['revised_servicing_branch'],
                    y=MDI_BRANCHES_OUTSTANDING_STATS['per_OS_claims > 1_MONTH_DOA'],
                    name='% OS CLAIMS > 1_MONTH_DOA'
                )

                # create the layout
                layout = go.Layout(
                    width=550,
                    title='MDI BRANCHES OUTSTANDING STATS',
                    xaxis=dict(title='SERVICING BRANCH'),
                    yaxis=dict(title=''),
                    barmode='group'
                )


                # create the figure and plot it
                MDI_BRANCHES_OUTSTANDING_STATS2 = go.Figure(data=[trace1, trace2, trace3], layout=layout)
                MDI_BRANCHES_OUTSTANDING_STATS1 = plot(MDI_BRANCHES_OUTSTANDING_STATS2,output_type='div', config=config)


                # tat_ldr_avg

                tat_ldr_avg = BRANCH_FINAL.groupby(['sub_head'])['TAT_LDR'].agg('mean').round(2)
                tat_ldr_avg = tat_ldr_avg.reset_index()
                tat_ldr_avg.rename(columns={'TAT_LDR': 'TAT_LDR_AVG'}, inplace=True)

                # liablity_reserve_amt

                liablity_reserve_amt1 = (BRANCH_FINAL.groupby(['sub_head'])['liablity_reserve_amt'].agg('sum'))

                liablity_reserve_amt3 = liablity_reserve_amt1.reset_index()
                liablity_reserve_amt2 = liablity_reserve_amt3['liablity_reserve_amt'].apply(np.ceil)
                liablity_reserve_amt4 = pd.DataFrame(liablity_reserve_amt2)
                liablity_reserve_amt5 = liablity_reserve_amt4.style.format({
                    "liablity_reserve_amt": "{:,d}"})
                liablity_reserve_amt = liablity_reserve_amt5

                # OS_CLAIMS_BY_SubHead

                os_claims_by_sub_head = BRANCH_FINAL.groupby(['sub_head'])['OS_CLAIMS'].agg('count')
                os_claims_by_sub_head = os_claims_by_sub_head.reset_index()

                per_os_claims_by_subhead = BRANCH_FINAL.groupby('sub_head')['OS_CLAIMS'].count().rename(
                    "%_OS_CLAIMS").transform(lambda x: x / x.sum() * 100)

                per_os_claims_by_subhead = per_os_claims_by_subhead.reset_index().round(2)

                # Per_Liablity_Reserve_Amt

                per_liablity_reserve_amt = BRANCH_FINAL.groupby(['sub_head'])['liablity_reserve_amt'].sum().rename(
                    "%_liablity_reserve_amts").transform(lambda x: x / x.sum() * 100)

                per_liablity_reserve_amt1 = per_liablity_reserve_amt.reset_index()
                per_liablity_reserve_amt1 = per_liablity_reserve_amt1['%_liablity_reserve_amts'].apply(np.ceil)

                no_of_claims_vis_a_vis_outstanding_reasons = pd.concat(
                    [os_claims_by_sub_head, tat_ldr_avg, per_os_claims_by_subhead, liablity_reserve_amt2,
                     per_liablity_reserve_amt1], axis=1)
                no_of_claims_vis_a_vis_outstanding_reasons = no_of_claims_vis_a_vis_outstanding_reasons.T.drop_duplicates().T

                no_of_claims_vis_a_vis_outstanding_reasons_fig = go.Figure(
                    data=[go.Table(columnwidth=[150, 70, 90, 90, 110, 130],

                                   header=dict(values=list(no_of_claims_vis_a_vis_outstanding_reasons.columns),
                                               fill_color='#094780',
                                               line_color='darkslategray',
                                               align='left',
                                               font = dict(size = 12, color='white')),
                                   cells=dict(values=no_of_claims_vis_a_vis_outstanding_reasons.T,
                                              fill_color='white',
                                              line_color='darkslategray',
                                              align='left'))
                          ])

                no_of_claims_vis_a_vis_outstanding_reasons_fig.layout.width = 1200
                no_of_claims_vis_a_vis_outstanding_reasons_fig.update_layout(height=len(no_of_claims_vis_a_vis_outstanding_reasons) * 40)
                no_of_claims_vis_a_vis_outstanding_reasons_fig.update_traces(cells_font=dict(size=10))

                no_of_claims_vis_a_vis_outstanding_reasons1 = plot(no_of_claims_vis_a_vis_outstanding_reasons_fig, output_type='div', config=config)

                # ic_wise_outstanding_reasons

                ic_wise_outstanding_reasons = pd.crosstab(branch_df['ic_name'], branch_df['sub_head'])
                ic_wise_outstanding_reasons = ic_wise_outstanding_reasons.reset_index()

                ic_wise_outstanding_reasons_fig = go.Figure(
                    data=[go.Table(columnwidth=[150, 70, 90, 90, 110, 130],

                                   header=dict(values=list(ic_wise_outstanding_reasons.columns),
                                               fill_color='#094780',
                                               line_color='darkslategray',
                                               align='left',
                                               font=dict(size=12, color='white')
                                               ),
                                   cells=dict(values=ic_wise_outstanding_reasons.T,
                                              fill_color='white',
                                              line_color='darkslategray',
                                              align='left'))
                          ])

                ic_wise_outstanding_reasons_fig.layout.width = 1200
                ic_wise_outstanding_reasons_fig.update_layout(height=len(ic_wise_outstanding_reasons) * 80)
                ic_wise_outstanding_reasons_fig.update_traces(cells_font=dict(size=10))

                ic_wise_outstanding_reasons1 = plot(ic_wise_outstanding_reasons_fig, output_type='div', config=config)


                # branch_wise_adr_count_and_avg_tat
                branch_wise_adr_count_and_avg_tat = BRANCH_FINAL.groupby(['revised_servicing_branch'])['TAT_LDR'].agg(
                    'mean')
                branch_wise_adr_count_and_avg_tat2 = branch_wise_adr_count_and_avg_tat.round(2)
                branch_wise_adr_count_and_avg_tat3 = branch_wise_adr_count_and_avg_tat2.reset_index()
                branch_wise_adr_count_and_avg_tat4 = branch_wise_adr_count_and_avg_tat3.rename(
                    columns={'index': 'branch_wise_adr_count_and_avg_tat4'})
                tat_ldr = branch_wise_adr_count_and_avg_tat4['TAT_LDR']
                tat_ldr = tat_ldr[0]

                branch_wise_adr_count_and_avg_tat1 = tat_ldr.tolist()

                # reason_wise_corporate_retail_os
                reason_wise_corporate_retail_os = pd.crosstab(branch_df['sub_head'], branch_df['corp_retail'])
                reason_wise_corporate_retail_os = reason_wise_corporate_retail_os.reset_index()

                reason_wise_corporate_retail_os_fig = go.Figure(
                    data=[go.Table(columnwidth=[40, 20, 20],

                                   header=dict(values=list(reason_wise_corporate_retail_os.columns),
                                               fill_color='#094780',
                                               line_color='darkslategray',
                                               align='left',
                                               font = dict(size = 12, color='white')),
                                   cells=dict(values=reason_wise_corporate_retail_os.T,
                                              fill_color='white',
                                              line_color='darkslategray',
                                              align='left'))
                          ])

                # reason_wise_corporate_retail_os_fig.layout.width = 1200
                reason_wise_corporate_retail_os_fig.update_layout(height=len(reason_wise_corporate_retail_os) * 50)
                reason_wise_corporate_retail_os_fig.update_traces(cells_font=dict(size=10))

                reason_wise_corporate_retail_os1 = plot(reason_wise_corporate_retail_os_fig, output_type='div', config=config)


                # outstanding_reasons = pd.crosstab(branch_df['ic_name'], branch_df['sub_head'])
                # outstanding_reasonsa = outstanding_reasons.to_html()
                #
                # No_of_Claims_Vis_a_vis_Outstanding_Reasons = pd.concat(
                #     [OS_CLAIMS_BY_SubHead, TAT_LDR_AVG, Per_OS_CLAIMS_BY_SubHead, Liablity_Reserve_Amt,
                #      Per_Liablity_Reserve_Amt], axis=1)
                # No_of_Claims_Vis_a_vis_Outstanding_Reasons = No_of_Claims_Vis_a_vis_Outstanding_Reasons.T.drop_duplicates().T
                # No_of_Claims_Vis_a_vis_Outstanding_Reasons



            else:
                    messages.warning(request, "Apparently no values available...")
        mydict = {
            'form': form,
            'oscount': oscount,
            'os_claims_by_actuallosstype_fig1':os_claims_by_actuallosstype_fig1,
            'os_claims_by_head1':os_claims_by_head1,
            'MDI_BRANCHES_OUTSTANDING_STATS1':MDI_BRANCHES_OUTSTANDING_STATS1,
            'no_of_claims_vis_a_vis_outstanding_reasons1': no_of_claims_vis_a_vis_outstanding_reasons1,
            'ic_wise_outstanding_reasons': ic_wise_outstanding_reasons1,
            'reason_wise_corporate_retail_os': reason_wise_corporate_retail_os1,
            'branch_wise_adr_count_and_avg_tat': branch_wise_adr_count_and_avg_tat1,
            'os_three_month_fiact': os_three_month_fiact,
            'per_os_one_month_ldract': per_os_one_month_ldract,
            'osonemonthdoaact': osonemonthdoaact,
            'BRANCH_UPDATED1': BRANCH_UPDATED1,
        }
    return render(request, 'Management/branches.html', context=mydict)


def headoffice(request):
    if request.user.is_authenticated:
        form = SelectHeadOffice(request.POST or None)
        today = date.today()
        oscount_ho = None
        actual_label = None
        actual_data = None
        head_data = None
        head_label = None
        os_claims_by_actuallosstype_fig1 = None
        os_claims_by_head1 = None
        MDI_BRANCHES_OUTSTANDING_STATS1 = None
        os_three_month_fiact = None
        per_os_one_month_ldract = None
        no_of_claims_vis_a_vis_outstanding_reasons1 = None
        ic_wise_outstanding_reasons1 = None
        reason_wise_corporate_retail_os1 = None
        branch_wise_adr_count_and_avg_tat1 = None
        osonemonth_doaact = None
        BRANCH_UPDATED1 = None
        ldr_data = None
        ldr_label = None
        ten_days_above = None
        six_to_ten_days = None
        zero_to_five_days = None
        ic = None

        hodept = BranchPortal.objects.all().values()
        hodept_master = pd.DataFrame(hodept)
        if request.method == 'POST':
            headoffice = request.POST.get('headoffice')
            headoffice_qs = Allicdailyoutstanding.objects.filter(revised_servicing_branch=headoffice).values('servicing_branch','actual_loss_type','revised_servicing_branch','servicing_branch','head','last_document_received','doa','first_intimation_date','sub_head','liablity_reserve_amt','ic_name','corp_retail')
            if len(headoffice_qs) > 0:
                headoffice_df = pd.DataFrame(headoffice_qs.values())
                oscount_ho = len(headoffice_df.index)
                config = {'responsive': True, 'displaylogo': False}

                # End Of Month
                # EndOfMonth = now + MonthEnd(1)
                # EndOfMonth1 = EndOfMonth - timedelta(days=1)
                # EndOfMonth1 = pd.to_datetime(EndOfMonth1, format='%y-%m-%d')
                today = date.today()
                EndOfMonth1 = today + MonthEnd(1)

                # for actual loss
                alt = headoffice_df['actual_loss_type'].value_counts().reset_index()

                os_claims_by_actuallosstype = [go.Pie(labels=alt['index'],
                                                      values=alt['actual_loss_type'], text=alt['actual_loss_type'],
                                                      marker_colors=px.colors.qualitative.Plotly)
                                               ]
                os_claims_by_actuallosstype_fig = go.Figure(data=os_claims_by_actuallosstype)
                os_claims_by_actuallosstype_fig.update_layout(margin=dict(t=100, b=100, l=100, r=100),
                                                              title='')

                os_claims_by_actuallosstype_fig1 = plot(os_claims_by_actuallosstype_fig, output_type='div', config=config)


                # for graph by head
                byhead = headoffice_df['head'].value_counts().reset_index()
                os_claims_by_head = [go.Pie(labels=byhead['index'],
                                                      values=byhead['head'], text=byhead['head'],
                                                      marker_colors=px.colors.qualitative.Plotly)
                                               ]
                os_claims_by_head = go.Figure(data=os_claims_by_head)
                os_claims_by_head.update_layout(margin=dict(t=100, b=100, l=100, r=100),
                                                              title='')

                os_claims_by_head1 = plot(os_claims_by_head, output_type='div', config=config)

                # Today_tat_ LDR

                headoffice_df['last_document_received'] = pd.to_datetime(headoffice_df['last_document_received'],
                                                                         format='%y-%m-%d')
                last_document_recived_date = headoffice_df['last_document_received']

                Today_TAT_LDR = []
                for i in last_document_recived_date:
                    Today_TAT_LDR.append(today - i.date())
                headoffice_df['Today_TAT_LDR'] = Today_TAT_LDR
                headoffice_df['Today_TAT_LDR'] = headoffice_df['Today_TAT_LDR'].astype('timedelta64[D]').astype(int)

                # LDR_Band
                conditions = [
                    (headoffice_df['Today_TAT_LDR'] <= 0),
                    (headoffice_df['Today_TAT_LDR'] > 0) & (headoffice_df['Today_TAT_LDR'] <= 5),
                    (headoffice_df['Today_TAT_LDR'] > 5) & (headoffice_df['Today_TAT_LDR'] <= 10),
                    (headoffice_df['Today_TAT_LDR'] > 10)

                ]
                values = ['10 Days & Above', '00-05 Days', '06-10 Days', '10 Days & Above']

                headoffice_df['LDR_BAND'] = np.select(conditions, values)

                ldr = headoffice_df['LDR_BAND'].value_counts()
                by_ldr = pd.DataFrame(ldr).reset_index()
                ldr_index = by_ldr.rename(columns={'index': 'ldr_index'})
                ldr_label = ldr_index['ldr_index'].tolist()
                ldr_data = by_ldr['LDR_BAND'].tolist()

                # IC_WISE_PENDING_CLAIMS_TAT

                ic_wise_pending_claims_tat = pd.crosstab(headoffice_df['ic_name'], headoffice_df['LDR_BAND'])

                ic_wise_pending_claims_tat1 = ic_wise_pending_claims_tat.reset_index()
                ic = ic_wise_pending_claims_tat1['ic_name'].tolist()
                ten_days_above = ic_wise_pending_claims_tat1['10 Days & Above'].tolist()
                zero_to_five_days = ic_wise_pending_claims_tat1['00-05 Days'].tolist()
                six_to_ten_days = ic_wise_pending_claims_tat1['06-10 Days'].tolist()

                # TAT_LDR
                TAT_LDR = []
                for a in last_document_recived_date:
                    TAT_LDR.append(EndOfMonth1.date() - a.date() - timedelta(days=1))
                headoffice_df['TAT_LDR'] = TAT_LDR
                headoffice_df['TAT_LDR'] = headoffice_df['TAT_LDR'].astype('timedelta64[D]').astype(int)
                # BAND_LDR_TAT

                headoffice_df.loc[(headoffice_df['TAT_LDR'] > 30), 'BAND_LDR_TAT'] = 'Above 1 month'
                headoffice_df.loc[(headoffice_df['TAT_LDR'] <= 30), 'BAND_LDR_TAT'] = 'Below 1 month'

                # TAT_DOA
                DOA = pd.to_datetime(headoffice_df['doa'])
                TAT_DOA = []
                for a in DOA:
                    TAT_DOA.append(EndOfMonth1 - a.replace(tzinfo=None) - timedelta(days=1))
                headoffice_df['TAT_DOA'] = TAT_DOA
                headoffice_df['TAT_DOA'] = headoffice_df['TAT_DOA'].astype('timedelta64[D]').replace([np.inf, -np.inf], 0).astype('Int64')

                # BAND_DOA_TAT
                headoffice_df.loc[(headoffice_df['TAT_DOA'] > 30), 'BAND_DOA_TAT'] = 'Above 1 month'
                headoffice_df.loc[(headoffice_df['BAND_DOA_TAT'] != 'Above 1 month'), 'BAND_DOA_TAT'] = 'Below 1 month'
                BAND_DOA_TAT = headoffice_df['BAND_DOA_TAT']

                # TAT_FIRST_INTIMATION
                headoffice_df['first_intimation_date'] = pd.to_datetime(headoffice_df['first_intimation_date'].dt.date)
                First_Intimation_Date = pd.to_datetime(headoffice_df['first_intimation_date'], format='%y-%m-%d')

                TAT_FIRST_INTIMATION = []
                for i in First_Intimation_Date:
                    TAT_FIRST_INTIMATION.append(EndOfMonth1 - i - timedelta(days=1))
                headoffice_df['TAT_FIRST_INTIMATION'] = TAT_FIRST_INTIMATION
                headoffice_df['TAT_FIRST_INTIMATION'] = headoffice_df['TAT_FIRST_INTIMATION'].astype('timedelta64[D]')

                # YEAR and MONTH_NO

                headoffice_df['year_1'] = pd.DatetimeIndex(headoffice_df['doa']).year
                headoffice_df['month_no'] = pd.DatetimeIndex(headoffice_df['doa']).month

                # BAND_FIRST_INTIMATION
                headoffice_df.loc[
                    (headoffice_df['TAT_FIRST_INTIMATION'] > 90), 'BAND_FIRST_INTIMATION'] = 'Above 3 months'
                headoffice_df.loc[(headoffice_df[
                                       'BAND_FIRST_INTIMATION'] != 'Above 3 months'), 'BAND_FIRST_INTIMATION'] = 'Below 3 months'
                BAND_FIRST_INTIMATION = headoffice_df['BAND_FIRST_INTIMATION']

                # DOA_< 1 MONTH_TILL_CURRENT_MONTH_END
                doaless1_month = headoffice_df.assign(count=(headoffice_df['BAND_DOA_TAT'] == 'Below 1 month')).groupby(
                    'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
                doaless1_month.rename(columns={'count': 'DOA_<_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)

                # DOA_> 1 MONTH_TILL_CURRENT_MONTH_END
                doagreat1_month = headoffice_df.assign(
                    count=(headoffice_df['BAND_DOA_TAT'] == 'Above 1 month')).groupby('revised_servicing_branch',
                                                                                      sort=False, as_index=False).agg(
                    {'count': sum})
                doagreat1_month.rename(columns={'count': 'DOA_>_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)

                # LDR_<_1 MONTH_TILL_CURRENT_MONTH_END
                ldrless1_month = headoffice_df.assign(count=(headoffice_df['BAND_LDR_TAT'] == 'Below 1 month')).groupby(
                    'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
                ldrless1_month.rename(columns={'count': 'LDR_<_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)

                # LDR_>_1 MONTH_TILL_CURRENT_MONTH_END
                ldrgreat1_month = headoffice_df.assign(
                    count=(headoffice_df['BAND_LDR_TAT'] == 'Above 1 month')).groupby('revised_servicing_branch',
                                                                                      sort=False, as_index=False).agg(
                    {'count': sum})
                ldrgreat1_month.rename(columns={'count': 'LDR_>_1_MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)

                # FI_DATE_<3MONTH_TILL_CURRENT_MONTH_END

                fidateless3_month = headoffice_df.assign(
                    count=(headoffice_df['BAND_FIRST_INTIMATION'] == 'Below 3 months')).groupby(
                    'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
                fidateless3_month.rename(columns={'count': 'FI_DATE_<_3MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)

                # FI_DATE_>3MONTH_TILL_CURRENT_MONTH_END

                fidategreat3_month = headoffice_df.assign(
                    count=(headoffice_df['BAND_FIRST_INTIMATION'] == 'Above 3 months')).groupby(
                    'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum})
                fidategreat3_month.rename(columns={'count': 'FI_DATE_>_3MONTH_TILL_CURRENT_MONTH_END'}, inplace=True)

                # OS Claims

                osclaims = pd.DataFrame(headoffice_df.assign(
                    count=(headoffice_df['revised_servicing_branch']).isin(hodept_master['branch_name'])).groupby(
                    'revised_servicing_branch', sort=False, as_index=False).agg({'count': sum}))
                osclaims.rename(columns={'count': 'OS_CLAIMS'}, inplace=True)

                # %OS CLAIMS

                osclaims['per_os_claims'] = ((osclaims['OS_CLAIMS'] / sum(osclaims['OS_CLAIMS'])) * 100).round(2)

                # % OS CLAIMS > 1_MONTH_DOA
                doagreat1_month['per_os_claims > 1_MONTH_DOA'] = (doagreat1_month[
                                                                      'DOA_>_1_MONTH_TILL_CURRENT_MONTH_END'] /
                                                                  osclaims['OS_CLAIMS']) * 100
                osonemonth_doa = doagreat1_month['per_os_claims > 1_MONTH_DOA']
                osonemonth_doaact = osonemonth_doa.to_string(index=False)

                # % OS CLAIMS > 1_MONTH_LDR

                ldrgreat1_month['per_OS_claims > 1_MONTH_LDR'] = ((ldrgreat1_month[
                                                                       'LDR_>_1_MONTH_TILL_CURRENT_MONTH_END'] /
                                                                   osclaims['OS_CLAIMS']) * 100).round(2)

                per_os_one_month_ldr = ldrgreat1_month['per_OS_claims > 1_MONTH_LDR']
                per_os_one_month_ldract = per_os_one_month_ldr.to_string(index=False)

                # % OS CLAIMS > 3_MONTHS_FIRST_INTIMATION

                fidategreat3_month['per_OS_claims > 3_MONTHS_FIRST_INTIMATION'] = ((fidategreat3_month[
                                                                                        'FI_DATE_>_3MONTH_TILL_CURRENT_MONTH_END'] /
                                                                                    osclaims['OS_CLAIMS']) * 100).round(
                    2)
                os_three_month_fi = fidategreat3_month['per_OS_claims > 3_MONTHS_FIRST_INTIMATION']
                os_three_month_fiact = os_three_month_fi.to_string(index=False)

                # Merging
                BRANCH = pd.merge(osclaims, hodept_master, left_on='revised_servicing_branch',
                                  right_on='branch_name', how='inner')

                # Concating Results

                BRANCH_UPDATED = pd.concat(
                    [BRANCH, doaless1_month, doagreat1_month, ldrless1_month, ldrgreat1_month, fidateless3_month,
                     fidategreat3_month], axis=1)

                # Removing Duplicates

                BRANCH_UPDATED = BRANCH_UPDATED.T.drop_duplicates().T
                BRANCH_UPDATED1_fig = go.Figure(
                    data=[go.Table(columnwidth=[40, 20, 20],

                                   header=dict(values=list(BRANCH_UPDATED.columns),
                                               fill_color='#094780',
                                               line_color='darkslategray',
                                               align='left',
                                               font = dict(size = 12, color='white')),
                                   cells=dict(values=BRANCH_UPDATED.T,
                                              fill_color='white',
                                              line_color='darkslategray',
                                              align='left'))
                          ])
                BRANCH_UPDATED1_fig.layout.width = 1200

                BRANCH_UPDATED1 = plot(BRANCH_UPDATED1_fig,output_type='div', config=config)


                BRANCH1 = headoffice_df.merge(hodept_master[['branch_group_type', 'branch_name']], how='left',
                                              left_on='servicing_branch', right_on='branch_name')

                BRANCH_FINAL = pd.merge(BRANCH1, BRANCH_UPDATED, left_on='revised_servicing_branch',
                                        right_on='revised_servicing_branch', how='inner')

                BRANCHES_OUTSTANDING_STATS = BRANCH_UPDATED.groupby(['revised_servicing_branch'])['per_OS_claims > 3_MONTHS_FIRST_INTIMATION', 'per_OS_claims > 1_MONTH_LDR', 'per_os_claims > 1_MONTH_DOA'].agg('sum')
                MDI_BRANCHES_OUTSTANDING_STATS = BRANCHES_OUTSTANDING_STATS.reset_index()
                # create the trace for each value column
                trace1 = go.Bar(
                    x=MDI_BRANCHES_OUTSTANDING_STATS['revised_servicing_branch'],
                    y=MDI_BRANCHES_OUTSTANDING_STATS['per_OS_claims > 3_MONTHS_FIRST_INTIMATION'],
                    name='% OS CLAIMS > 3_MONTHS_FIRST_INTIMATION'
                )
                trace2 = go.Bar(
                    x=MDI_BRANCHES_OUTSTANDING_STATS['revised_servicing_branch'],
                    y=MDI_BRANCHES_OUTSTANDING_STATS['per_OS_claims > 1_MONTH_LDR'],
                    name='% OS CLAIMS > 1_MONTH_LDR'
                )
                trace3 = go.Bar(
                    x=MDI_BRANCHES_OUTSTANDING_STATS['revised_servicing_branch'],
                    y=MDI_BRANCHES_OUTSTANDING_STATS['per_os_claims > 1_MONTH_DOA'],
                    name='% OS CLAIMS > 1_MONTH_DOA'
                )

                # create the layout
                layout = go.Layout(
                    width=550,
                    title='MDI BRANCHES OUTSTANDING STATS',
                    xaxis=dict(title='SERVICING BRANCH'),
                    yaxis=dict(title=''),
                    barmode='group',
                    legend=dict(title_font_family="Times New Roman",
                                font=dict(size=10))
                )


                # create the figure and plot it
                MDI_BRANCHES_OUTSTANDING_STATS2 = go.Figure(data=[trace1, trace2, trace3], layout=layout)
                MDI_BRANCHES_OUTSTANDING_STATS1 = plot(MDI_BRANCHES_OUTSTANDING_STATS2,output_type='div', config=config)






                # tat_ldr_avg

                tat_ldr_avg = BRANCH_FINAL.groupby(['sub_head'])['TAT_LDR'].agg('mean').round(2)
                tat_ldr_avg = tat_ldr_avg.reset_index()
                tat_ldr_avg.rename(columns={'TAT_LDR': 'TAT_LDR_AVG'}, inplace=True)

                # liablity_reserve_amt

                liablity_reserve_amt1 = (BRANCH_FINAL.groupby(['sub_head'])['liablity_reserve_amt'].agg('sum'))

                liablity_reserve_amt3 = liablity_reserve_amt1.reset_index()
                liablity_reserve_amt2 = liablity_reserve_amt3['liablity_reserve_amt'].apply(np.ceil)
                liablity_reserve_amt4 = pd.DataFrame(liablity_reserve_amt2)
                liablity_reserve_amt5 = liablity_reserve_amt4.style.format({
                    "liablity_reserve_amt": "{:,d}"})
                liablity_reserve_amt = liablity_reserve_amt5

                # OS_CLAIMS_BY_SubHead

                os_claims_by_sub_head = BRANCH_FINAL.groupby(['sub_head'])['OS_CLAIMS'].agg('count')
                os_claims_by_sub_head = os_claims_by_sub_head.reset_index()

                per_os_claims_by_subhead = BRANCH_FINAL.groupby('sub_head')['OS_CLAIMS'].count().rename(
                    "per_OS_claims").transform(lambda x: x / x.sum() * 100)

                per_os_claims_by_subhead = per_os_claims_by_subhead.reset_index().round(2)

                # Per_Liablity_Reserve_Amt

                per_liablity_reserve_amt = BRANCH_FINAL.groupby(['sub_head'])['liablity_reserve_amt'].sum().rename(
                    "per_liablity_reserve_amts").transform(lambda x: x / x.sum() * 100)

                per_liablity_reserve_amt1 = per_liablity_reserve_amt.reset_index()
                per_liablity_reserve_amt1 = per_liablity_reserve_amt1['per_liablity_reserve_amts'].apply(np.ceil)

                no_of_claims_vis_a_vis_outstanding_reasons = pd.concat(
                    [os_claims_by_sub_head, tat_ldr_avg, per_os_claims_by_subhead, liablity_reserve_amt2,
                     per_liablity_reserve_amt1], axis=1)
                no_of_claims_vis_a_vis_outstanding_reasons = no_of_claims_vis_a_vis_outstanding_reasons.T.drop_duplicates().T


                no_of_claims_vis_a_vis_outstanding_reasons_fig = go.Figure(
                    data=[go.Table(columnwidth=[150, 70, 90, 90, 110, 130],

                                   header=dict(values=list(no_of_claims_vis_a_vis_outstanding_reasons.columns),
                                               fill_color='#094780',
                                               line_color='darkslategray',
                                               align='left',
                                               font = dict(size = 12, color='white')),
                                   cells=dict(values=no_of_claims_vis_a_vis_outstanding_reasons.T,
                                              fill_color='white',
                                              line_color='darkslategray',
                                              align='left'))
                          ])

                no_of_claims_vis_a_vis_outstanding_reasons_fig.layout.width = 1200
                no_of_claims_vis_a_vis_outstanding_reasons_fig.update_layout(height=len(no_of_claims_vis_a_vis_outstanding_reasons) * 40)
                no_of_claims_vis_a_vis_outstanding_reasons_fig.update_traces(cells_font=dict(size=10))

                no_of_claims_vis_a_vis_outstanding_reasons1 = plot(no_of_claims_vis_a_vis_outstanding_reasons_fig, output_type='div', config=config)

                # ic_wise_outstanding_reasons

                ic_wise_outstanding_reasons = pd.crosstab(headoffice_df['ic_name'], headoffice_df['sub_head'])
                ic_wise_outstanding_reasons = ic_wise_outstanding_reasons.reset_index()

                ic_wise_outstanding_reasons_fig = go.Figure(
                    data=[go.Table(columnwidth=[150, 70, 90, 90, 110, 130],

                                   header=dict(values=list(ic_wise_outstanding_reasons.columns),
                                               fill_color='#094780',
                                               line_color='darkslategray',
                                               align='left',
                                               font=dict(size=12, color='white')
                                               ),
                                   cells=dict(values=ic_wise_outstanding_reasons.T,
                                              fill_color='white',
                                              line_color='darkslategray',
                                              align='left'))
                          ])

                ic_wise_outstanding_reasons_fig.layout.width = 1200
                ic_wise_outstanding_reasons_fig.update_layout(height=len(ic_wise_outstanding_reasons) * 80)
                ic_wise_outstanding_reasons_fig.update_traces(cells_font=dict(size=10))

                ic_wise_outstanding_reasons1 = plot(ic_wise_outstanding_reasons_fig, output_type='div', config=config)


                # branch_wise_adr_count_and_avg_tat

                branch_wise_adr_count_and_avg_tat = BRANCH_FINAL.groupby(['revised_servicing_branch'])['TAT_LDR'].agg(
                    'mean')
                branch_wise_adr_count_and_avg_tat2 = branch_wise_adr_count_and_avg_tat.round(2)
                branch_wise_adr_count_and_avg_tat3 = branch_wise_adr_count_and_avg_tat2.reset_index()
                branch_wise_adr_count_and_avg_tat4 = branch_wise_adr_count_and_avg_tat3.rename(
                    columns={'index': 'branch_wise_adr_count_and_avg_tat4'})
                tat_ldr = branch_wise_adr_count_and_avg_tat4['TAT_LDR']
                tat_ldr = tat_ldr[0]

                branch_wise_adr_count_and_avg_tat1 = tat_ldr.tolist()

                # reason_wise_corporate_retail_os
                reason_wise_corporate_retail_os = pd.crosstab(headoffice_df['sub_head'], headoffice_df['corp_retail'])
                reason_wise_corporate_retail_os = reason_wise_corporate_retail_os.reset_index()

                reason_wise_corporate_retail_os_fig = go.Figure(
                    data=[go.Table(columnwidth=[40, 20, 20],

                                   header=dict(values=list(reason_wise_corporate_retail_os.columns),
                                               fill_color='#094780',
                                               line_color='darkslategray',
                                               align='left',
                                               font = dict(size = 12, color='white')),
                                   cells=dict(values=reason_wise_corporate_retail_os.T,
                                              fill_color='white',
                                              line_color='darkslategray',
                                              align='left'))
                          ])

                # reason_wise_corporate_retail_os_fig.layout.width = 1200
                reason_wise_corporate_retail_os_fig.update_layout(height=len(reason_wise_corporate_retail_os) * 50)
                reason_wise_corporate_retail_os_fig.update_traces(cells_font=dict(size=10))

                reason_wise_corporate_retail_os1 = plot(reason_wise_corporate_retail_os_fig, output_type='div', config=config)


            else:
                messages.warning(request, "Apparently no values available...")

        mydict = {
            'form': form,
            'oscont_ho': oscount_ho,
            'os_claims_by_actuallosstype_fig1':os_claims_by_actuallosstype_fig1,
            'os_claims_by_head1':os_claims_by_head1,
            'MDI_BRANCHES_OUTSTANDING_STATS1':MDI_BRANCHES_OUTSTANDING_STATS1,
            'BRANCH_UPDATED1': BRANCH_UPDATED1,
            'no_of_claims_vis_a_vis_outstanding_reasons1': no_of_claims_vis_a_vis_outstanding_reasons1,
            'ic_wise_outstanding_reasons': ic_wise_outstanding_reasons1,

            'reason_wise_corporate_retail_os': reason_wise_corporate_retail_os1,
            'branch_wise_adr_count_and_avg_tat': branch_wise_adr_count_and_avg_tat1,
            'os_three_month_fiact': os_three_month_fiact,
            'per_os_one_month_ldract': per_os_one_month_ldract,
            'osonemonth_doaact': osonemonth_doaact,
            'ldr_data': ldr_data,
            'ldr_label': ldr_label,
            'ten_days_above': ten_days_above,
            'zero_to_five_days': zero_to_five_days,
            'six_to_ten_days': six_to_ten_days,
            'ic': ic,
    }
    return render(request, 'Management/headoffice.html', context=mydict)


def corporate(request):
    if request.user.is_authenticated:
        premium = None
        lives = None
        paid_claim_count = None
        out_claim_count = None
        crs_claim_count = None
        lives_by_ip_relation_code_fig_1 = None
        age_band_relationship_wise_insured_lives_1 = None
        age_band_relationship_wise_insured_lives_fig2 = None
        age_band_relationship_wise_insured_lives_fig1 = None
        ALL_CLAIMS_BY_CLAIM_STATUS_fig = None
        lives_by_age_band_fig1 = None
        summary1 = None
        relation_age_band_wise_paid_amt_fig_1 = None
        relation_age_band_wise_paid_amt_fig_2 = None
        outstanding_claim_analysis_fig = None
        outstanding_claim_analysis_tb = None
        claim_status_fig1 = None
        rejected_claim_breakup_fig = None
        rejected_claim_breakup_tb = None
        treatment_type_wise_analysis_fig = None
        treatment_type_wise_analysis_tb = None
        cashless_vs_reimbersement_claim_count_paid_fig = None
        cashless_vs_reimbersement_claim_amt_paid_fig = None
        cashless_vs_reimbersement_lodge_amount_fig = None
        Summary_plot = None
        Summary_plot2 = None
        ipd_opd_summary_fig = None
        top10_ailment_wise_analysis_fig1 = None
        top10_ailment_wise_analysis_fig2 = None
        top10_hospital_wise_paidamt_fig1 = None
        top10_hospital_wise_paidamt_fig2 = None
        Age_Band_IR = None
        SI_Band_IR = None
        Amount_Band_IR = None
        paidamt_band_analysis1 = None
        paidamt_band_analysis_fig = None
        ipd_opd_wise_claims_fig = None
        disease_wise_buffer_amount_fig2 = None
        buffer_amt_vs_liab_amt = None
        customer_touch_point_fig2 = None
        customer_touch_point_fig1 = None
        customer_call_analysis_fig2 = None
        customer_call_analysis_fig1 = None
        ReasonForCall_analysis_fig2 = None
        ReasonForCall_analysis_fig1 = None
        griveance_analysis_fig2 = None
        griveance_analysis_fig1 = None
        form = SelectCorporate(request.POST or None)
        if request.method == 'POST':
            pol_no = request.POST.get('polno')
            paid_qs_corp = ClPaidDet2.objects.prefetch_related('pol_no').filter(pol_no=pol_no).values('pol_no','sla_heading','insuredname', 'relation', 'lodgetype','status','actuallosstype','actual_lodge_amt','settledamt','liablityamt','consider_count','ipd_opd', 'age_band_rev','new_disease_category', 'lodgedate','dod', 'lodgeamt','treatmenttype', 'sumins', 'amount_band','diseasecategory', 'hospitlname', 'utilizationband', 'buffer_amt', 'payment_tat', 'end_to_end_tat', 'final_processing_tat_settlment_tat','adr_raise_date_lodge_date', 'adr_recive_adr_raise_date')


            #paid_crop_df = ClPaidDet2[['insuredname', 'relation', 'lodgetype','status','actuallosstype','actual_lodge_amt','settledamt','liablityamt','consider_count','ipd_opd', 'age_band_rev','new_disease_category', 'lodgedate','dod', 'lodgeamt','treatmenttype', 'sumins', 'amount_band','diseasecategory', 'hospitlname', 'utilizationband', 'buffer_amt', 'payment_tat', 'end_to_end_tat', 'final_processing_tat_settlment_tat','adr_raise_date_lodge_date', 'adr_recive_adr_raise_date']]



            crs_qs = ClCrsDet2.objects.prefetch_related('pol_no').filter(pol_no=pol_no).values('status','substatus','lodgedate','lodgetype','cl_lod_amt','doa','dod','sla_heading','consider_count','actuallosstype','age_band_rev','ipd_opd','sumins','actual_lodge_amt')
            out_qs = ClOutDet2.objects.prefetch_related('pol_no').filter(pol_no=pol_no).values('status','extra','head','sla_heading','consider_count','age_band_rev','liablityamt','actuallosstype','lodgetype','lodgedate','doa','dod','ipd_opd','sumins','actual_lodge_amt','actuallodgeamt')
            customercare_qs = Customercare.objects.filter(pol_no=pol_no)
            relation_qs = RelationMaster.objects.all()
            # pol_no1 = tuple(pol_no)

            Driver = 'SQL Server'
            Server = r'MDINETPROJECTS\Analytics'
            Database = 'Enrollment'
            UID = 'mdianalytics'
            PWD = 'mdianalytics@123'
            Database_Connection = f'mssql://{UID}:{PWD}@{Server}/{Database}?driver={Driver}'
            connection = pyodbc.connect(driver='{SQL Server}', host=Server, database=Database,
                                        user=UID, password=PWD)
            portal_premium_qs = pd.read_sql_query(f"""SELECT
                            A.pol_no,A.name_of_insured, A.ic_name, ip_relation_code, ip_age, broker_name, risk_from_date,risk_expiry_date,
                            CASE WHEN RISK_EXPIRY_DATE<=GETDATE() THEN '365'
                            ELSE CASE WHEN  RISK_EXPIRY_DATE>GETDATE() THEN DATEDIFF(DAY,RISK_FROM_DATE,GETDATE())+1 ELSE 0 END
                            END AS [POLICYRUNDAY],
                            CONVERT(VARCHAR(10),GETDATE(),103)+' (TIME: '+SUBSTRING(CAST(GETDATE()AS VARCHAR(30)),13,7)+')' AS REPORT_DATE,
                            ISNULL(A.NET_PREMIUM,0) AS NET_PREMIUM,
                            ISNULL(B.PREMIUM_ENDORSEMENT,0) AS PREMIUM_ENDORSEMENT,
                            CASE WHEN ISNULL(RISK_EXPIRY_DATE,'')<=ISNULL(GETDATE(),'') THEN  ( ISNULL(A.NET_PREMIUM,0)+ISNULL(B.PREMIUM_ENDORSEMENT,0))
                            ELSE ((ISNULL(A.NET_PREMIUM,0)+ISNULL(B.PREMIUM_ENDORSEMENT,0))/365)*DATEDIFF(DAY,RISK_FROM_DATE,GETDATE())+1 END AS [EARNED_PERMIUM],
                            ISNULL(A.NO_OF_EMPLOYEES_COVERED,0) AS NO_OF_EMPLOYEES_COVERED,
                            ISNULL(A.NO_OF_DEPENDANTS_COVERED,0) AS NO_OF_DEPENDANTS_COVERED,
            	            NO_OF_EMPLOYEES_COVERED + NO_OF_DEPENDANTS_COVERED AS lives,NET_PREMIUM + CAST(PREMIUM_ENDORSEMENT AS int) As premium
                            FROM (SELECT IC_NAME,TEMP.POL_NO, IP_Relation_Code, IP_Age, Broker_Name,NAME_OF_INSURED,

                                MIN(TEMP.RISK_FROM_DATE) AS RISK_FROM_DATE,
                                MAX(TEMP.RISK_EXPIRY_DATE) AS RISK_EXPIRY_DATE,MAX(TEMP.NET_PREMIUM) AS NET_PREMIUM,
                                SUM(NO_OF_EMPLOYEES_COVERED) AS NO_OF_EMPLOYEES_COVERED, SUM(NO_OF_DEPENDANTS_COVERED) AS NO_OF_DEPENDANTS_COVERED
                                FROM
                                (SELECT IC_NAME,POL_NO, IP_Relation_Code, IP_Age, Broker_Name, NAME_OF_INSURED,
                                    MIN(RISK_FROM_DATE) AS RISK_FROM_DATE,
                                    MAX(RISK_EXPIRY_DATE) AS RISK_EXPIRY_DATE,
                                    MAX(PREMIUM) AS NET_PREMIUM,
                                    SUM(CASE WHEN ((IP_RELATION_CODE = 'SELF' OR IP_RELATION_CODE = 'EMPLOYEE')
                                    AND ISNULL(IP_CANCEL_DATE,'')='' ) THEN 1 ELSE 0 END) AS NO_OF_EMPLOYEES_COVERED,
                                    SUM(CASE WHEN ISNULL(IP_CANCEL_DATE,'')=''  THEN 1 ELSE 0 END ) -
                                    SUM(CASE WHEN (IP_RELATION_CODE IN ('SELF','EMPLOYEE')
                                    AND ISNULL(IP_CANCEL_DATE,'')='')  THEN 1 ELSE 0 END)  AS NO_OF_DEPENDANTS_COVERED
                                    FROM ENROLLMENT_MASTER WHERE Pol_No = '{pol_no}' AND Pol_Status = 'ENFORCED'
                                    GROUP BY POL_NO,IC_NAME, Broker_Name,NAME_OF_INSURED, IP_Relation_Code, IP_Age)
                                    AS TEMP GROUP BY TEMP.POL_NO,IC_NAME, Broker_Name,NAME_OF_INSURED, IP_Relation_Code, IP_Age)
                                    AS A LEFT OUTER JOIN(SELECT POL_NO,(SUM(ISNULL(AMTADD,0)) - SUM(ISNULL(AMTRED,0)) ) AS PREMIUM_ENDORSEMENT FROM DBO.[ENDORS]
                                    WHERE Pol_No = '{pol_no}'
                                    GROUP BY POL_NO) AS B ON A.Pol_No = B.Pol_No """, connection)
            # portal_premium_qs = PremiumLivesCorporate.objects.filter(Q(pol_no=pol_no))
            if ((len(paid_qs_corp) > 0) and (len(out_qs) > 0) and (len(crs_qs) > 0)):
                paid_df = pd.DataFrame(paid_qs_corp)
                crs_df = pd.DataFrame(crs_qs)
                out_df = pd.DataFrame(out_qs)
                portal_premium_df = pd.DataFrame(portal_premium_qs)
                relation_df = pd.DataFrame(relation_qs.values())


                config = {'responsive': True, 'displaylogo': False}
                # portal_premium_df = pd.DataFrame(portal_premium_qs.values())
                # enroll_df = pd.DataFrame(enroll_qs.values())
                # endors_qs = pd.DataFrame(enroll_qs.values())
                customercare_df = pd.DataFrame(customercare_qs.values())
                paid_df['status'] = paid_df['status'].str.strip()
                out_df['status'] = out_df['status'].str.strip()
                crs_df['status'] = crs_df['status'].str.strip()
                out_df['extra'] = out_df['extra'].str.strip()
                out_df['head'] = out_df['head'].str.strip()
                crs_df['substatus'] = crs_df['substatus'].str.strip()
                paid_df['settledamt'] = paid_df['settledamt'].astype('int64')
                portal_premium_df = pd.merge(portal_premium_df, relation_df, how='left', left_on='ip_relation_code',
                                             right_on='relation').drop(columns=['id', 'relation'])
                done = []
                not_done = []
                for col in portal_premium_df.columns:
                    try:
                        portal_premium_df[col] = portal_premium_df[col].str.strip()
                        done.append(col)
                    except:
                        not_done.append(col)
                portal_premium_df['Premium'] = portal_premium_df['NET_PREMIUM'].fillna(0) + portal_premium_df[
                    'PREMIUM_ENDORSEMENT'].fillna(0)
                relation_df['relation'] = relation_df['relation'].str.strip()
                # Count for all Paid, Crs, Outstanding ,lives, premium
                paid_claim_count = paid_df['sla_heading'].count()
                out_claim_count = out_df['sla_heading'].count()
                crs_claim_count = crs_df['sla_heading'].count()

                portal_premium_df['premium'].replace(np.NaN,0, inplace=True)

                premium = int(round((portal_premium_df['premium'].mean()), 0))
                lives = round((portal_premium_df['lives'].sum()), 0)

                # Relationship Wise lives
                relation_wise_lives_covered = portal_premium_df.groupby(['std_relation'])['lives'].agg(
                    'sum').reset_index()

                data = [go.Pie(labels=relation_wise_lives_covered['std_relation'],
                               values=relation_wise_lives_covered['lives'], text=relation_wise_lives_covered['lives'],
                               hole=.5, marker_colors=px.colors.qualitative.Plotly)
                        ]
                lives_by_ip_relation_code_fig = go.Figure(data=data)
                lives_by_ip_relation_code_fig.update_layout(margin=dict(t=100, b=100, l=100, r=100),
                                                            plot_bgcolor="rgba(0,0,0,0)",
                                                            title='')

                lives_by_ip_relation_code_fig_1 = plot(lives_by_ip_relation_code_fig, output_type='div', config=config)

                portal_premium_df['ip_age'] = portal_premium_df['ip_age'].astype(int)

                conditions = [
                    (portal_premium_df['ip_age'] <= 10),
                    (portal_premium_df['ip_age'] >= 11) & (portal_premium_df['ip_age'] <= 20),
                    (portal_premium_df['ip_age'] >= 21) & (portal_premium_df['ip_age'] <= 30),
                    (portal_premium_df['ip_age'] >= 31) & (portal_premium_df['ip_age'] <= 40),
                    (portal_premium_df['ip_age'] >= 41) & (portal_premium_df['ip_age'] <= 50),
                    (portal_premium_df['ip_age'] >= 51) & (portal_premium_df['ip_age'] <= 60),
                    (portal_premium_df['ip_age'] >= 61) & (portal_premium_df['ip_age'] <= 70),
                    (portal_premium_df['ip_age'] >= 71) & (portal_premium_df['ip_age'] <= 80),
                    (portal_premium_df['ip_age'] > 80)
                ]

                # create a list of the values we want to assign for each condition
                values = ['00-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', 'Above 80']

                # create a new column and use np.select to assign values to it using our lists as arguments
                portal_premium_df['age_band'] = np.select(conditions, values)

                crs_df['status'] = np.where(
                    (crs_df['status'].str.strip() == 'Closed') | (crs_df['status'].str.strip() == 'Repudiated'), 'CRS',
                    crs_df['status'])

                import random

                clrs = ['aliceblue', 'antiquewhite', 'aqua', 'aquamarine', 'azure', 'beige', 'bisque', 'black',
                        'blanchedalmond', 'blue', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse',
                        'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan',
                        'darkgoldenrod', 'darkgray', 'darkgrey', 'darkgreen', 'darkkhaki', 'darkmagenta',
                        'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen',
                        'darkslateblue', 'darkslategray', 'darkslategrey',
                        'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue',
                        'firebrick', 'floralwhite', 'forestgreen', 'fuchsia', 'gainsboro', 'ghostwhite', 'gold',
                        'goldenrod', 'gray', 'grey', 'green', 'greenyellow', 'honeydew', 'hotpink', 'indianred',
                        'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon',
                        'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgrey',
                        'lightgreen', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray',
                        'lightslategrey', 'lightsteelblue', 'lightyellow', 'lime', 'limegreen', 'linen', 'magenta',
                        'maroon', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple',
                        'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred',
                        'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'navy', 'oldlace', 'olive',
                        'olivedrab', 'orange', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise',
                        'palevioletred', 'papayawhip',
                        'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'purple', 'red', 'rosybrown', 'royalblue',
                        'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'silver', 'skyblue',
                        'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan',
                        'teal', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'white', 'whitesmoke', 'yellow',
                        'yellowgreen']

                clrs = random.sample(clrs, 20)

                # AgeBand wise relationship and lives
                age_band_wise_lives_covered = portal_premium_df.groupby(['age_band'])['lives'].agg('sum').reset_index()
                data = [go.Pie(labels=age_band_wise_lives_covered['age_band'],
                               values=age_band_wise_lives_covered['lives'], text=age_band_wise_lives_covered['lives'],
                               hole=.5, marker_colors=px.colors.qualitative.Plotly)
                        ]
                lives_by_age_band_fig = go.Figure(data=data)
                lives_by_age_band_fig.update_layout(margin=dict(t=100, b=100, l=100, r=100),
                                                    plot_bgcolor="rgba(0,0,0,0)",
                                                    title='')
                lives_by_age_band_fig.update_layout(title_x=0.5)

                lives_by_age_band_fig1 = plot(lives_by_age_band_fig, output_type='div', config=config)

                age_band_relationship_wise_insured_lives = portal_premium_df.groupby(['age_band', 'std_relation'])[
                    'lives'].agg('sum').reset_index()
                age_band_relationship_wise_insured_lives = age_band_relationship_wise_insured_lives[
                    (age_band_relationship_wise_insured_lives['std_relation'] != 'Parent in Law')]

                age_band_relationship_wise_insured_lives_1 = pd.pivot_table(age_band_relationship_wise_insured_lives,
                                                                            values='lives', index=['age_band'],
                                                                            columns=['std_relation'],
                                                                            aggfunc='sum').replace(np.nan, 0)

                age_band_relationship_wise_insured_lives_1_table = age_band_relationship_wise_insured_lives_1.reset_index()

                table_layout = go.Layout(
                    margin=dict(l=0, r=0, t=0, b=0),
                    # padding=dict(l=0, r=0, t=0, b=0)
                )

                # figure for plotly
                age_band_relationship_wise_insured_lives_fig1 = go.Figure(data=[go.Table(
                    header=dict(values=age_band_relationship_wise_insured_lives_1_table.columns,
                                fill_color='#094780',
                                line_color='darkslategray',
                                align='left',
                                font=dict(size=10, color='white')),
                    cells=dict(values=age_band_relationship_wise_insured_lives_1_table.T,
                               fill_color='white',
                               line_color='darkslategray',
                               align='left'))

                ], layout=table_layout)

                age_band_relationship_wise_insured_lives_fig2 = px.bar(age_band_relationship_wise_insured_lives,
                                                                       x="std_relation", y="lives", text_auto=True,
                                                                       color_discrete_sequence=px.colors.sequential.RdBu,
                                                                       color="age_band", barmode='stack')

                age_band_relationship_wise_insured_lives_fig2.update_layout(title='')

                age_band_relationship_wise_insured_lives_fig2.update_layout(title_x=0.5, plot_bgcolor = 'white')

                age_band_relationship_wise_insured_lives_fig2 = plot(age_band_relationship_wise_insured_lives_fig2,
                                                                     output_type='div', config=config)

                age_band_relationship_wise_insured_lives_fig1 = plot(age_band_relationship_wise_insured_lives_fig1,
                                                                     output_type='div', config=config)

                # claims status
                paid_sub_status = paid_df['status'].value_counts().reset_index()
                paid_sub_status = pd.DataFrame(paid_sub_status.values, columns=['status', 'claim_count'])

                out_sub_status = out_df['head'].str.strip()[
                    out_df['consider_count'] == 1].value_counts().reset_index()
                out_sub_status = pd.DataFrame(out_sub_status.values, columns=['status', 'claim_count'])

                crs_sub_status = crs_df['substatus'][crs_df['consider_count'] == 1].value_counts().reset_index()
                crs_sub_status = pd.DataFrame(crs_sub_status.values, columns=['status', 'claim_count'])

                claim_status = pd.concat([paid_sub_status, out_sub_status, crs_sub_status], axis=0)

                data = [
                    go.Pie(labels=claim_status['status'],
                           values=claim_status['claim_count'], text=claim_status['claim_count'],
                           hole=0.5, marker_colors=px.colors.qualitative.Plotly)
                ]
                claim_status_fig = go.Figure(data=data)
                claim_status_fig.update_layout(margin=dict(t=100, b=100, l=100, r=100), title='<b><b>')
                claim_status_fig.update_layout(title_x=0.5)

                claim_status_fig1 = plot(claim_status_fig, output_type='div', config=config)

                # All Claims By Claim Status

                paid_count = claim_status[claim_status['status'] == 'Paid']
                out_count = out_df['status'][out_df['consider_count'] == 1].value_counts().reset_index()
                out_count = pd.DataFrame(out_count.values, columns=['status', 'claim_count'])
                crs_count = crs_df['status'][crs_df['consider_count'] == 1].value_counts().reset_index()
                crs_count = pd.DataFrame(crs_count.values, columns=['status', 'claim_count'])

                ALL_CLAIMS_BY_CLAIM_STATUS = pd.concat([paid_count, out_count, crs_count])

                data = [
                    go.Pie(labels=ALL_CLAIMS_BY_CLAIM_STATUS['status'],
                           values=ALL_CLAIMS_BY_CLAIM_STATUS['claim_count'],
                           text=ALL_CLAIMS_BY_CLAIM_STATUS['claim_count'],
                           hole=.5, marker_colors=px.colors.qualitative.Plotly)
                ]
                ALL_CLAIMS_BY_CLAIM_STATUS_fig = go.Figure(data=data)
                ALL_CLAIMS_BY_CLAIM_STATUS_fig.update_layout(margin=dict(t=100, b=100, l=100, r=100),
                                                             title='')

                ALL_CLAIMS_BY_CLAIM_STATUS_fig.update_layout(title_x=0.5)

                ALL_CLAIMS_BY_CLAIM_STATUS_fig = plot(ALL_CLAIMS_BY_CLAIM_STATUS_fig, output_type='div')

                # All Claims Lodge Amt by Claim Status

                paid_lodge_amt = paid_df.groupby(['status']).agg({'actual_lodge_amt': sum}).reset_index()
                out_lodge_amt = out_df.groupby(['status']).agg({'actual_lodge_amt': sum}).reset_index()
                crs_lodge_amt = crs_df.groupby(['status']).agg({'actual_lodge_amt': sum}).reset_index()
                ALL_CLAIMS_LODGE_AMT_BY_CLAIM_STATUS = pd.concat([paid_lodge_amt, out_lodge_amt, crs_lodge_amt])

                # AGE BAND & RELATION WISE PAID CLAIM ANALYSIS

                Paid_Data_Relation = pd.merge(paid_df, relation_df, how='left', left_on='relation',
                                              right_on='relation').drop(columns=['relation'])



                relation_age_band_wise_paid_amt = pd.pivot_table(Paid_Data_Relation, index='age_band_rev',
                                                                 columns=('std_relation'), values=('settledamt'),
                                                                 aggfunc='sum', margins='True', margins_name='Total')

                relation_age_band_wise_paid_amt.drop(["Total"], inplace=True)

                relation_age_band_wise_paid_amt['Total'] = relation_age_band_wise_paid_amt['Total'].astype(int)

                relation_age_band_wise_paid_amt['Total%'] = round(
                    (relation_age_band_wise_paid_amt['Total'] / relation_age_band_wise_paid_amt['Total'].sum()) * 100,
                    2)
                relation_age_band_wise_paid_amt.loc['Total'] = relation_age_band_wise_paid_amt.sum(numeric_only=True,
                                                                                                   axis=0)

                relation_age_band_wise_paid_amt_1 = Paid_Data_Relation.groupby(['age_band_rev', 'std_relation'])[
                    'settledamt'].agg('sum').reset_index()
                relation_age_band_wise_paid_amt_1.rename(columns={'age_band_rev': 'age_band'}, inplace=True)

                relation_age_band_wise_paid_amt_tb = relation_age_band_wise_paid_amt.reset_index()
                relation_age_band_wise_paid_amt_tb.fillna(0, inplace=True)

                relation_age_band_wise_paid_amt_tb.rename(columns={'age_band_rev': 'age_band'}, inplace=True)

                relation_age_band_wise_paid_amt_fig1 = go.Figure(data=[go.Table(
                    header=dict(values=relation_age_band_wise_paid_amt_tb.columns,
                                fill_color='#094780',
                                line_color='darkslategray',
                                align='left',
                                font=dict(size=10, color='white')),
                    cells=dict(values=relation_age_band_wise_paid_amt_tb.T,
                               fill_color='white',
                               line_color='darkslategray',
                               align='left'))
                ], layout=table_layout)

                relation_age_band_wise_paid_amt_fig2 = px.bar(relation_age_band_wise_paid_amt_1, x="std_relation",
                                                              y="settledamt", text='settledamt',
                                                              color_discrete_sequence=px.colors.sequential.RdBu,
                                                              color="age_band", barmode='stack')

                relation_age_band_wise_paid_amt_fig2.update_layout(title='<b><b>')

                relation_age_band_wise_paid_amt_fig2.update_layout(title_x=0.5, plot_bgcolor = 'white')

                relation_age_band_wise_paid_amt_fig_1 = plot(relation_age_band_wise_paid_amt_fig1, output_type='div',
                                                             config=config)

                relation_age_band_wise_paid_amt_fig_2 = plot(relation_age_band_wise_paid_amt_fig2, output_type='div',
                                                             config=config)

                # Outstanding Claims Analysis

                out_df['substatus'] = np.where((out_df['head'] == "Under CI") | (out_df['head'] == "Under AL"),
                                               out_df['head'], out_df['extra'])

                out_claim = out_df['substatus'][out_df['consider_count'] == 1].value_counts().reset_index()
                out_claim = pd.DataFrame(out_claim.values, columns=['Claim_Status', 'OS_Count'])

                out_claim1 = out_df['substatus'][out_df['consider_count'] == 1].value_counts().reset_index()
                out_claim1 = pd.DataFrame(out_claim1.values, columns=['Claim_Status', 'OS_Count'])
                out_claim1['OS_Percentage'] = out_claim1['OS_Count'] / out_claim1['OS_Count'].sum() * 100
                out_claim1['OS_Percentage'] = out_claim1['OS_Percentage'].astype('float').round(2)
                out_claim1.loc['Total'] = pd.Series(out_claim1[['OS_Count', 'OS_Percentage']].sum(),
                                                    index=['OS_Count', 'OS_Percentage'])
                out_claim1.reset_index(drop=True, inplace=True)
                out_claim1['Claim_Status'].replace(np.NaN, 'Total', inplace=True)
                out_claim1['OS_Percentage'] = out_claim1['OS_Percentage'].round(2)
                out_claim1.rename(columns={'OS_Percentage': 'OS_Per'}, inplace=True)

                outstanding_claim_analysis_fig1 = px.bar(out_claim, x="Claim_Status", y="OS_Count",
                                                         color="Claim_Status", title="",
                                                         text_auto=True,
                                                         color_discrete_sequence=px.colors.sequential.RdBu)
                outstanding_claim_analysis_fig1.update_layout(xaxis={'visible': False, 'showticklabels': False})

                outstanding_claim_analysis_fig2 = go.Figure(data=[go.Table(
                    columnwidth=[140, 30, 30],
                    header=dict(values=list(out_claim1.columns),
                                fill_color='#094780',
                                line_color='darkslategray',
                                align='left',
                                font=dict(size=10, color='white')),
                    cells=dict(values=[out_claim1.Claim_Status, out_claim1.OS_Count, out_claim1.OS_Per],
                               fill_color='white',
                               line_color='darkslategray',
                               align='left'))
                ])

                outstanding_claim_analysis_fig1.update_layout(title_x=0.5)

                outstanding_claim_analysis_fig = plot(outstanding_claim_analysis_fig1, output_type='div', config=config)

                outstanding_claim_analysis_tb = plot(outstanding_claim_analysis_fig2, output_type='div', config=config)

                # Rejected Claims Analysis
                rejected_claim = crs_df['substatus'][crs_df['consider_count'] == 1].value_counts().reset_index()
                rejected_claim = pd.DataFrame(rejected_claim.values, columns=['claim_status', 'claim_count'])

                rejected_claim_breakup_fig1 = px.bar(rejected_claim, x="claim_status", y="claim_count",
                                                     color="claim_status", title="",
                                                     text_auto=True, color_discrete_sequence=px.colors.sequential.RdBu)
                rejected_claim_breakup_fig1.update_layout(xaxis={'visible': False, 'showticklabels': False})

                rejected_claim_breakup_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=list(rejected_claim.columns),
                                fill_color='#094780',
                                line_color='darkslategray',
                                align='left',
                                font=dict(size=12, color='white')),
                    cells=dict(values=[rejected_claim.claim_status, rejected_claim.claim_count],
                               fill_color='white',
                               line_color='darkslategray',
                               align='left'))
                ])

                rejected_claim_breakup_fig1.update_layout(title_x=0.5)

                rejected_claim_breakup_fig = plot(rejected_claim_breakup_fig1, output_type='div')

                rejected_claim_breakup_tb = plot(rejected_claim_breakup_fig2, output_type='div')

                # Treatment Type wise Analysis

                treatment_type_wise_analysis = paid_df.groupby(['treatmenttype'])[['consider_count', 'settledamt']].agg(
                    'sum').reset_index()
                treatment_type_wise_analysis1 = \
                treatment_type_wise_analysis.sort_values('settledamt', axis=0, ascending=False)[
                    ['treatmenttype', 'consider_count', 'settledamt']]
                treatment_type_wise_analysis1['Avg_Paid_Amount'] = (
                        treatment_type_wise_analysis1['settledamt'] / treatment_type_wise_analysis1[
                    'consider_count']).round()

                trace1 = go.Scatter(
                    mode='lines+markers',
                    x=treatment_type_wise_analysis['treatmenttype'],
                    y=treatment_type_wise_analysis['consider_count'],
                    text=treatment_type_wise_analysis["consider_count"],
                    name="Paid Claims",
                    marker_color='crimson'
                )

                trace2 = go.Bar(
                    x=treatment_type_wise_analysis['treatmenttype'],
                    y=treatment_type_wise_analysis['settledamt'], text=treatment_type_wise_analysis["settledamt"],
                    name="Paid Amount",
                    yaxis='y2',
                    marker_color='blue',
                    marker_line_width=1.5,
                    marker_line_color='rgb(8,48,107)',
                    opacity=0.5
                )

                data = [trace1, trace2]

                layout = go.Layout(
                    title_text='',
                    yaxis=dict(
                        range=[0, 200],
                        side='right'
                    ),
                    yaxis2=dict(
                        overlaying='y',
                        anchor='y3',
                    )
                )
                fig = go.Figure(data=data, layout=layout)
                # iplot(fig, filename='multiple-axes-double')
                treatment_type_wise_analysis_fig = plot(fig, output_type='div')

                ##Table
                treatment_type_wise_analysis1 = go.Figure(data=[go.Table(
                    header=dict(values=treatment_type_wise_analysis.columns,
                                fill_color='#094780',
                                line_color='darkslategray',
                                align='left',
                                font=dict(size=12, color='white')),
                    cells=dict(
                        values=[treatment_type_wise_analysis1.treatmenttype,
                                treatment_type_wise_analysis1.consider_count,
                                treatment_type_wise_analysis1.settledamt,
                                treatment_type_wise_analysis1.Avg_Paid_Amount],
                        fill_color='white',
                        line_color='darkslategray',
                        align='left'))])

                treatment_type_wise_analysis_tb = plot(treatment_type_wise_analysis1, output_type='div')

                # paid_ipd_opd_liablityamt_count
                paid_ipd_opd_liablityamt = paid_df.groupby(['status', 'ipd_opd']).agg(
                    {'settledamt': sum}).reset_index()

                paid_ipd_opd_claim_count = paid_df[['status', 'ipd_opd']][
                    paid_df['consider_count'] == 1].value_counts().reset_index()
                paid_ipd_opd_claim_count = pd.DataFrame(paid_ipd_opd_claim_count.values,
                                                        columns=['status', 'ipd_opd', 'claim_count'])
                paid_ipd_opd_claim_count['claim_count'] = paid_ipd_opd_claim_count['claim_count'].astype('int64')

                paid_ipd_opd_liablityamt_count = paid_ipd_opd_liablityamt
                paid_ipd_opd_liablityamt_count['claim_count'] = paid_ipd_opd_claim_count['claim_count']

                # cashless_vs_reimbersment_claim_count
                # Paid
                cashless_vs_reimbersement_claim_count_paid = paid_df.groupby(['status', 'actuallosstype']).agg(
                    {'consider_count': sum}).reset_index()

                df = cashless_vs_reimbersement_claim_count_paid.copy()
                data = [
                    go.Pie(labels=df['actuallosstype'],
                           values=df['consider_count'], text=df['consider_count'],
                           hole=.5, marker_colors=px.colors.qualitative.Plotly)
                ]
                cashless_vs_reimbersement_claim_count_paid1 = go.Figure(data=data)
                cashless_vs_reimbersement_claim_count_paid1.update_layout(margin=dict(t=100, b=100, l=100, r=100),
                                                                          title='<b>Cashless vs Reimbersement Paid Claim Count<b>')
                cashless_vs_reimbersement_claim_count_paid1.update_layout(title_x=0.5)

                cashless_vs_reimbersement_claim_count_paid_fig = plot(cashless_vs_reimbersement_claim_count_paid1,
                                                                      output_type='div', config=config)

                # Out
                cashless_vs_reimbersement_claim_count_out = out_df.groupby(['status', 'actuallosstype']).agg(
                    {'consider_count': sum}).reset_index()

                # PAID AMOUNT ANALYSIS

                cashless_vs_reimbersement_claim_amt_paid = paid_df.groupby(['status', 'actuallosstype']).agg(
                    {'settledamt': sum}).reset_index()
                cashless_vs_reimbersement_claim_amt_paid_df = cashless_vs_reimbersement_claim_amt_paid.copy()

                cashless_vs_reimbersement_claim_amt_paid_fig1 = [
                    go.Pie(labels=cashless_vs_reimbersement_claim_amt_paid_df['actuallosstype'],
                           values=cashless_vs_reimbersement_claim_amt_paid_df['settledamt'],
                           text=cashless_vs_reimbersement_claim_amt_paid_df['settledamt'],
                           hole=.5, marker_colors=px.colors.qualitative.Plotly)
                ]
                cashless_vs_reimbersement_claim_amt_paid_fig = go.Figure(
                    data=cashless_vs_reimbersement_claim_amt_paid_fig1)
                cashless_vs_reimbersement_claim_amt_paid_fig.update_layout(margin=dict(t=100, b=100, l=100, r=100),
                                                                           title='<b>Cashless vs Reimbersement Paid Amount<b>')
                cashless_vs_reimbersement_claim_amt_paid_fig.update_layout(title_x=0.5)

                cashless_vs_reimbersement_claim_amt_paid_fig = plot(cashless_vs_reimbersement_claim_amt_paid_fig,
                                                                    output_type='div')

                # df1 = cashless_vs_reimbersement_claim_count_out.copy()
                # data = [
                #     go.Pie(labels=df1['actuallosstype'],
                #            values=df1['consider_count'], text=df1['consider_count'],
                #            hole=.5, marker_colors=px.colors.qualitative.Plotly)
                # ]
                # cashless_vs_reimbersement_claim_count_out1 = go.Figure(data=data)
                # cashless_vs_reimbersement_claim_count_out1.update_layout(margin=dict(t=100, b=100, l=100, r=100),
                #                                                           title='<b>Cashless vs Reimbersement Paid Claim Count<b>')
                # cashless_vs_reimbersement_claim_count_out1.update_layout(title_x=0.5)
                #
                # cashless_vs_reimbersement_claim_count_out_fig = plot(cashless_vs_reimbersement_claim_count_out1,
                #                                                   output_type='div', config=config)

                # CRS
                cashless_vs_reimbersement_claim_count_crs = crs_df.groupby(['status', 'actuallosstype']).agg(
                    {'consider_count': sum}).reset_index()
                # cashless_vs_reimbersement_claim_count_crs = cashless_vs_reimbersement_claim_count_crs.to_html()

                cashless_vs_reimbersement_claim_count_1 = pd.concat(
                    [cashless_vs_reimbersement_claim_count_paid, cashless_vs_reimbersement_claim_count_crs,
                     cashless_vs_reimbersement_claim_count_out])
                cashless_vs_reimbersement_claim_count = cashless_vs_reimbersement_claim_count_1.groupby(
                    ['actuallosstype']).agg({'consider_count': sum}).reset_index()

                # cashless_vs_reimbersment_lodge_amount
                # Paid

                cashless_vs_reimbersement_lodge_amount_paid = paid_df.groupby(['status', 'actuallosstype']).agg(
                    {'actual_lodge_amt': sum}).reset_index()

                # out
                cashless_vs_reimbersement_lodge_amount_out = out_df.groupby(['status', 'actuallosstype']).agg(
                    {'actual_lodge_amt': sum}).reset_index()

                # crs
                cashless_vs_reimbersement_lodge_amount_crs = crs_df.groupby(['status', 'actuallosstype']).agg(
                    {'actual_lodge_amt': sum}).reset_index()

                cashless_vs_reimbersement_lodge_amount_1 = pd.concat(
                    [cashless_vs_reimbersement_lodge_amount_paid, cashless_vs_reimbersement_lodge_amount_crs,
                     cashless_vs_reimbersement_lodge_amount_out])
                cashless_vs_reimbersement_lodge_amount = cashless_vs_reimbersement_lodge_amount_1.groupby(
                    ['actuallosstype']).agg({'actual_lodge_amt': sum}).reset_index()

                cashless_vs_reimbersement_lodge_amount_data = [
                    go.Pie(labels=cashless_vs_reimbersement_lodge_amount['actuallosstype'],
                           values=cashless_vs_reimbersement_lodge_amount['actual_lodge_amt'],
                           text=cashless_vs_reimbersement_lodge_amount['actual_lodge_amt'],
                           hole=.5, marker_colors=px.colors.qualitative.Plotly)
                ]
                cashless_vs_reimbersement_lodge_amount_fig = go.Figure(data=cashless_vs_reimbersement_lodge_amount_data)
                cashless_vs_reimbersement_lodge_amount_fig.update_layout(margin=dict(t=100, b=100, l=100, r=100),
                                                                         title='<b>Cashless vs Reimbersement Lodge Amt<b>')
                cashless_vs_reimbersement_lodge_amount_fig.update_layout(title_x=0.5)

                cashless_vs_reimbersement_lodge_amount_fig = plot(cashless_vs_reimbersement_lodge_amount_fig,
                                                                  output_type='div')

                out_df['settledamt'] = 0
                crs_df['settledamt'] = 0
                crs_df['liablityamt'] = 0

                cols = ['status', 'actuallosstype', 'actual_lodge_amt', 'settledamt', 'consider_count', 'ipd_opd']

                dump = pd.concat([paid_df[cols], crs_df[cols], out_df[cols]]).reset_index(drop=True)

                # cashless_vs_reimbursement_average_amount

                cond1 = dump['consider_count'] == 1
                dump['avg_lodge_amt'] = round(
                    dump[cond1]['actual_lodge_amt'].astype(int) / dump[cond1]['consider_count'].astype(int))

                cashless_vs_reimbursement_average_lodge_amount = pd.pivot_table(dump, values='avg_lodge_amt',
                                                                                index=['actuallosstype']
                                                                                ).replace(np.nan, 0)
                cashless_vs_reimbursement_average_lodge_amount.round().astype('int')

                cond2 = paid_df['consider_count'] == 1
                paid_df['avg_paid_amt'] = round(
                    paid_df[cond2]['settledamt'].astype(int) / paid_df[cond2]['consider_count'].astype(int))

                cashless_vs_reimbursement_average_paid_amount = pd.pivot_table(paid_df, values='avg_paid_amt',
                                                                               index=['actuallosstype']
                                                                               ).replace(np.nan, 0)
                cashless_vs_reimbursement_average_paid_amount.round().astype('int')
                # cashless_vs_reimbursement_average_amount_ipd
                ipd_filtered_lodge = dump.loc[(dump['consider_count'] == 1) & (dump['ipd_opd'] == 'IPD')]

                ipd_filtered_lodge['avg_lodge_amt_ipd'] = round(
                    ipd_filtered_lodge['actual_lodge_amt'].astype(int) / ipd_filtered_lodge['consider_count'].astype(
                        int))

                ipd_filtered_paid = dump.loc[
                    (dump['status'] == 'Paid') & (dump['consider_count'] == 1) & (dump['ipd_opd'] == 'IPD')]

                cashless_vs_reimbursement_average_lodge_amount_ipd = pd.pivot_table(ipd_filtered_lodge,
                                                                                    values='avg_lodge_amt_ipd',
                                                                                    index=['actuallosstype']
                                                                                    ).replace(np.nan, 0)
                cashless_vs_reimbursement_average_lodge_amount_ipd.round().astype('int')

                ipd_filtered_paid['avg_paid_amt_ipd'] = ipd_filtered_paid['settledamt'] / ipd_filtered_paid[
                    'consider_count']
                ipd_filtered_paid['avg_paid_amt_ipd'] = ipd_filtered_paid['avg_paid_amt_ipd'].astype('int')

                cashless_vs_reimbursement_average_paid_amount_ipd = pd.pivot_table(ipd_filtered_paid,
                                                                                   values='avg_paid_amt_ipd',
                                                                                   index=['actuallosstype']
                                                                                   ).replace(np.nan, 0)
                cashless_vs_reimbursement_average_paid_amount_ipd.round().astype('int')
                # Total Paid No by Age Band
                paid_df['age_band_rev'].value_counts().rename_axis('age_band').reset_index(name='Paid Count')
                # Total Paid Amount by Age Band
                paid_df.groupby(['age_band_rev'])['settledamt'].agg('sum').reset_index(name='Paid Amount')

                # Incidence Rate by Age Band
                age_band_consider_count = pd.concat(
                    [paid_df[['age_band_rev', 'consider_count']], out_df[['age_band_rev', 'consider_count']],
                     crs_df[['age_band_rev', 'consider_count']]])

                age_band_ir = age_band_consider_count.groupby('age_band_rev')['consider_count'].sum().reset_index()
                age_band_ir1 = pd.merge(age_band_ir, age_band_wise_lives_covered, how='inner', left_on='age_band_rev',
                                        right_on='age_band')
                age_band_ir1['IR'] = age_band_ir1['consider_count'] / age_band_ir1['lives'] * 100
                age_band_ir1['IR'] = age_band_ir1['IR'].round(2)

                Age_Band_IR = px.bar(age_band_ir1.sort_values('age_band_rev', ascending=False), x="age_band_rev",
                                     y="IR", color="age_band_rev",
                                     title="<b><b>", text="IR",
                                     color_discrete_sequence=px.colors.sequential.RdBu)
                # SI_Band_IR.update_layout( xaxis={'visible': False, 'showticklabels': False})

                Age_Band_IR.update_layout(title_x=0.5)
                Age_Band_IR = plot(Age_Band_IR, output_type='div')

                no_of_claims_for_paid = pd.DataFrame(
                    paid_df.assign(count=(paid_df['status'] == 'Paid')).groupby(['pol_no', 'insuredname'],
                                                                                sort=False, as_index=False)[
                        'consider_count'].agg({'count': sum}))
                no_of_claims_for_paid.rename(columns={'count': 'no_of_claims_for_paid'}, inplace=True)
                # no_of_claims_for_paid = no_of_claims_for_paid[(no_of_claims_for_paid['Status'] == 'Paid')]
                # Cashless Paid Amt by Age Band
                paid_df.groupby(['age_band_rev'])['settledamt'].agg('sum').reset_index(name='Paid Amount')

                cashless_paid_amt_age_band = \
                    paid_df[paid_df['actuallosstype'] == 'Cash Less'].groupby(['age_band_rev'], sort=False,
                                                                              as_index=False)['settledamt'].agg(
                        {'count': sum})
                cashless_paid_amt_age_band.rename(columns={'count': 'cashless_paid_amt_age_band'}, inplace=True)
                # no_of_claims_for_paid = no_of_claims_for_paid[(no_of_claims_for_paid['Status'] == 'Paid')]

                non_cashless_paid_amt_age_band = \
                    paid_df[paid_df['actuallosstype'] == 'Non Cash Less'].groupby(['age_band_rev'], sort=False,
                                                                                  as_index=False)['settledamt'].agg(
                        {'count': sum})
                non_cashless_paid_amt_age_band.rename(columns={'count': 'non_cashless_paid_amt_age_band'}, inplace=True)
                # no_of_claims_for_paid = no_of_claims_for_paid[(no_of_claims_for_paid['Status'] == 'Paid')]

                # Top Ailment Wise Analysis

                d = paid_df[paid_df['new_disease_category'] != 'Other']
                top_ailment_wise_analysis = d.groupby(['new_disease_category'], sort=False, as_index=False)[
                    'settledamt', 'consider_count'].agg(sum)

                top10_ailment_wise_analysis = \
                top_ailment_wise_analysis.sort_values('settledamt', axis=0, ascending=False)[
                    ['new_disease_category', 'settledamt', 'consider_count']].head(10)
                top10_ailment_wise_analysis.rename(
                    columns={'new_disease_category': 'Disease_catogary', 'settledamt': 'PaidAmt',
                             'consider_count': 'PaidClaims'}, inplace=True)

                # --------------------------------------Fig-----------------------------------------------
                top10_ailment_wise_analysis_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=list(top10_ailment_wise_analysis.columns),
                                fill_color='paleturquoise',
                                align='center'),
                    cells=dict(
                        values=[top10_ailment_wise_analysis.Disease_catogary, top10_ailment_wise_analysis.PaidAmt,
                                top10_ailment_wise_analysis.PaidClaims],
                        fill_color='lavender',
                        align='center'))
                ])

                top10_ailment_wise_analysis_fig1 = go.Figure()
                # fig.add_trace(go.Bar(
                #     x=top_ailment_wise_analysis['DiseaseCategory'],
                #     y=top_ailment_wise_analysis['SettledAmt'],
                #     name='Setlled amt',
                #     marker_color='indianred'
                # ))
                top10_ailment_wise_analysis_fig1.add_trace(go.Bar(
                    x=top10_ailment_wise_analysis['PaidAmt'],
                    y=top10_ailment_wise_analysis['Disease_catogary'],
                    text=top10_ailment_wise_analysis['PaidAmt'],
                    name='Paid Amount',
                    marker_color='lightsalmon', orientation='h'
                ))
                top10_ailment_wise_analysis_fig1.update_traces(textposition='auto')
                top10_ailment_wise_analysis_fig1.update_layout(yaxis=dict(autorange="reversed"))
                top10_ailment_wise_analysis_fig1.update_layout(title='<b><b>')
                top10_ailment_wise_analysis_fig1.update_layout(title_x=0.5)

                top10_ailment_wise_analysis_fig1.update_layout(barmode='group', xaxis_tickangle=-90)
                top10_ailment_wise_analysis_fig1 = plot(top10_ailment_wise_analysis_fig1, output_type='div')
                top10_ailment_wise_analysis_fig2 = plot(top10_ailment_wise_analysis_fig2, output_type='div')

                # Top 10 Hospital wise Paid Amount -IPD Only

                paid_df['consider_count'].replace(0, np.nan, inplace=True)
                paid_df['claim_count'] = paid_df[paid_df['ipd_opd'] == 'IPD'].groupby('hospitlname')[
                    'consider_count'].transform('count')
                top10hospital_paidamt_ipd = paid_df.sort_values('settledamt', axis=0, ascending=False)[
                    ['hospitlname', 'settledamt', 'claim_count']].head(10)

                # Top 10 Hospital wise Paid Amount

                top_hospital_paidamt = paid_df.groupby(['hospitlname'], sort=False, as_index=False)[
                    'settledamt', 'consider_count'].sum()
                top10hospital_paidamt = top_hospital_paidamt.sort_values('settledamt', axis=0, ascending=False)[
                    ['hospitlname', 'settledamt', 'consider_count']].head(10)
                top10hospital_paidamt.rename(
                    columns={'hospitlname': 'HospitalName', 'settledamt': 'PaidAmt', 'consider_count': 'PaidClaims'},
                    inplace=True)
                # define a regular expression pattern to match the text before "hospital"
                import re
                pattern = r'^(.*?)\bHospital\b'

                # define a function to extract the text before "hospital" using regex
                def extract_text(text):
                    match = re.search(pattern, text)
                    if match:
                        return match.group(0).strip()
                    else:
                        return text

                # apply the function to the 'text' column to extract the text before "hospital"
                top10hospital_paidamt['HospitalName'] = top10hospital_paidamt['HospitalName'].apply(extract_text)
                # top10hospital_paidamt['HospitalName1'] = top10hospital_paidamt['HospitalName'].apply(
                #     lambda x: "<br>".join(textwrap.wrap(x, width=30)) if len(x) > 4 else x)
                pattern = r'\s*\([^)]*\)'

                # Use the replace() method to remove text in brackets from the 'text' column
                top10hospital_paidamt['HospitalName'] = top10hospital_paidamt['HospitalName'].replace(pattern, '',
                                                                                                      regex=True)

                top10_hospital_wise_paidamt_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=list(top10hospital_paidamt.columns),
                                fill_color='paleturquoise',
                                align='center'),
                    cells=dict(values=[top10hospital_paidamt.HospitalName, top10hospital_paidamt.PaidAmt,
                                       top10hospital_paidamt.PaidAmt],
                               fill_color='lavender',
                               align='center'))
                ])

                top10_hospital_wise_paidamt_fig1 = go.Figure()
                # fig.add_trace(go.Bar(
                #     x=top_ailment_wise_analysis['DiseaseCategory'],
                #     y=top_ailment_wise_analysis['SettledAmt'],
                #     name='Setlled amt',
                #     marker_color='indianred'
                # ))
                top10_hospital_wise_paidamt_fig1.add_trace(go.Bar(
                    x=top10hospital_paidamt['PaidAmt'],
                    y=top10hospital_paidamt['HospitalName'],
                    text=top10hospital_paidamt['PaidAmt'],
                    name='Paid Amount',
                    marker_color='lime', orientation='h'
                ))
                top10_hospital_wise_paidamt_fig1.update_traces(textposition='auto')
                top10_hospital_wise_paidamt_fig1.update_layout(yaxis=dict(autorange="reversed"))
                top10_hospital_wise_paidamt_fig1.update_layout(title='<b><b>')
                top10_hospital_wise_paidamt_fig1.update_layout(title_x=0.5)

                # fig.update_layout(barmode='group', xaxis_tickangle=-45)
                top10_hospital_wise_paidamt_fig1 = plot(top10_hospital_wise_paidamt_fig1, output_type='div')
                top10_hospital_wise_paidamt_fig2 = plot(top10_hospital_wise_paidamt_fig2, output_type='div')

                # Amt Band Wise Paid Amt
                conditions = [
                    (paid_df['settledamt'] >= 0) & (paid_df['settledamt'] <= 10000),
                    (paid_df['settledamt'] >= 10001) & (paid_df['settledamt'] <= 20000),
                    (paid_df['settledamt'] >= 20001) & (paid_df['settledamt'] <= 30000),
                    (paid_df['settledamt'] >= 30001) & (paid_df['settledamt'] <= 50000),
                    (paid_df['settledamt'] >= 50001) & (paid_df['settledamt'] <= 75000),
                    (paid_df['settledamt'] >= 75001) & (paid_df['settledamt'] <= 100000),
                    (paid_df['settledamt'] >= 100001) & (paid_df['settledamt'] <= 150000),
                    (paid_df['settledamt'] >= 150001) & (paid_df['settledamt'] <= 200000),
                    (paid_df['settledamt'] >= 200001) & (paid_df['settledamt'] <= 300000),
                    (paid_df['settledamt'] >= 300001) & (paid_df['settledamt'] <= 1000000000),
                ]

                # create a list of the values we want to assign for each condition
                values = ['0-10000', '10001-20000', '20001-30000', '30001-50000', '50001-75000', '75001-100000',
                          '100001-150000', '150001-200000', '200001-300000', 'Above 300000']

                # create a new column and use np.select to assign values to it using our lists as arguments
                paid_df['amt_band'] = np.select(conditions, values)

                amt_band_wise_paid_amt = paid_df[paid_df['consider_count'] == 1].groupby(["amt_band"])[
                    'settledamt'].sum().reset_index()

                paid_amt_band_cashless = (paid_df[paid_df['consider_count'] == 1])
                paid_amt_band_cashless = (
                    paid_amt_band_cashless[paid_amt_band_cashless['actuallosstype'] == 'Cash Less'])
                paid_amt_band_cashless = paid_amt_band_cashless.groupby(["amt_band"])['settledamt'].sum().reset_index()

                paid_amt_band_non_cashless = (paid_df[paid_df['consider_count'] == 1])
                paid_amt_band_non_cashless = (
                    paid_amt_band_non_cashless[paid_amt_band_non_cashless['actuallosstype'] == 'Non Cash Less'])
                paid_amt_band_non_cashless = paid_amt_band_non_cashless.groupby(["amt_band"])[
                    'settledamt'].sum().reset_index()

                total_insured_person = portal_premium_df['lives'].sum()

                pd.options.display.float_format = '₹{:.2f}'.format
                total_premium = portal_premium_df['premium'].unique().sum()
                total_premium_rupees = format_currency(total_premium, 'INR', locale='en_IN')

                total_earned_premium = portal_premium_df['EARNED_PERMIUM'].unique().sum().round()
                total_earned_premium_rupees = format_currency(total_earned_premium, 'INR', locale='en_IN')

                policy_coverage_completion_days = portal_premium_df['POLICYRUNDAY'].unique().sum().round()

                incurred_amount = paid_df['liablityamt'].sum() + out_df['liablityamt'].sum()
                incurred_amount_rupees = format_currency(incurred_amount, 'INR', locale='en_IN')

                avg_premium_per_life = (portal_premium_df['Premium'].mean() / portal_premium_df['lives'].sum()).round()
                avg_premium_per_life_rupees = format_currency(avg_premium_per_life, 'INR', locale='en_IN')

                avg_incurred_amt_per_life = round(incurred_amount / portal_premium_df['lives'].sum())
                avg_incurred_amt_per_life_rupees = format_currency(avg_incurred_amt_per_life, 'INR', locale='en_IN')

                incurred_amount = float(incurred_amount)
                claims_ratio_per = round(incurred_amount / total_premium * 100)
                claims_ratio_percentage = str(claims_ratio_per) + '%'
                # claims_ratio_percentage = claims_ratio_per.astype(str) + '%'

                claims_ratio_on_earned_premium = (incurred_amount / total_earned_premium * 100).round()
                claims_ratio_on_earned_premium_percentage = claims_ratio_on_earned_premium.astype(str) + '%'

                cashless_out_lodge_amt = out_df.loc[(out_df['actuallosstype'].str.strip() == 'Non Cash Less') & (
                        out_df['lodgetype'].str.strip() != 'Deductions Payment')]

                cashless_paid_liablity_amt = paid_df.loc[(paid_df['actuallosstype'].str.strip() == 'Non Cash Less')]

                current_incurred_non_cashless_amt = cashless_paid_liablity_amt['liablityamt'].sum() + \
                                                    cashless_out_lodge_amt['actual_lodge_amt'].sum()

                non_cashless_paid = paid_df['actuallosstype'].str.strip() == 'Non Cash Less'
                non_cashless_out = out_df['actuallosstype'].str.strip() == 'Non Cash Less'
                non_cashless_crs = crs_df['actuallosstype'].str.strip() == 'Non Cash Less'

                data = pd.concat([paid_df[non_cashless_paid][['lodgedate', 'dod']],
                                  out_df[non_cashless_out][['lodgedate', 'dod']],
                                  crs_df[non_cashless_crs][['lodgedate', 'dod']]])

                gap = (data['lodgedate'] - data['dod']).apply(lambda x: x.days)
                gap = gap.apply(lambda x: x if x > 0 else 0)
                gap = gap.mean()

                incurred_but_not_reported_amount_till_date = (
                        float(current_incurred_non_cashless_amt) * gap / policy_coverage_completion_days).round()

                ibnr = (incurred_but_not_reported_amount_till_date / incurred_amount * 100).round()
                ibnr_percentage = ibnr.astype(str) + '%'

                ir = (paid_count['claim_count'].astype(int).sum() + out_count['claim_count'].astype(int).sum() +
                      crs_count['claim_count'].astype(int).sum()) / portal_premium_df['lives'].astype(int).sum() * 100
                incident_rate = ir.round(2)
                incident_rate_percenatge = incident_rate.astype(str) + '%'

                prorated_ir = (incident_rate * 365 / policy_coverage_completion_days).round(2)
                prorated_ir_percenatge = prorated_ir.astype(str) + '%'

                total_likely_incurred_amount_at_policy_expiry = (
                        incurred_amount * 365 / policy_coverage_completion_days).round()

                IBNR_Amount_at_policy_Expiry = total_likely_incurred_amount_at_policy_expiry * ibnr

                total_likely_outgo_for_policy = total_likely_incurred_amount_at_policy_expiry + IBNR_Amount_at_policy_Expiry
                total_likely_outgo_for_policy_rupees = format_currency(total_likely_outgo_for_policy, 'INR',
                                                                       locale='en_IN')

                avg_incurred_amt_per_life = (incurred_amount / total_insured_person).round()

                Lodge_Amount = ALL_CLAIMS_LODGE_AMT_BY_CLAIM_STATUS['actual_lodge_amt'].sum()

                Reported_claims = paid_df['consider_count'].sum() + crs_df['consider_count'].sum() + out_df[
                    'consider_count'].sum()

                Settled_claims = paid_df['consider_count'].sum() + crs_df['consider_count'].sum()

                Settlement_Ratio = round((Settled_claims / Reported_claims) * 100, 2)
                Settlement_Ratio_Per = Settlement_Ratio.astype(str) + '%'

                Paid_Amount = paid_df['settledamt'].sum()

                a1 = {'total_insured_person': total_insured_person, 'total_premium': total_premium_rupees,
                      'total_earned_premium': total_earned_premium_rupees,
                      'policy_coverage_completion_days': policy_coverage_completion_days,
                      'incurred_amount': incurred_amount_rupees, 'avg_premium_per_life': avg_premium_per_life_rupees,
                      'claims_ratio_per': claims_ratio_percentage,
                      'claims_ratio_on_earned_premium': claims_ratio_on_earned_premium_percentage,
                      'ibnr': ibnr_percentage, 'incident_rate': incident_rate_percenatge,
                      'prorated_ir': prorated_ir_percenatge,
                      'total_likely_outgo_for_policy': total_likely_outgo_for_policy_rupees,
                      'total_likely_incurred_amount_at_policy_expiry': total_likely_incurred_amount_at_policy_expiry,
                      'avg_incurred_amt_per_life': avg_incurred_amt_per_life}

                # Consolidated Summery
                pd.options.display.float_format = '{:.2f}'.format
                summary = pd.DataFrame(zip(a1.keys(), (a1.values())), columns=['Parameters', 'Values'])

                summary2 = go.Figure(data=[go.Table(#columnwidth=[90, 50],
                                                    header=dict(values=list(summary.columns),
                                                                fill_color='#094780',
                                                                line_color='darkslategray',
                                                                align='left',
                                                                font=dict(size=10, color='white')),
                                                    cells=dict(values=[summary.Parameters, summary.Values],
                                                               fill_color='white',
                                                               line_color='darkslategray',
                                                               align='left'))
                                           ], layout=table_layout)

                summary2.layout.width = 1000

                summary2.update_layout(height=len(summary) * 30)

                summary1 = plot(summary2, output_type='div')

                # Summary Bar Plot

                numbers = {'Premium': total_premium,
                           'Earned Premium': total_earned_premium, 'Lodge Amount': Lodge_Amount,
                           'Incurred Amount': incurred_amount, 'Paid Amount': Paid_Amount}
                numbers = pd.DataFrame(zip(numbers.keys(), (numbers.values())), columns=['Parameters', 'Values'])

                percentage = {'IR(%)': incident_rate,
                              'Prorated Incident Rate(%)': prorated_ir, 'ICR(%)': claims_ratio_per,
                              'ECR(%)': claims_ratio_on_earned_premium, 'Settlement Ratio(%)': Settlement_Ratio}

                percentage = pd.DataFrame(zip(percentage.keys(), (percentage.values())),
                                          columns=['Parameters', 'Values'])

                Summary_plot = px.bar(numbers, x="Parameters", y="Values",
                                      color="Parameters", title="", text="Values",
                                      color_discrete_sequence=px.colors.sequential.RdBu)
                Summary_plot.update_layout(xaxis={'visible': True, 'showticklabels': True})
                Summary_plot.update_layout(title_x=0.5)

                Summary_plot = plot(Summary_plot, output_type='div')

                Summary_plot2 = px.bar(percentage, x="Parameters", y="Values",
                                       color="Parameters", title="",
                                       text=[f'{i}%' for i in percentage['Values']],
                                       color_discrete_sequence=px.colors.sequential.RdBu)
                Summary_plot2.update_layout(xaxis={'visible': True, 'showticklabels': True})
                Summary_plot2.update_layout(title_x=0.5)

                Summary_plot2 = plot(Summary_plot2, output_type='div')

                # IPD_OPD WISE SUMMARY

                crs_ipd_summary = (crs_df[crs_df['ipd_opd'] == 'IPD'])
                paid_ipd_summary = (paid_df[paid_df['ipd_opd'] == 'IPD'])
                out_ipd_summary = (out_df[out_df['ipd_opd'] == 'IPD'])

                crs_opd_summary = (crs_df[crs_df['ipd_opd'] == 'OPD'])
                paid_opd_summary = (paid_df[paid_df['ipd_opd'] == 'OPD'])
                out_opd_summary = (out_df[out_df['ipd_opd'] == 'OPD'])

                Reported_claims_ipd_summary = paid_ipd_summary['consider_count'].sum() + crs_ipd_summary[
                    'consider_count'].sum() + out_ipd_summary['consider_count'].sum()

                Reported_claims_opd_summary = paid_opd_summary['consider_count'].sum() + crs_opd_summary[
                    'consider_count'].sum() + out_opd_summary['consider_count'].sum()

                Reported_amt_ipd_summary = \
                    paid_ipd_summary[(paid_ipd_summary['lodgetype'].str.strip() != "Deductions Payment")][
                        'lodgeamt'].agg(
                        {'count': sum}) + \
                    crs_ipd_summary[(crs_ipd_summary['lodgetype'].str.strip() != "Deductions Payment")][
                        'cl_lod_amt'].agg(
                        {'count': sum}) + \
                    out_ipd_summary[(out_ipd_summary['lodgetype'].str.strip() != "Deductions Payment")][
                        'actuallodgeamt'].agg(
                        {'count': sum})
                Reported_amt_ipd_summary = Reported_amt_ipd_summary[0]
                Reported_amt_ipd = format_currency(Reported_amt_ipd_summary, 'INR', locale='en_IN')

                Reported_amt_opd_summary = \
                    paid_opd_summary[(paid_opd_summary['lodgetype'].str.strip() != "Deductions Payment")][
                        'lodgeamt'].agg(
                        {'count': sum}) + \
                    crs_opd_summary[(crs_opd_summary['lodgetype'].str.strip() != "Deductions Payment")][
                        'cl_lod_amt'].agg(
                        {'count': sum}) + \
                    out_opd_summary[(out_opd_summary['lodgetype'].str.strip() != "Deductions Payment")][
                        'actuallodgeamt'].agg(
                        {'count': sum})
                Reported_amt_opd_summary = Reported_amt_opd_summary[0]
                Reported_amt_opd = format_currency(Reported_amt_opd_summary, 'INR', locale='en_IN')

                settled_claims_ipd_summary = paid_ipd_summary['consider_count'].sum() + crs_ipd_summary[
                    'consider_count'].sum()

                settled_claims_opd_summary = paid_opd_summary['consider_count'].sum() + crs_opd_summary[
                    'consider_count'].sum()

                incurred_amt_ipd_summary = paid_ipd_summary['liablityamt'].sum() + out_ipd_summary['liablityamt'].sum()
                incurred_amt_ipd = format_currency(incurred_amt_ipd_summary, 'INR', locale='en_IN')

                incurred_amt_opd_summary = paid_opd_summary['liablityamt'].sum() + out_opd_summary['liablityamt'].sum()
                incurred_amt_opd = format_currency(incurred_amt_opd_summary, 'INR', locale='en_IN')

                paid_claims_ipd_summary = paid_ipd_summary['consider_count'].sum()

                paid_claims_opd_summary = paid_opd_summary['consider_count'].sum()

                paid_amt_ipd_summary = paid_ipd_summary['liablityamt'].sum()
                paid_amt_ipd = format_currency(paid_amt_ipd_summary, 'INR', locale='en_IN')

                paid_amt_opd_summary = paid_opd_summary['liablityamt'].sum()
                paid_amt_opd = format_currency(paid_amt_opd_summary, 'INR', locale='en_IN')

                lives_ipd_opd = total_insured_person.copy()

                IR_ipd_summary = ((Reported_claims_ipd_summary / lives_ipd_opd) * 100).round(2)
                IR_ipd = IR_ipd_summary.astype(str) + '%'

                IR_opd_summary = ((Reported_claims_opd_summary / lives_ipd_opd) * 100).round(2)
                IR_opd = IR_opd_summary.astype(str) + '%'

                prorated_ir_ipd_summary = ((IR_ipd_summary * 365) / policy_coverage_completion_days).round(2)
                prorated_ir_ipd = prorated_ir_ipd_summary.astype(str) + '%'

                prorated_ir_opd_summary = ((IR_opd_summary * 365) / policy_coverage_completion_days).round(2)
                prorated_ir_opd = prorated_ir_opd_summary.astype(str) + '%'

                ICR_ipd_summary = ((int(incurred_amt_ipd_summary) / total_premium) * 100).round(2)
                ICR_ipd = ICR_ipd_summary.astype(str) + '%'

                ICR_opd_summary = ((int(incurred_amt_opd_summary) / total_premium) * 100).round(2)
                ICR_opd = ICR_opd_summary.astype(str) + '%'

                ECR_ipd_summary = ((int(incurred_amt_ipd_summary) / total_earned_premium) * 100).round(2)
                ECR_ipd = ECR_ipd_summary.astype(str) + '%'

                ECR_opd_summary = ((int(incurred_amt_opd_summary) / total_earned_premium) * 100).round(2)
                ECR_opd = ECR_opd_summary.astype(str) + '%'

                Settlement_ratio_ipd_summary = ((settled_claims_ipd_summary / Reported_claims_ipd_summary) * 100).round(
                    2)
                Settlement_ratio_ipd = Settlement_ratio_ipd_summary.astype(str) + '%'

                Settlement_ratio_opd_summary = ((settled_claims_opd_summary / Reported_claims_opd_summary) * 100).round(
                    2)
                Settlement_ratio_opd = Settlement_ratio_opd_summary.astype(str) + '%'

                ipd_summary_formatted = {'Reported_claims': Reported_claims_ipd_summary,
                                         'Reported_amt': Reported_amt_ipd,
                                         'settled_claims': settled_claims_ipd_summary, 'incurred_amt': incurred_amt_ipd,
                                         'paid_claims': paid_claims_ipd_summary, 'paid_amt': paid_amt_ipd,
                                         'IR': IR_ipd, 'prorated_ir': prorated_ir_ipd, 'ICR': ICR_ipd,
                                         'ECR': ECR_ipd, 'Settlement_ratio': Settlement_ratio_ipd}

                opd_summary_formatted = {'Reported_claims': Reported_claims_opd_summary,
                                         'Reported_amt': Reported_amt_opd,
                                         'settled_claims': settled_claims_opd_summary, 'incurred_amt': incurred_amt_opd,
                                         'paid_claims': paid_claims_opd_summary, 'paid_amt': paid_amt_opd,
                                         'IR': IR_opd, 'prorated_ir': prorated_ir_opd, 'ICR': ICR_opd,
                                         'ECR': ECR_opd, 'Settlement_ratio': Settlement_ratio_ipd}
                ipd_summary_formatted = pd.DataFrame(
                    zip(ipd_summary_formatted.keys(), (ipd_summary_formatted.values())), columns=['Parameters', 'IPD'])
                opd_summary_formatted = pd.DataFrame(
                    zip(opd_summary_formatted.keys(), (opd_summary_formatted.values())), columns=['Parameters', 'OPD'])

                pd.options.display.float_format = '{:.2f}'.format
                ipd_opd_summary = pd.merge(ipd_summary_formatted, opd_summary_formatted, how='inner', on='Parameters')

                ipd_opd_summary_fig = go.Figure(data=[go.Table(
                    header=dict(values=list(ipd_opd_summary.columns),
                                fill_color='paleturquoise',
                                align='center'),
                    cells=dict(values=[ipd_opd_summary.Parameters, ipd_opd_summary.IPD, ipd_opd_summary.OPD],
                               fill_color='lavender',
                               align='center'))
                ])

                ipd_opd_summary_fig = plot(ipd_opd_summary_fig, output_type='div')

                ###############   INCIDENCE RATE BY SUM INSURED BAND ####################

                conditions1 = [(paid_df['sumins'] >= 0) & (paid_df['sumins'] <= 100000),
                               (paid_df['sumins'] >= 100000) & (paid_df['sumins'] <= 300000),
                               (paid_df['sumins'] >= 300000) & (paid_df['sumins'] <= 500000),
                               (paid_df['sumins'] >= 500000) & (paid_df['sumins'] <= 700000),
                               (paid_df['sumins'] >= 700000) & (paid_df['sumins'] <= 1000000),
                               (paid_df['sumins'] >= 1000000) & (paid_df['sumins'] <= 1500000)]

                conditions2 = [(crs_df['sumins'] >= 0) & (crs_df['sumins'] <= 100000),
                               (crs_df['sumins'] >= 100000) & (crs_df['sumins'] <= 300000),
                               (crs_df['sumins'] >= 300000) & (crs_df['sumins'] <= 500000),
                               (crs_df['sumins'] >= 500000) & (crs_df['sumins'] <= 700000),
                               (crs_df['sumins'] >= 700000) & (crs_df['sumins'] <= 1000000),
                               (crs_df['sumins'] >= 1000000) & (crs_df['sumins'] <= 1500000)]

                conditions3 = [(out_df['sumins'] >= 0) & (out_df['sumins'] <= 100000),
                               (out_df['sumins'] >= 100000) & (out_df['sumins'] <= 300000),
                               (out_df['sumins'] >= 300000) & (out_df['sumins'] <= 500000),
                               (out_df['sumins'] >= 500000) & (out_df['sumins'] <= 700000),
                               (out_df['sumins'] >= 700000) & (out_df['sumins'] <= 1000000),
                               (out_df['sumins'] >= 1000000) & (out_df['sumins'] <= 1500000)]

                # create a list of the values we want to assign for each condition
                values = ['00-01 Lakh', '01-03 Lakh', '03-05 Lakh', '05-07 Lakh', '07-10 Lakh', '10-15 Lakh']

                # create a new column and use np.select to assign values to it using our lists as arguments
                paid_df['Si_band'] = np.select(conditions1, values)

                crs_df['Si_band'] = np.select(conditions2, values)

                out_df['Si_band'] = np.select(conditions3, values)

                claim_paid_si_band = paid_df.groupby(['Si_band'], sort=False, as_index=False)['consider_count'].agg(
                    {'count': sum})
                claim_paid_si_band.rename(columns={'count': 'claim_paid_si_band'}, inplace=True)

                claim_crs_si_band = crs_df.groupby(['Si_band'], sort=False, as_index=False)['consider_count'].agg(
                    {'count': sum})
                claim_crs_si_band.rename(columns={'count': 'claim_crs_si_band'}, inplace=True)

                claim_out_si_band = out_df.groupby(['Si_band'], sort=False, as_index=False)['consider_count'].agg(
                    {'count': sum})
                claim_out_si_band.rename(columns={'count': 'claim_out_si_band'}, inplace=True)

                si_bandwise_incidence_rate1 = pd.merge(claim_crs_si_band, claim_paid_si_band, how='right',
                                                       on=['Si_band'])
                si_bandwise_incidence_rate = pd.merge(si_bandwise_incidence_rate1, claim_out_si_band, how='left',
                                                      on=['Si_band'])

                si_bandwise_incidence_rate['reported_claims'] = si_bandwise_incidence_rate['claim_crs_si_band'].fillna(
                    0) + si_bandwise_incidence_rate['claim_paid_si_band'].fillna(0) + si_bandwise_incidence_rate[
                                                                    'claim_out_si_band'].fillna(0)
                si_bandwise_incidence_rate['Lives'] = total_insured_person
                si_bandwise_incidence_rate['IR'] = si_bandwise_incidence_rate['reported_claims'] / \
                                                   si_bandwise_incidence_rate['Lives'] * 100

                # si_bandwise_incidence_rate.loc['Total']= si_bandwise_incidence_rate.sum(numeric_only=True, axis=0)
                si_bandwise_incidence_rate['IR'] = si_bandwise_incidence_rate['IR'].round(2)

                si_bandwise_incidence_rate.sort_values('Si_band', ascending=True, inplace=True)

                # Fig
                SI_Band_IR = px.bar(si_bandwise_incidence_rate, x="Si_band", y="IR",
                                    color="Si_band", title="<b>INCIDENCE RATE BY SUM INSURED BAND<b>", text="IR",
                                    color_discrete_sequence=px.colors.sequential.RdBu)
                # SI_Band_IR.update_layout( xaxis={'visible': False, 'showticklabels': False})
                SI_Band_IR.update_layout(title_x=0.5)

                SI_Band_IR = plot(SI_Band_IR, output_type='div')

                # INCIDENCE RATE BY AMOUNT BAND

                claim_paid_amount_band = paid_df.groupby(['amount_band'], sort=False, as_index=False)[
                    'consider_count'].agg({'count': sum})
                claim_paid_amount_band.rename(columns={'count': 'claim_paid_amount_band'}, inplace=True)
                amount_bandwise_incidence_rate = claim_paid_amount_band.copy()

                amount_bandwise_incidence_rate['Lives'] = total_insured_person
                amount_bandwise_incidence_rate['IR'] = amount_bandwise_incidence_rate['claim_paid_amount_band'] / \
                                                       amount_bandwise_incidence_rate['Lives'] * 100
                # amount_bandwise_incidence_rate.loc['Total']= amount_bandwise_incidence_rate.sum(numeric_only=True, axis=0)

                amount_bandwise_incidence_rate['IR'] = amount_bandwise_incidence_rate['IR'].round(2)
                amount_bandwise_incidence_rate.sort_values('amount_band', ascending=True, inplace=True)

                Amount_Band_IR = px.bar(amount_bandwise_incidence_rate, x="amount_band", y="IR",
                                        color="amount_band", title="<b><b>", text="IR",
                                        color_discrete_sequence=px.colors.sequential.RdBu)
                # SI_Band_IR.update_layout( xaxis={'visible': False, 'showticklabels': False})
                Amount_Band_IR.update_layout(title_x=0.5)
                Amount_Band_IR = plot(Amount_Band_IR, output_type='div')

                # PAID AMOUNT BAND ANALYSIS

                paidamt_band_analysis = paid_df.groupby(['amount_band'])['consider_count', 'settledamt'].agg(
                    'sum').reset_index()
                paidamt_band_analysis = paidamt_band_analysis.sort_values('settledamt', axis=0, ascending=False)[
                    ['amount_band', 'consider_count', 'settledamt']]
                paidamt_band_analysis['Avg_Paid_Amount'] = (
                        paidamt_band_analysis['settledamt'] / paidamt_band_analysis['consider_count']).round()
                paidamt_band_analysis.rename(columns={'consider_count': 'PaidClaims', 'settledamt': 'PaidAmt'},
                                             inplace=True)

                trace1 = go.Scatter(
                    mode='lines+markers',
                    x=paidamt_band_analysis['amount_band'],
                    y=paidamt_band_analysis['PaidClaims'], text=paidamt_band_analysis["PaidClaims"],
                    name="Paid Claims",
                    marker_color='crimson'
                )

                trace2 = go.Bar(
                    x=paidamt_band_analysis['amount_band'],
                    y=paidamt_band_analysis['PaidAmt'], text=paidamt_band_analysis["PaidAmt"],
                    name="Paid Amount",
                    yaxis='y2',
                    marker_color='blue',
                    marker_line_width=1.5,
                    marker_line_color='rgb(8,48,107)',
                    opacity=0.5
                )

                data = [trace1, trace2]

                layout = go.Layout(
                    title_text='<b><b>',
                    yaxis=dict(
                        range=[0, 200],
                        side='right'
                    ),
                    yaxis2=dict(
                        overlaying='y',
                        anchor='y3',
                    )
                )
                paidamt_band_analysis_fig1 = go.Figure(data=data, layout=layout)
                paidamt_band_analysis_fig = plot(paidamt_band_analysis_fig1, output_type='div')

                ##Table
                paidamt_band_analysis1 = go.Figure(data=[go.Table(
                    header=dict(values=paidamt_band_analysis.columns,
                                fill_color='paleturquoise',
                                align='center'),
                    cells=dict(values=[paidamt_band_analysis.amount_band, paidamt_band_analysis.PaidClaims,
                                       paidamt_band_analysis.PaidAmt, paidamt_band_analysis.Avg_Paid_Amount],
                               fill_color='lavender',
                               align='center'))])

                paidamt_band_analysis1 = plot(paidamt_band_analysis1, output_type='div')

                # STATUS WISE ANALYSIS

                ipd_opd_wise_paid_claims = paid_df.groupby(['status', 'ipd_opd'])[
                    'consider_count'].sum().reset_index()

                ipd_opd_wise_out_claims = out_df.groupby(['status', 'ipd_opd'])['consider_count'].sum().reset_index()

                ipd_opd_wise_crs_claims = crs_df.groupby(['status', 'ipd_opd'])['consider_count'].sum().reset_index()

                ipd_opd_wise_claims = pd.concat(
                    [ipd_opd_wise_paid_claims, ipd_opd_wise_out_claims, ipd_opd_wise_crs_claims])
                ipd_opd_wise_claims['consider_count'] = ipd_opd_wise_claims['consider_count'].astype(int)

                ipd_opd_wise_claims_fig = px.bar(ipd_opd_wise_claims, x="ipd_opd", y="consider_count",
                                                 color="status", title="<b><b>",
                                                 text='consider_count',
                                                 color_discrete_sequence=px.colors.sequential.RdBu, barmode='group',
                                                 color_discrete_map={'Paid': 'green', 'Outstanding': '#D9B300',
                                                                     'CRS': 'red'})
                ipd_opd_wise_claims_fig.update_xaxes(title='')
                ipd_opd_wise_claims_fig.update_yaxes(title='No. of Claims')
                ipd_opd_wise_claims_fig.update_layout(title_x=0.5)
                ipd_opd_wise_claims_fig = plot(ipd_opd_wise_claims_fig, output_type='div')

                # DISEASE WISE ANALYSIS BY BUFFER AMOUNT

                disease_wise_buffer_amount = paid_df.groupby(['new_disease_category']).agg(
                    {'buffer_amt': sum}).reset_index()
                disease_wise_buffer_amount2 = disease_wise_buffer_amount[disease_wise_buffer_amount['buffer_amt'] != 0]

                disease_wise_buffer_amount_fig2 = px.bar(disease_wise_buffer_amount2, x='new_disease_category',
                                                         y="buffer_amt", text='buffer_amt',
                                                         color_discrete_sequence=px.colors.sequential.RdBu,
                                                         color='new_disease_category', barmode='stack', width=300)

                disease_wise_buffer_amount_fig2.update_layout(title='<b><b>')

                disease_wise_buffer_amount_fig2.update_layout(title_x=0.5)
                disease_wise_buffer_amount_fig2.update_xaxes(title='')

                disease_wise_buffer_amount_fig2 = plot(disease_wise_buffer_amount_fig2, output_type='div')

                # Buffer Amt vs Liablity Amt

                Buffer_Amt = paid_df['buffer_amt'].sum()
                Liab_Amt = paid_df['liablityamt'].sum()

                labels = ['Amt to Release', 'Liablity Amt']
                values = [Buffer_Amt, Liab_Amt]

                data = [go.Pie(labels=labels, values=values, text=values)]
                layout = go.Layout(title='')
                buffer_amt_vs_liab_amt = go.Figure(data=data, layout=layout)

                buffer_amt_vs_liab_amt = plot(buffer_amt_vs_liab_amt, output_type='div')

                ## CUSTOMER SERVICE ANALYSIS (CC)

                customer_touch_point1 = customercare_df['sourcefield'].value_counts()

                customer_touch_point2 = customercare_df['sourcefield'].value_counts(normalize=0.1) * 100

                customer_touch_point = pd.concat([customer_touch_point1, customer_touch_point2], axis=1)

                customer_touch_point.columns = ['No Of Interactions', 'No Of Interactions%']
                customer_touch_point = customer_touch_point.reset_index()

                customer_touch_point.columns = ['SourceField', 'No Of Interactions', 'No Of Interactions%']

                # figure for plotly
                customer_touch_point_fig1 = go.Figure(data=[go.Table(
                    header=dict(values=customer_touch_point.columns,
                                fill_color='paleturquoise',
                                align='center'),
                    cells=dict(values=[customer_touch_point['SourceField'],
                                       customer_touch_point['No Of Interactions'],
                                       customer_touch_point['No Of Interactions%'].round()],
                               fill_color='lavender',
                               align='center'))])

                customer_touch_point_fig2 = px.bar(customer_touch_point, x='SourceField', y="No Of Interactions",
                                                   text='No Of Interactions',
                                                   color_discrete_sequence=px.colors.sequential.RdBu,
                                                   color='SourceField', barmode='stack')

                customer_touch_point_fig2.update_layout(title='<b><b>')

                customer_touch_point_fig2.update_layout(title_x=0.5)

                customer_touch_point_fig2 = plot(customer_touch_point_fig2, output_type='div')

                customer_touch_point_fig1 = plot(customer_touch_point_fig1, output_type='div')

                ## Customer Call Analysis

                customer_call_analysis_point1 = customercare_df['call_type'].value_counts()

                customer_call_analysis_point2 = customercare_df['call_type'].value_counts(normalize=0.1) * 100

                customer_call_analysis_point = pd.concat([customer_call_analysis_point1, customer_call_analysis_point2],
                                                         axis=1)
                customer_call_analysis_point.columns = ['No Of Calls', 'No Of Calls%']
                customer_call_analysis_point = customer_call_analysis_point.reset_index()

                customer_call_analysis_point.columns = ['Call_Type', 'No Of Calls', 'No Of Calls%']

                # figure for plotly
                customer_call_analysis_fig1 = go.Figure(data=[go.Table(
                    header=dict(values=customer_call_analysis_point.columns,
                                fill_color='paleturquoise',
                                align='center'),
                    cells=dict(values=[customer_call_analysis_point['Call_Type'],
                                       customer_call_analysis_point['No Of Calls'],
                                       customer_call_analysis_point['No Of Calls%'].round()],
                               fill_color='lavender',
                               align='center'))])

                customer_call_analysis_fig2 = px.bar(customer_call_analysis_point, x='Call_Type', y="No Of Calls",
                                                     text='No Of Calls',
                                                     color_discrete_sequence=px.colors.sequential.RdBu,
                                                     color='Call_Type', barmode='stack')

                customer_call_analysis_fig2.update_layout(title='<b><b>')

                customer_call_analysis_fig2.update_layout(title_x=0.5)
                customer_call_analysis_fig2.update_xaxes(title='')

                customer_call_analysis_fig2 = plot(customer_call_analysis_fig2, output_type='div')

                customer_call_analysis_fig1 = plot(customer_call_analysis_fig1, output_type='div')

                # Reason for call Analysis

                customercare_df['call_reason_count'] = customercare_df.groupby('reasonforcall')[
                    'reasonforcall'].transform(
                    'count')
                customercare_df['call_reason_count'] = \
                    customercare_df.drop_duplicates(['reasonforcall', 'call_reason_count'])['call_reason_count']
                ReasonForCall_analysis = customercare_df[['reasonforcall', 'call_reason_count']].sort_values(
                    'call_reason_count', ascending=False).head(10)
                ReasonForCall_analysis['Total%'] = ReasonForCall_analysis['call_reason_count'] / ReasonForCall_analysis[
                    'call_reason_count'].sum() * 100
                ReasonForCall_analysis.columns = ['ReasonForCall', 'No Of Calls', 'No Of Calls%']

                # figure for plotly
                ReasonForCall_analysis_fig1 = go.Figure(data=[go.Table(
                    header=dict(values=ReasonForCall_analysis.columns,
                                fill_color='paleturquoise',
                                align='center'),
                    cells=dict(values=[ReasonForCall_analysis['ReasonForCall'],
                                       ReasonForCall_analysis['No Of Calls'],
                                       ReasonForCall_analysis['No Of Calls%'].round()],
                               fill_color='lavender',
                               align='center'))])

                ReasonForCall_analysis_fig2 = px.bar(ReasonForCall_analysis, x='ReasonForCall', y="No Of Calls",
                                                     text='No Of Calls',
                                                     color_discrete_sequence=px.colors.sequential.RdBu,
                                                     color='ReasonForCall', barmode='stack')

                ReasonForCall_analysis_fig2.update_layout(title='<b><b>')

                ReasonForCall_analysis_fig2.update_layout(title_x=0.5)
                ReasonForCall_analysis_fig2.update_xaxes(title='')

                ReasonForCall_analysis_fig2 = plot(ReasonForCall_analysis_fig2, output_type='div')

                ReasonForCall_analysis_fig1 = plot(ReasonForCall_analysis_fig1, output_type='div')

                # GRIEVANCE ANALYSIS

                griveance = customercare_df[(customercare_df['call_type'] == 'Grievance')]

                griveance['response_given_count'] = griveance.groupby('call_type')['call_type'].transform('count')
                griveance['response_given_count'] = griveance.drop_duplicates(['call_type', 'response_given_count'])[
                    'response_given_count']

                griveance['response_given_count1'] = griveance.groupby('reasonforcall')['reasonforcall'].transform(
                    'count')
                griveance['response_given_count1'] = \
                    griveance.drop_duplicates(['reasonforcall', 'response_given_count1'])['response_given_count1']

                griveance_analysis = griveance[['reasonforcall', 'response_given_count1']].sort_values(
                    'response_given_count1', ascending=False).drop_duplicates().head(10)

                griveance_analysis['Total%'] = griveance_analysis['response_given_count1'] / griveance_analysis[
                    'response_given_count1'].sum() * 100
                griveance_analysis.columns = ['ReasonForCall', 'No Of Calls', 'Griveances%']

                # figure for plotly
                griveance_analysis_fig1 = go.Figure(data=[go.Table(
                    header=dict(values=griveance_analysis.columns,
                                fill_color='paleturquoise',
                                align='center'),
                    cells=dict(values=[griveance_analysis['ReasonForCall'],
                                       griveance_analysis['No Of Calls'],
                                       griveance_analysis['Griveances%'].round()],
                               fill_color='lavender',
                               align='center'))])

                griveance_analysis_fig2 = px.bar(griveance_analysis, x='ReasonForCall', y="No Of Calls",
                                                 text='No Of Calls', color_discrete_sequence=px.colors.sequential.RdBu,
                                                 color='ReasonForCall', barmode='stack')

                griveance_analysis_fig2.update_layout(title='<b><b>')

                griveance_analysis_fig2.update_layout(title_x=0.5)
                griveance_analysis_fig2.update_xaxes(title='')

                griveance_analysis_fig2 = plot(griveance_analysis_fig2, output_type='div')

                griveance_analysis_fig1 = plot(griveance_analysis_fig1, output_type='div')


            else:
                messages.warning(request, "Apparently no values available...")

        mydict = {
            'form': form,
            'paid_claim_count': paid_claim_count,
            'out_claim_count': out_claim_count,
            'crs_claim_count': crs_claim_count,
            'premium': premium,
            'lives': lives,
            'lives_by_ip_relation_code_fig_1': lives_by_ip_relation_code_fig_1,
            'age_band_relationship_wise_insured_lives_fig2': age_band_relationship_wise_insured_lives_fig2,
            'age_band_relationship_wise_insured_lives_fig1': age_band_relationship_wise_insured_lives_fig1,
            'claim_status_fig1': claim_status_fig1,
            'ALL_CLAIMS_BY_CLAIM_STATUS_fig': ALL_CLAIMS_BY_CLAIM_STATUS_fig,
            'lives_by_age_band_fig1': lives_by_age_band_fig1,
            'relation_age_band_wise_paid_amt_fig_1': relation_age_band_wise_paid_amt_fig_1,
            'relation_age_band_wise_paid_amt_fig_2': relation_age_band_wise_paid_amt_fig_2,
            'outstanding_claim_analysis_fig': outstanding_claim_analysis_fig,
            'outstanding_claim_analysis_tb': outstanding_claim_analysis_tb,
            'rejected_claim_breakup_fig': rejected_claim_breakup_fig,
            'rejected_claim_breakup_tb': rejected_claim_breakup_tb,
            'treatment_type_wise_analysis_fig': treatment_type_wise_analysis_fig,
            'treatment_type_wise_analysis_tb': treatment_type_wise_analysis_tb,
            'cashless_vs_reimbersement_claim_count_paid_fig': cashless_vs_reimbersement_claim_count_paid_fig,
            'cashless_vs_reimbersement_claim_amt_paid_fig': cashless_vs_reimbersement_claim_amt_paid_fig,
            'cashless_vs_reimbersement_lodge_amount_fig': cashless_vs_reimbersement_lodge_amount_fig,
            'summary1': summary1,
            'Summary_plot': Summary_plot,
            'Summary_plot2': Summary_plot2,
            'ipd_opd_summary_fig': ipd_opd_summary_fig,
            'top10_ailment_wise_analysis_fig1': top10_ailment_wise_analysis_fig1,
            'top10_ailment_wise_analysis_fig2': top10_ailment_wise_analysis_fig2,
            'top10_hospital_wise_paidamt_fig1': top10_hospital_wise_paidamt_fig1,
            'top10_hospital_wise_paidamt_fig2': top10_hospital_wise_paidamt_fig2,
            'Age_Band_IR': Age_Band_IR,
            'SI_Band_IR': SI_Band_IR,
            'Amount_Band_IR': Amount_Band_IR,
            'paidamt_band_analysis_fig': paidamt_band_analysis_fig,
            'paidamt_band_analysis1': paidamt_band_analysis1,
            'ipd_opd_wise_claims_fig': ipd_opd_wise_claims_fig,
            'disease_wise_buffer_amount_fig2': disease_wise_buffer_amount_fig2,
            'buffer_amt_vs_liab_amt': buffer_amt_vs_liab_amt,
            'customer_touch_point_fig2': customer_touch_point_fig2,
            'customer_touch_point_fig1': customer_touch_point_fig1,
            'customer_call_analysis_fig2': customer_call_analysis_fig2,
            'customer_call_analysis_fig1': customer_call_analysis_fig1,
            'ReasonForCall_analysis_fig2': ReasonForCall_analysis_fig2,
            'ReasonForCall_analysis_fig1': ReasonForCall_analysis_fig1,
            'griveance_analysis_fig2': griveance_analysis_fig2,
            'griveance_analysis_fig1': griveance_analysis_fig1,
        }

        return render(request, 'Management/corporate.html', context=mydict)




class Corporate1(View):
    def get(self,request,*args,**kwargs):


        pol_no = request.GET.get('polno')
        pol_no = '910000/34/22/04/00000132'

        # get data from multiple tables
        paid_data, crs_data, out_data = self.get_table_data(pol_no)

        # paid_data = self.get_table_data( pol_no)
        # crs_data = self.get_table_data( pol_no)
        # out_data = self.get_table_data( pol_no)
        portal_premium = self.premium_lives(pol_no)

        # create pandas data frames from each table's data
        paid_df = pd.DataFrame(paid_data)

        crs_df = pd.DataFrame(crs_data)

        out_df = pd.DataFrame(out_data)
        portal_premium_df = pd.DataFrame(portal_premium)
        relation_qs = RelationMaster.objects.all()
        relation_df = pd.DataFrame(relation_qs.values())

        portal_premium_df = pd.merge(portal_premium_df, relation_df, how='left', left_on='ip_relation_code',
                                     right_on='relation').drop(columns=['id', 'relation'])
        done = []
        not_done = []
        for col in portal_premium_df.columns:
            try:
                portal_premium_df[col] = portal_premium_df[col].str.strip()
                done.append(col)
            except:
                not_done.append(col)
        portal_premium_df['Premium'] = portal_premium_df['NET_PREMIUM'].fillna(0) + portal_premium_df[
            'PREMIUM_ENDORSEMENT'].fillna(0)
        relation_df['relation'] = relation_df['relation'].str.strip()
        # Count for all Paid, Crs, Outstanding ,lives, premium
        paid_claim_count = paid_df['sla_heading'].count()
        out_claim_count = out_df['sla_heading'].count()
        crs_claim_count = crs_df['sla_heading'].count()
        premium = int(round((portal_premium_df['premium'].mean()), 0))
        lives = round((portal_premium_df['lives'].sum()), 0)


        # Relationship Wise lives
        relation_wise_lives_covered = portal_premium_df.groupby(['std_relation'])['lives'].agg(
            'sum').reset_index()

        relation_wise_lives_covered_data = [go.Pie(labels=relation_wise_lives_covered['std_relation'],
                       values=relation_wise_lives_covered['lives'], text=relation_wise_lives_covered['lives'],
                       hole=.5, marker_colors=px.colors.qualitative.Plotly)
                ]
        lives_by_ip_relation_code_fig = go.Figure(data=relation_wise_lives_covered_data)


        # lives_by_ip_relation_code_fig_1 = plot(lives_by_ip_relation_code_fig, output_type='div', config=config)


        # # create data visualizations using Plotly
        # pie_chart1 = self.create_pie_chart(df1, 'column1', 'column2')

        customercare_qs = Customercare.objects.filter(pol_no=pol_no)
        relation_qs = RelationMaster.objects.all()

        # create data visualizations using Plotly
        lives_by_ip_relation_code_fig_1 = self.create_pie_chart(relation_wise_lives_covered_data,lives_by_ip_relation_code_fig)


        mydict ={
            'lives_by_ip_relation_code_fig_1':lives_by_ip_relation_code_fig_1,
        }

        return render(request, 'Management/corporate1.html', context=mydict)

    def get_table_data(self,pol_no):
        # filter data from table based on user input
        paid_data = ClPaidDet2.objects.filter(pol_no=pol_no).values('pol_no', 'sla_heading', 'insuredname',
                                                                       'relation', 'lodgetype', 'status',
                                                                       'actuallosstype', 'actual_lodge_amt',
                                                                       'settledamt', 'liablityamt', 'consider_count',
                                                                       'ipd_opd', 'age_band_rev',
                                                                       'new_disease_category', 'lodgedate', 'dod',
                                                                       'lodgeamt', 'treatmenttype', 'sumins',
                                                                       'amount_band', 'diseasecategory', 'hospitlname',
                                                                       'utilizationband', 'buffer_amt', 'payment_tat',
                                                                       'end_to_end_tat',
                                                                       'final_processing_tat_settlment_tat',
                                                                       'adr_raise_date_lodge_date',
                                                                       'adr_recive_adr_raise_date')

        crs_data = ClCrsDet2.objects.filter(pol_no=pol_no).values('status', 'substatus', 'lodgedate', 'lodgetype',
                                                                'cl_lod_amt', 'doa', 'dod', 'sla_heading',
                                                                'consider_count', 'actuallosstype', 'age_band_rev',
                                                                'ipd_opd', 'sumins', 'actual_lodge_amt')

        out_data = ClOutDet2.objects.filter(pol_no=pol_no).values('status', 'extra', 'head', 'sla_heading',
                                                                'consider_count', 'age_band_rev', 'liablityamt',
                                                                'actuallosstype', 'lodgetype', 'lodgedate', 'doa',
                                                                'dod', 'ipd_opd', 'sumins', 'actual_lodge_amt',
                                                                'actuallodgeamt')


        return paid_data,crs_data,out_data

    def create_pie_chart(self,data,fig1):
        layout = go.Layout()
        fig = go.Figure(data=data, layout=layout)
        fig.update_layout(margin=dict(t=100, b=100, l=100, r=100),
                                                    plot_bgcolor="rgba(0,0,0,0)",
                                                    title='')
        fig = plot(fig1, output_type='div', config=config)
        return fig

    def create_bar_chart(self, df, x_column, y_column):
        # create bar chart using Plotly
        fig = px.bar(df, x=x_column, y=y_column)

        return fig

    def create_donut_chart(self, df, x_column, y_column):
        # create donut chart using Plotly
        fig = px.pie(df, values=y_column, names=x_column, hole=.5)

        return fig

    def premium_lives(self,pol_no):

        portal_premium_qs = pd.read_sql_query(f"""SELECT
                                    A.pol_no,A.name_of_insured, A.ic_name, ip_relation_code, ip_age, broker_name, risk_from_date,risk_expiry_date,
                                    CASE WHEN RISK_EXPIRY_DATE<=GETDATE() THEN '365'
                                    ELSE CASE WHEN  RISK_EXPIRY_DATE>GETDATE() THEN DATEDIFF(DAY,RISK_FROM_DATE,GETDATE())+1 ELSE 0 END
                                    END AS [POLICYRUNDAY],
                                    CONVERT(VARCHAR(10),GETDATE(),103)+' (TIME: '+SUBSTRING(CAST(GETDATE()AS VARCHAR(30)),13,7)+')' AS REPORT_DATE,
                                    ISNULL(A.NET_PREMIUM,0) AS NET_PREMIUM,
                                    ISNULL(B.PREMIUM_ENDORSEMENT,0) AS PREMIUM_ENDORSEMENT,
                                    CASE WHEN ISNULL(RISK_EXPIRY_DATE,'')<=ISNULL(GETDATE(),'') THEN  ( ISNULL(A.NET_PREMIUM,0)+ISNULL(B.PREMIUM_ENDORSEMENT,0))
                                    ELSE ((ISNULL(A.NET_PREMIUM,0)+ISNULL(B.PREMIUM_ENDORSEMENT,0))/365)*DATEDIFF(DAY,RISK_FROM_DATE,GETDATE())+1 END AS [EARNED_PERMIUM],
                                    ISNULL(A.NO_OF_EMPLOYEES_COVERED,0) AS NO_OF_EMPLOYEES_COVERED,
                                    ISNULL(A.NO_OF_DEPENDANTS_COVERED,0) AS NO_OF_DEPENDANTS_COVERED,
                    	            NO_OF_EMPLOYEES_COVERED + NO_OF_DEPENDANTS_COVERED AS lives,NET_PREMIUM + CAST(PREMIUM_ENDORSEMENT AS int) As premium
                                    FROM (SELECT IC_NAME,TEMP.POL_NO, IP_Relation_Code, IP_Age, Broker_Name,NAME_OF_INSURED,

                                        MIN(TEMP.RISK_FROM_DATE) AS RISK_FROM_DATE,
                                        MAX(TEMP.RISK_EXPIRY_DATE) AS RISK_EXPIRY_DATE,MAX(TEMP.NET_PREMIUM) AS NET_PREMIUM,
                                        SUM(NO_OF_EMPLOYEES_COVERED) AS NO_OF_EMPLOYEES_COVERED, SUM(NO_OF_DEPENDANTS_COVERED) AS NO_OF_DEPENDANTS_COVERED
                                        FROM
                                        (SELECT IC_NAME,POL_NO, IP_Relation_Code, IP_Age, Broker_Name, NAME_OF_INSURED,
                                            MIN(RISK_FROM_DATE) AS RISK_FROM_DATE,
                                            MAX(RISK_EXPIRY_DATE) AS RISK_EXPIRY_DATE,
                                            MAX(PREMIUM) AS NET_PREMIUM,
                                            SUM(CASE WHEN ((IP_RELATION_CODE = 'SELF' OR IP_RELATION_CODE = 'EMPLOYEE')
                                            AND ISNULL(IP_CANCEL_DATE,'')='' ) THEN 1 ELSE 0 END) AS NO_OF_EMPLOYEES_COVERED,
                                            SUM(CASE WHEN ISNULL(IP_CANCEL_DATE,'')=''  THEN 1 ELSE 0 END ) -
                                            SUM(CASE WHEN (IP_RELATION_CODE IN ('SELF','EMPLOYEE')
                                            AND ISNULL(IP_CANCEL_DATE,'')='')  THEN 1 ELSE 0 END)  AS NO_OF_DEPENDANTS_COVERED
                                            FROM ENROLLMENT_MASTER WHERE Pol_No = '{pol_no}' AND Pol_Status = 'ENFORCED'
                                            GROUP BY POL_NO,IC_NAME, Broker_Name,NAME_OF_INSURED, IP_Relation_Code, IP_Age)
                                            AS TEMP GROUP BY TEMP.POL_NO,IC_NAME, Broker_Name,NAME_OF_INSURED, IP_Relation_Code, IP_Age)
                                            AS A LEFT OUTER JOIN(SELECT POL_NO,(SUM(ISNULL(AMTADD,0)) - SUM(ISNULL(AMTRED,0)) ) AS PREMIUM_ENDORSEMENT FROM DBO.[ENDORS]
                                            WHERE Pol_No = '{pol_no}'
                                            GROUP BY POL_NO) AS B ON A.Pol_No = B.Pol_No """, connection)

        return portal_premium_qs


def get_icname():
    icname = ClPaidDet2.objects.values_list('icname',flat=True).distinct()
    return icname


def insurance_company(request):
    if request.user.is_authenticated:
        # icnames = get_icname()
        altualloss_data = None
        altualloss_label = None
        FY21_22_Claim_Status = None
        ir = None
        icr = None
        premium = None
        lives = None
        paid_count = None
        out_count = None
        crs_count = None
        Covid_Claims = None
        Non_Covid_Claims = None
        master_stats1 = None

        if request.method == 'POST':

            insurance_company = request.POST.get('insurance_company')
            FromDate = request.POST.get('FromDate')
            ToDate = request.POST.get('ToDate')

            # beg_previous1 = datetime.strptime(FromDate, '%YYYY-%MM')
            # close_previous = datetime.strptime(ToDate, '%YYYY-%')
            beg_previous = pd.to_datetime(FromDate)
            if beg_previous.month != 1:
                try:
                    beg_previous = datetime(beg_previous.year, (beg_previous.month - 1), beg_previous.day)
                except:
                    try:
                        beg_previous = datetime(beg_previous.year, (beg_previous.month - 1), (beg_previous.day - 1))
                    except:
                        try:
                            beg_previous = datetime(beg_previous.year, (beg_previous.month - 1), (beg_previous.day - 2))
                        except:
                            beg_previous = datetime(beg_previous.year, (beg_previous.month - 1), (beg_previous.day - 3))

            else:
                beg_previous = datetime((beg_previous.year - 1), 12, beg_previous.day)



            openos_qs = ClOutDet2.objects.filter(Q(ic_name=insurance_company) & Q(sla_heading_updated__range=[beg_previous,FromDate]))
            paid_qs = ClPaidDet2.objects.filter(Q(icname=insurance_company) & Q(sla_heading_updated__range=[FromDate, ToDate]))
            out_qs = ClOutDet2.objects.filter(Q(ic_name=insurance_company) & Q(sla_heading_updated__range=[FromDate,ToDate]))
            crs_qs = ClCrsDet2.objects.filter(Q(ic_name=insurance_company) & Q(sla_heading_updated__range=[FromDate,ToDate]))
            portal_premium_qs = EFinance.objects.filter(Q(insurer=insurance_company) & Q(sla_heading_updated__range=[FromDate,ToDate]))
            if ((len(paid_qs) > 0) and (len(out_qs) > 0) and (len(crs_qs) > 0) and (len(openos_qs) > 0) and (len(portal_premium_qs) > 0)):

                paid_df = pd.DataFrame(paid_qs.values())
                out_df = pd.DataFrame(out_qs.values())
                crs_df = pd.DataFrame(crs_qs.values())
                portal_premium_df1 = pd.DataFrame(portal_premium_qs.values())
                portal_premium_df = portal_premium_df1.drop_duplicates(subset=['pol_no','premium'],keep='last').reset_index(drop = True)

                beg_os_df = pd.DataFrame(openos_qs.values())
                ## Count for all Paid, Crs, Outstanding
                paid_count = paid_df['sla_heading_updated'].count()
                out_count = out_df['sla_heading_updated'].count()
                crs_count = crs_df['sla_heading_updated'].count()

                premium = round((portal_premium_df['premium'].mean()),0)
                lives = round((portal_premium_df['lives'].sum()),0)
                paid_df['ro_name'] = paid_df['ro_name'].str.strip().str.upper()
                out_df['ro_name'] = out_df['ro_name'].str.strip().str.upper()
                crs_df['ro_name'] = crs_df['ro_name'].str.strip().str.upper()
                portal_premium_df['ro_name'] = portal_premium_df['ro_name'].str.strip().str.upper()
                beg_os_df['ro_name'] = beg_os_df['ro_name'].str.strip().str.upper()
                paid_df['icname'] = paid_df['icname'].str.strip().str.upper()
                out_df['ic_name'] = out_df['ic_name'].str.strip().str.upper()
                crs_df['ic_name'] = crs_df['ic_name'].str.strip().str.upper()
                beg_os_df['ic_name'] = crs_df['ic_name'].str.strip().str.upper()
                paid_df['policy_plan_type'] = paid_df['policy_plan_type'].str.strip()
                out_df['policy_plan_type'] = out_df['policy_plan_type'].str.strip()
                crs_df['policy_plan_type'] = crs_df['policy_plan_type'].str.strip()
                beg_os_df['policy_plan_type'] = crs_df['policy_plan_type'].str.strip()
                paid_df['clienttype'] = paid_df['clienttype'].str.strip()
                out_df['clienttype'] = out_df['clienttype'].str.strip()
                crs_df['clienttype'] = crs_df['clienttype'].str.strip()
                beg_os_df['clienttype'] = crs_df['clienttype'].str.strip()
                paid_df['lodgetype'] = paid_df['lodgetype'].str.strip()
                out_df['lodgetype'] = out_df['lodgetype'].str.strip()
                crs_df['lodgetype'] = crs_df['lodgetype'].str.strip()
                beg_os_df['lodgetype'] = crs_df['lodgetype'].str.strip()
                paid_df['report_plan'] = paid_df['report_plan'].str.strip()
                out_df['report_plan'] = out_df['report_plan'].str.strip()
                crs_df['report_plan'] = crs_df['report_plan'].str.strip()
                beg_os_df['report_plan'] = crs_df['report_plan'].str.strip()




                paid_df['ro_name_month_year'] = paid_df['icname'] + '-' + paid_df['ro_name'] + '-' + paid_df['sla_heading_updated']

                out_df['ro_name_month_year'] = out_df['ic_name'] + '-' + out_df['ro_name'] + '-' + out_df['sla_heading_updated']

                crs_df['ro_name_month_year'] = crs_df['ic_name'] + '-' + crs_df['ro_name'] + '-' + crs_df['sla_heading_updated']

                beg_os_df['ro_name_month_year'] = beg_os_df['ic_name'] + '-' + beg_os_df['ro_name'] + '-' + beg_os_df['sla_heading_updated']


                portal_premium_df['ic_ro_name_month_year'] = portal_premium_df['ic_ro_name_month_year'].str.upper()




                ### Chasless and NonChasless
                altualloss = paid_df['actuallosstype'].value_counts()
                actual_loss = pd.DataFrame(altualloss).reset_index()
                alt_index = actual_loss.rename(columns={'index': 'alt_index'})
                altualloss_label = alt_index['alt_index'].tolist()
                altualloss_data = actual_loss['actuallosstype'].tolist()


                ### Covid NoN- Covid



                # Claim Status

                Covid_Paid = sum((paid_df['status'] == 'Paid') & (paid_df['covid_non_covid'] == 'Covid') & (
                            paid_df['consider_count'] == 1))

                Covid_Outstanding = sum((out_df['status'] == 'Outstanding') & (
                            out_df['covid_non_covid'] == 'Covid') & (out_df['consider_count'] == 1))

                Covid_Rejected = sum((crs_df['substatus'] == 'Claim Repudiation') & (
                            crs_df['covid_non_covid'] == 'Covid') & (crs_df['consider_count'] == 1))

                Covid_Closed = sum((crs_df['substatus'] == 'Claim Intimation Closed') & (
                            crs_df['covid_non_covid'] == 'Covid') & (crs_df['consider_count'] == 1))



                Non_Covid_Paid = sum((paid_df['status'] == 'Paid') & (paid_df['covid_non_covid'] == 'Non Covid') & (
                            paid_df['consider_count'] == 1))

                Non_Covid_Outstanding = sum((out_df['status'] == 'Outstanding') & (
                            out_df['covid_non_covid'] == 'Non Covid') & (out_df['consider_count'] == 1))

                Non_Covid_Rejected = sum((crs_df['substatus'] == 'Claim Repudiation') & (
                            crs_df['covid_non_covid'] == 'Non Covid') & (crs_df['consider_count'] == 1))

                Non_Covid_Closed = sum((crs_df['substatus'] == 'Claim Intimation Closed') & (
                            crs_df['covid_non_covid'] == 'Non Covid') & (crs_df['consider_count'] == 1))

                FY21_22_Claim_Status = pd.DataFrame([[Covid_Paid, Covid_Outstanding, Covid_Rejected, Covid_Closed],
                                                     [Non_Covid_Paid, Non_Covid_Outstanding, Non_Covid_Rejected,
                                                      Non_Covid_Closed]],
                                                    columns=['Paid', 'Outstanding', 'Rejected', 'Closed'],
                                                    index=['Covid', 'Non_Covid'])



                # Covid_Non Covid_Claims

                # Covid_Claims = sum(((paid_df['covid_non_covid'] == 'Covid') & (paid_df['consider_count'] == 1)) ||  ((crs_df['covid_non_covid'] == 'Covid') & (crs_df['consider_count'] == 1))
                #                     ||((out_df['covid_non_covid'] == 'Covid') & (out_df['consider_count'] == 1)))
                #
                #
                # Non_Covid_Claims = sum(((paid_df['covid_non_covid'] == 'Non Covid') & (paid_df['consider_count'] == 1)) &  ((crs_df['covid_non_covid'] == 'Non Covid') & (crs_df['consider_count'] == 1))
                #                    & ((out_df['covid_non_covid'] == 'Non Covid') & (out_df['consider_count'] == 1)))

                Covid_Claims = Covid_Paid + Covid_Outstanding + Covid_Rejected + Covid_Closed
                Non_Covid_Claims = Non_Covid_Paid + Non_Covid_Outstanding + Non_Covid_Rejected + Non_Covid_Closed



        mydict = {}
        return render(request, 'Management/insurance_company.html',context=mydict)

def getbrokerdistinctpol():
    pol_no = EnrollmentMaster.objects.values_list('pol_no', flat=True).distinct()
    return pol_no


def getbrokerdistinctname():
    brokername = BrokerName.objects.all()
    return brokername

def broker(request):
    if request.user.is_authenticated:
       # brokername=None
        tb2 = None
        summary_ipd_opd=None
        claim_settlement_statistics=None
        outstanding_analysis=None
        paid_amt_analysis = None
        lodge_amt_analysis = None
        icwise_summary_fig1 = None
        icwise_summary_fig11 = None
        icwise_summary_fig12 = None
        icwise_summary_fig13 = None
        icwise_claim_settlement_statistics2=None
        icwise_claim_settlement_statistics_l1=None
        icwise_claim_settlement_statistics_l2=None
        icwise_claim_settlement_statistics_l3=None
        # icwise_claim_settlement_statistics_l4=None
        icwise_outstanding_analysis1=None
        icwise_outstanding_analysis2_l1=None
        icwise_outstanding_analysis2_l2=None
        icwise_outstanding_analysis2_l3=None
        relation_wise_lives_fig2=None
        relation_wise_lives_fig4=None
        age_band_lives_fig2=None
        age_band_lives_fig4=None
        outstanding_tat_fig1=None
        outstanding_tat_fig2=None
        age_wise_cashless_paid_amount_analysis=None
        age_wise_non_cashless_paid_amount_analysis=None
        total_paid_amount_by_age_band=None
        treatment_type_paid_claim_icwise_fig1=None
        treatment_type_paid_claim_icwise_fig2= None
        treatment_type_paid_amt_icwise_fig1=None
        treatment_type_paid_amt_icwise_fig2=None
        age_bandwise_incidence_rate_fig1=None
        si_bandwise_incidence_rate_fig1=None
        amount_bandwise_incidence_rate_fig1=None
        ipd_amount_bandwise_incidence_rate_fig1=None
        relation_wise_paid_claims_fig1=None
        relation_wise_paid_claims_fig2=None
        age_wise_paid_claim_fig1=None
        age_wise_paid_claim_fig2=None
        paid_amt_band_fig1=None
        paid_amt_band_fig2=None
        si_band_wise_paid_claims_fig2=None
        si_band_wise_paid_claims_fig1=None
        si_band_wise_paid_amt_fig1=None
        si_band_wise_paid_amt_fig2=None
        utilization_band_fig1=None
        utilization_band_fig2=None
        top10hospital_paidamt_fig1=None
        top10hospital_paidamt_fig2=None
        top10hospital_paidamt_ipd_fig1=None
        top10hospital_paidamt_ipd_fig2=None
        top10hospital_paidamt_opd_fig1 = None
        top10hospital_paidamt_opd_fig2 = None
        top10disease_paidamt_ipd_fig1=None
        top10disease_paidamt_ipd_fig2=None
        top10disease_paidamt_opd_fig2=None
        top10disease_paidamt_opd_fig1=None
        top10disease_paidamt_fig2=None
        top10disease_paidamt_fig1=None
        SourceField_icwise_fig1=None
        SourceField_icwise_fig2=None
        call_analysis_ic_fig1=None
        call_analysis_ic_fig2=None
        reason_for_call_ic_fig1=None
        reason_for_call_ic_fig2=None
        grievance_analysis_ic_fig2=None
        grievance_analysis_ic_fig1=None
        corporatewise_summary1_fig1=None
        corporatewise_summary1_fig2=None
        corporatewise_summary2_fig2=None
        corporatewise_summary2_fig1=None
        corporatewise_claimssettlement_statistics_fig1=None
        corporatewise_claimssettlement_statistics_fig2=None
        corporatewise_outstanding_analysis_fig1=None
        corporatewise_outstanding_analysis_fig2=None
        Lodg_amount_analysis_fig1=None
        Lodg_amount_analysis_fig2=None
        age_band_wise_paid_claim_analysis_corporatewise_fig1=None
        age_band_wise_paid_claim_analysis_corporatewise_fig2=None
        age_band_wise_paid_amt_analysis_corporatewise_fig1 = None
        age_band_wise_paid_amt_analysis_corporatewise_fig2 = None
        corpo_relation_wise_paid_amt_analysis_fig1=None
        corpo_relation_wise_paid_amt_analysis_fig2=None
        corpo_relation_wise_paid_claim_analysis_fig1=None
        corpo_relation_wise_paid_claim_analysis_fig2=None
        amt_band_wise_paidamt_analysis_corporatewise_fig1=None
        amt_band_wise_paidamt_analysis_corporatewise_fig2=None
        amt_band_wise_paidclaim_analysis_corporatewise_fig1=None
        amt_band_wise_paidclaim_analysis_corporatewise_fig2=None
        treatment_type_paidclaim_analysis_corporatewise1 = None
        treatment_type_paidclaim_analysis_corporatewise2 = None
        treatment_type_paidclaim_analysis_corporatewise_fig1=None
        treatment_type_paidclaim_analysis_corporatewise_fig2=None
        top10disease_paidamt_corporatewise2_fig1=None
        top10disease_paidamt_corporatewise2_fig2=None
        siwise_paidclaim_analysis_corporatewise_fig1=None
        siwise_paidclaim_analysis_corporatewise_fig2=None
        siwise_paidamt_analysis_corporatewise_fig1=None
        siwise_paidamt_analysis_corporatewise_fig2=None
        Sourcefiledwise_analysis_corporatewise_fig1=None
        Sourcefiledwise_analysis_corporatewise_fig2=None
        reason_for_call_corporate_fig1=None
        reason_for_call_corporate_fig2=None
        grievance_analysis_corporate_fig1=None
        grievance_analysis_corporate_fig2=None


        broker_name = StdBroker.objects.all().values('std_broker_name').distinct()


        if request.method == 'POST':
            brokername = request.POST.get('brokername')
            pol_numbers = PolicyMaster.objects.prefetch_related('pol_no').filter(Q(broker_name=brokername) & Q(pol_no__isnull=False)).values_list('pol_no', flat=True).distinct()
            # Pol_N01=tuple(pol_numbers)

            paid_qs = ClPaidDet2.objects.filter(pol_no__in=Subquery(pol_numbers))

            #
            # # l = pol_numbers
            # # l1 = []
            # # l2 = []
            # # for i in l:
            # #     l1.append(i)
            # #     t = tuple(l1)
            # #     l2.append(t)
            # #     l1 = []
            # #
            # # x = (''.join('{}'.format(t[0]) for t in l2))
            #
            # Pol_N02 = pol_numbers[0]
            #
            #
            # if len(pol_numbers)<2:
            #     Policy_Master = pd.read_sql_query(f"""
            #                             select distinct Pol_No,  name_of_insured,IC_Name,Risk_From_Date, Risk_Expiry_Date
            #                                                  FROM [Enrollment].[dbo].[Enrollment_Master]
            #                                                  where pol_no ='{Pol_N02}' """, connection)
            # else:
            #     Policy_Master = pd.read_sql_query(f"""
            #                                            select distinct Pol_No,  name_of_insured,IC_Name,Risk_From_Date, Risk_Expiry_Date
            #                                                                 FROM [Enrollment].[dbo].[Enrollment_Master]
            #                                                                 where pol_no in {Pol_N01}  """, connection)
            #
            #
            if len(pol_numbers) > 0:

                Driver = 'SQL Server'
                Server = r'MDINETPROJECTS\Analytics'
                Database = 'Enrollment'
                Database2 = 'Claims_SLA'
                UID = 'mdianalytics'
                PWD = 'mdianalytics@123'
                Database_Connection = f'mssql://{UID}:{PWD}@{Server}/{Database}?driver={Driver}'

                connection = pyodbc.connect(driver='{SQL Server}', host=Server, database=Database,
                                            user=UID, password=PWD)

                # paid = pd.read_sql_query(f""" SELECT POL_NO,ICNAME as IC_NAME,CONSIDER_COUNT,SettledAmt,LiablityAmt,IPD_OPD,LodgeType,LodgeAmt FROM [Claims_SLA].[dbo].[CL_PAID_DET2]
                # WHERE Pol_No in '{pol_numbers}' """, connection1)
                #
                # crs = pd.read_sql_query(f""" SELECT POL_NO,IC_NAME,CONSIDER_COUNT,IPD_OPD FROM [Claims_SLA].[dbo].[CL_CRS_DET2]
                # WHERE Pol_No in {pol_numbers}""", connection1)
                #
                # out = pd.read_sql_query(
                #     f""" SELECT POL_NO,IC_NAME,CONSIDER_COUNT,IPD_OPD,LiablityAmt  FROM [Claims_SLA].[dbo].[CL_OUT_DET2] WHERE Pol_No in {Pol_N0} AND SLA_HEADING = 'Dec-2022'""",
                #     connection1)
                #
                # customer_care = pd.read_sql_query(f""" SELECT POL_NO,IC_NAME FROM [Claims_SLA].[dbo].[CustomerCare]  WHERE Pol_No in {Pol_N0} """,
                #                                   connection1)
                paid_qs = ClPaidDet2.objects.filter(pol_no__in=Subquery(pol_numbers))
                crs_qs = ClCrsDet2.objects.filter(pol_no__in=Subquery(pol_numbers))
                out_qs = ClOutDet2.objects.filter(pol_no__in=Subquery(pol_numbers))
                customercare_qs = Customercare.objects.filter(pol_no__in=Subquery(pol_numbers))
                relation_qs = RelationMaster.objects.all()

                paid = pd.DataFrame(paid_qs.values())
                crs = pd.DataFrame(crs_qs.values())
                out = pd.DataFrame(out_qs.values())
                relation_master = pd.DataFrame(relation_qs.values())
                customer_care = pd.DataFrame(customercare_qs.values())

                my_list = pol_numbers  # Example list
                t1 = "(" + ", ".join("'" + str(num) + "'" for num in my_list) + ")"

                lives_premium = pd.read_sql_query(f"""
                DECLARE @RPFD21 AS DATE
                DECLARE @RPTD21 AS DATE

                DECLARE @RPFD22 AS DATE
                DECLARE @RPTD22 AS DATE

                SET @RPFD21 = '2021/04/01'
                SET @RPTD21 = '2021/11/30'

                SET @RPFD22 = '2022/04/01'
                SET @RPTD22 = '2022/12/30'
                 SELECT
                 A.POL_NO as POL_NO,A.IC_Name as IC_Name ,A.NAME_OF_INSURED AS NAME_OF_INSURED, A.IP_Age AS IP_Age, A.IP_Sum_Insured AS IP_Sum_Insured, A.IP_Relation_Code AS IP_Relation_Code,
                      CONVERT(VARCHAR(10),A.RISK_FROM_DATE,103) AS RISK_FROM_DATE,
                      CONVERT(VARCHAR(10),A.RISK_EXPIRY_DATE,103) AS RISK_EXPIRY_DATE,
                      CASE WHEN RISK_FROM_DATE <= @RPFD21 THEN
                	 (CASE WHEN RISK_EXPIRY_DATE > @RPTD21 THEN DATEDIFF(DAY,@RPFD21,  @RPTD21) ELSE (CASE WHEN RISK_EXPIRY_DATE > @RPFD21 THEN  DATEDIFF(DAY,@RPFD21 ,RISK_EXPIRY_DATE ) ELSE 0 END) END)
                	 ELSE ( CASE WHEN @RPTD21 > RISK_FROM_DATE THEN DATEDIFF(DAY,RISK_FROM_DATE, @RPTD21)
                	  end)
                         END AS POLICYRUNDAY21,

                		 CASE WHEN RISK_FROM_DATE <= @RPFD22 THEN
                case WHEN RISK_EXPIRY_DATE > @RPTD22 THEN DATEDIFF(DAY,@RPFD22,  @RPTD22) ELSE (CASE WHEN RISK_EXPIRY_DATE > @RPFD22 THEN  DATEDIFF(DAY,@RPFD22 ,RISK_EXPIRY_DATE ) ELSE 0 END) end
                else ( CASE WHEN @RPTD22 > RISK_FROM_DATE THEN DATEDIFF(DAY,RISK_FROM_DATE, @RPTD22 )
                 end)
                    END AS POLICYRUNDAY22,

                         CASE WHEN RISK_EXPIRY_DATE<=GETDATE() THEN '365'
                         ELSE CASE WHEN  RISK_EXPIRY_DATE>GETDATE() THEN DATEDIFF(DAY,RISK_FROM_DATE,GETDATE())+1 ELSE 0 END
                         END AS [POLICYRUNDAY],
                      CONVERT(VARCHAR(10),GETDATE(),103)+' (TIME: '+SUBSTRING(CAST(GETDATE()AS VARCHAR(30)),13,7)+')' AS REPORT_DATE,
                      ISNULL(A.NET_PREMIUM,0) AS NET_PREMIUM,
                      ISNULL(B.PREMIUM_ENDORSEMENT,0) AS PREMIUM_ENDORSEMENT,
                         CASE WHEN ISNULL(RISK_EXPIRY_DATE,'')<=ISNULL(GETDATE(),'') THEN  ( ISNULL(A.NET_PREMIUM,0)+ISNULL(B.PREMIUM_ENDORSEMENT,0))
                         ELSE ((ISNULL(A.NET_PREMIUM,0)+ISNULL(B.PREMIUM_ENDORSEMENT,0))/365)*DATEDIFF(DAY,RISK_FROM_DATE,GETDATE())+1 END AS [EARNED_PERMIUM],
                      ISNULL(A.NO_OF_EMPLOYEES_COVERED,0) AS NO_OF_EMPLOYEES_COVERED,
                      ISNULL(A.NO_OF_DEPENDANTS_COVERED,0) AS NO_OF_DEPENDANTS_COVERED,
                	  NO_OF_EMPLOYEES_COVERED + NO_OF_DEPENDANTS_COVERED AS Lives,
                	  NET_PREMIUM + PREMIUM_ENDORSEMENT As Premium

                 FROM (
                 SELECT
                              TEMP.POL_NO, IC_Name,IP_Age,IP_Sum_Insured, IP_Relation_Code,
                                  NAME_OF_INSURED,
                                    MIN(TEMP.RISK_FROM_DATE) AS RISK_FROM_DATE,
                            MAX(TEMP.RISK_EXPIRY_DATE) AS RISK_EXPIRY_DATE,MAX(TEMP.NET_PREMIUM) AS NET_PREMIUM,
                            SUM(NO_OF_EMPLOYEES_COVERED) AS NO_OF_EMPLOYEES_COVERED, SUM(NO_OF_DEPENDANTS_COVERED) AS NO_OF_DEPENDANTS_COVERED
                      FROM
                      (
                                  SELECT POL_NO, IC_NAME, IP_Age, IP_Sum_Insured, IP_Relation_Code,NAME_OF_INSURED,
                                     MIN(RISK_FROM_DATE) AS RISK_FROM_DATE,
                                     MAX(RISK_EXPIRY_DATE) AS RISK_EXPIRY_DATE,
                                     MAX(PREMIUM) AS NET_PREMIUM,
                                     SUM(CASE WHEN ((IP_RELATION_CODE = 'SELF' OR IP_RELATION_CODE = 'EMPLOYEE') AND ISNULL(IP_CANCEL_DATE,'')='' ) THEN 1 ELSE 0 END) AS NO_OF_EMPLOYEES_COVERED,
                            SUM(CASE WHEN ISNULL(IP_CANCEL_DATE,'')=''  THEN 1 ELSE 0 END ) - SUM(CASE WHEN (IP_RELATION_CODE IN ('SELF','EMPLOYEE') AND ISNULL(IP_CANCEL_DATE,'')='')  THEN 1 ELSE 0 END)  AS NO_OF_DEPENDANTS_COVERED
                            FROM [Enrollment].[dbo].ENROLLMENT_MASTER WHERE  POL_NO IN {t1}
                            GROUP BY POL_NO, IC_Name,RO_Code, IP_Age, IP_Sum_Insured, IP_Relation_Code, NAME_OF_INSURED

                               ) AS TEMP GROUP BY TEMP.POL_NO, IC_Name, IP_Age, IP_Sum_Insured, IP_Relation_Code, NAME_OF_INSURED
                      ) AS A

                      LEFT OUTER JOIN
                      (
                            SELECT POL_NO,(SUM(ISNULL(AMTADD,0)) - SUM(ISNULL(AMTRED,0)) ) AS PREMIUM_ENDORSEMENT FROM Enrollment.DBO.[ENDORS]
                            WHERE  POL_NO  IN {t1}
                            GROUP BY POL_NO
                      ) AS B ON
                      A.POL_NO = B.POL_NO """, connection)





                lives_premium['IP_Age'] = lives_premium['IP_Age'].astype(int)
                conditions = [(lives_premium['IP_Age'] <= 10),
                              (lives_premium['IP_Age'] >= 11) & (lives_premium['IP_Age'] <= 20),
                              (lives_premium['IP_Age'] >= 21) & (lives_premium['IP_Age'] <= 30),
                              (lives_premium['IP_Age'] >= 31) & (lives_premium['IP_Age'] <= 40),
                              (lives_premium['IP_Age'] >= 41) & (lives_premium['IP_Age'] <= 50),
                              (lives_premium['IP_Age'] >= 51) & (lives_premium['IP_Age'] <= 60),
                              (lives_premium['IP_Age'] >= 61) & (lives_premium['IP_Age'] <= 70),
                              (lives_premium['IP_Age'] >= 71) & (lives_premium['IP_Age'] <= 80),
                              (lives_premium['IP_Age'] > 80)]
                values = ['00-10', '11-20', '21-30', '31-40', '41-50', '51-60', '61-70', '71-80', 'above80']

                lives_premium['age_band'] = np.select(conditions, values)

                conditions4 = [(lives_premium['IP_Sum_Insured'] >= 0) & (lives_premium['IP_Sum_Insured'] <= 100000),
                               (lives_premium['IP_Sum_Insured'] > 100000) & (lives_premium['IP_Sum_Insured'] <= 300000),
                               (lives_premium['IP_Sum_Insured'] > 300000) & (lives_premium['IP_Sum_Insured'] <= 500000),
                               (lives_premium['IP_Sum_Insured'] > 500000) & (lives_premium['IP_Sum_Insured'] <= 700000),
                               (lives_premium['IP_Sum_Insured'] > 700000) & (
                                           lives_premium['IP_Sum_Insured'] <= 1000000),
                               (lives_premium['IP_Sum_Insured'] >= 1000000) & (
                                           lives_premium['IP_Sum_Insured'] <= 1500000)]

                # create a list of the values we want to assign for each condition
                values = ['0-1Lakh', '1-3Lakh', '3-5Lakh', '5-7Lakh', '7-10Lakh', '10-15Lakh']

                lives_premium['Si_band'] = np.select(conditions4, values)

                lives_premium['Si_band'] = lives_premium['Si_band'].replace(0, np.nan)

                lives_premium['Premium_new'] = lives_premium['NET_PREMIUM'] + lives_premium['PREMIUM_ENDORSEMENT']

                lives_premium = lives_premium.drop(['Premium'], axis=1)

                paid.rename(columns={'pol_no': 'POL_NO'}, inplace=True)
                crs.rename(columns={'pol_no': 'POL_NO'}, inplace=True)
                out.rename(columns={'pol_no': 'POL_NO'}, inplace=True)
                paid.rename(columns={'consider_count': 'CONSIDER_COUNT'}, inplace=True)
                paid.rename(columns={'liablityamt': 'LiablityAmt'}, inplace=True)
                crs.rename(columns={'liablityamt': 'LiablityAmt'}, inplace=True)
                out.rename(columns={'liablityamt': 'LiablityAmt'}, inplace=True)
                paid.rename(columns={'settledamt': 'SettledAmt'}, inplace=True)
                crs.rename(columns={'settledamt': 'SettledAmt'}, inplace=True)
                out.rename(columns={'settledamt': 'SettledAmt'}, inplace=True)
                relation_master.rename(columns={'relation': 'RELATION'}, inplace=True)
                relation_master.rename(columns={'std_relation': 'STD_RELATION'}, inplace=True)

                paid.rename(columns={'icname': 'IC_NAME'}, inplace=True)
                crs.rename(columns={'ic_name': 'IC_NAME'}, inplace=True)
                out.rename(columns={'ic_name': 'IC_NAME'}, inplace=True)

                lives_premium.rename(columns={'IC_Name': 'IC_NAME'}, inplace=True)
                out.rename(columns={'actuallodgeamt': 'LodgeAmt'}, inplace=True)
                crs.rename(columns={'cl_lod_amt': 'LodgeAmt'}, inplace=True)
                customer_care.rename(columns={'pol_no': 'POL_NO'}, inplace=True)
                customer_care.rename(columns={'ic_name': 'IC_NAME'}, inplace=True)
                crs.rename(columns={'consider_count': 'CONSIDER_COUNT'}, inplace=True)
                out.rename(columns={'consider_count': 'CONSIDER_COUNT'}, inplace=True)
                paid.rename(columns={'ipd_opd': 'IPD_OPD'}, inplace=True)
                crs.rename(columns={'ipd_opd': 'IPD_OPD'}, inplace=True)
                out.rename(columns={'ipd_opd': 'IPD_OPD'}, inplace=True)
                paid.rename(columns={'lodgetype': 'LodgeType'}, inplace=True)
                crs.rename(columns={'lodgetype': 'LodgeType'}, inplace=True)
                out.rename(columns={'lodgetype': 'LodgeType'}, inplace=True)
                paid.rename(columns={'lodgeamt': 'LodgeAmt'}, inplace=True)
                crs.rename(columns={'lodgeamt': 'LodgeAmt'}, inplace=True)
                out.rename(columns={'lodgeamt': 'LodgeAmt'}, inplace=True)
                paid.rename(columns={'actuallosstype': 'ActualLossType'}, inplace=True)
                crs.rename(columns={'actuallosstype': 'ActualLossType'}, inplace=True)
                out.rename(columns={'actuallosstype': 'ActualLossType'}, inplace=True)

                paid['POL_NO'] = paid['POL_NO'].str.upper().str.strip()
                crs['POL_NO'] = crs['POL_NO'].str.upper().str.strip()
                out['POL_NO'] = out['POL_NO'].str.upper().str.strip()
                lives_premium['POL_NO'] = lives_premium['POL_NO'].str.upper().str.strip()
                # lives_premium_master['POL_NO']=lives_premium_master['POL_NO'].str.upper().str.strip()
                customer_care['POL_NO'] = customer_care['POL_NO'].str.upper().str.strip()

                paid['IC_NAME'] = paid['IC_NAME'].str.upper().str.strip()
                crs['IC_NAME'] = crs['IC_NAME'].str.upper().str.strip()
                out['IC_NAME'] = out['IC_NAME'].str.upper().str.strip()
                lives_premium['IC_NAME'] = lives_premium['IC_NAME'].str.upper().str.strip()
                customer_care['IC_NAME'] = customer_care['IC_NAME'].str.upper().str.strip()




                # Create the Plotly table using the modified function

                def table(data, height, width):
                    fig = go.Figure(data=[go.Table(columnwidth = [100,40,40],
                    header=dict(values=data.columns,
                                fill_color='#1E90FF', line_color='black',
                                font=dict(color='White', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=data.values.T,
                               fill_color='white', line_color='black',
                               align='center'))])

                    fig.update_layout(height=height, width=width, autosize=True)
                    return fig


                    # def create_table_trace(df, max_font_size=12):
                    #     max_lengths = [df[col].astype(str).apply(len).max() for col in df.columns]
                    #     column_widths = [max_length * max_font_size for max_length in max_lengths]
                    #     max_width = max(column_widths)
                    #
                    #     if max_width > 100:
                    #         font_size = max_font_size * (100 / max_width)  # Reduce font size proportionally
                    #
                    #         if font_size < 8:
                    #             font_size = 8  # Set a minimum font size
                    #
                    #         column_widths = [max_length * font_size for max_length in max_lengths]
                    #
                    #     table_trace = go.Table(
                    #         header=dict(values=list(df.columns)),
                    #         cells=dict(values=[df[col] for col in df.columns]),
                    #         columnwidth=column_widths,
                    #         font=dict(size=font_size)
                    #     )
                    #
                    #     return table_trace




                def cluster_bar_chart(cluster_bar_data, title):

                    fig = make_subplots()

                    # Add bar traces to the subplot figure
                    for y in l1:
                        fig.add_trace(
                            go.Bar(x=cluster_bar_data.iloc[:, 0], y=cluster_bar_data[y], name=y,
                                   text=cluster_bar_data[y]),

                        )
                        # Update layout
                    fig.update_layout(
                        title={'text': title, 'y': 0.9, 'x': 1, 'xanchor': 'center', 'yanchor': 'top'})
                    fig.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))

                    fig.update_traces(textfont_size=10, textangle=0, textposition="outside", cliponaxis=False)

                    fig.update_traces(width=0.10)

                    fig.update_layout(height=600)

                    fig.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                    fig.update_layout(plot_bgcolor="white")
                    return fig

                def Donut_chart(donut_data, text):
                    donut_data = [go.Pie(labels=donut_data.iloc[:, 0],
                                         values=donut_data.iloc[:, 1], text=donut_data.iloc[:, 0],
                                         hole=.5, marker_colors=px.colors.qualitative.Plotly)]
                    fig = go.Figure(data=donut_data)
                    fig.update_layout(margin=dict(t=50, b=50, l=50, r=50))
                    fig.update_layout(
                        title={'text': text, 'y': 1, 'x': 1, 'xanchor': 'center', 'yanchor': 'top'})
                    fig.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                    fig.update_layout(width=800, height=400)

                    return fig

                def pie_chart(pie_data, text):
                    pie_data = [go.Pie(labels=pie_data.iloc[:, 0],
                                       values=pie_data.iloc[:, 1], text=pie_data.iloc[:, 0]
                                       , marker_colors=px.colors.qualitative.Plotly)]
                    fig = go.Figure(data=pie_data)
                    fig.update_layout(margin=dict(t=100, b=100, l=100, r=100))
                    fig.update_layout(
                        title={'text': text, 'y': 0.9, 'x': 1, 'xanchor': 'center', 'yanchor': 'top'})
                    fig.update_layout(title=dict(x=0.5, font=dict(color='black')))
                    return fig

                def horizontal_bar_chart(hor_bar_data, title):
                    hor_bar_data = [
                        go.Bar(x=hor_bar_data.iloc[:, 1], y=hor_bar_data.iloc[:, 0], text=hor_bar_data.iloc[:, 1],
                               marker_color='#D9B300', orientation='h')]
                    fig = go.Figure(data=hor_bar_data)
                    fig.update_traces(textposition='auto')
                    fig.update_layout(yaxis=dict(autorange="reversed"))
                    fig.update_layout(title=title)
                    fig.update_layout(title_x=0.5, plot_bgcolor="white")
                    return fig

                def strip_dataframe(df):
                    stripped_df = df.apply(lambda x: x.str.upper().strip() if x.dtype == "object" else x)
                    return stripped_df

                def strip_dataframe(df):
                    stripped_df = df.apply(lambda x: x.str.upper().strip() if x.dtype == "object" else x)
                    return stripped_df

                ############## SUMMARY OVERALL ################

                no_of_policies = lives_premium['POL_NO'].nunique()
                Total_Lives = lives_premium['Lives'].sum()

                # Format the value with commas

                lives_premium['Premium_new'] = lives_premium.drop_duplicates(['POL_NO'])['Premium_new']
                Total_premium = lives_premium['Premium_new'].sum().astype(int)

                Avg_Premium_Per_Life = (Total_premium / Total_Lives).astype(int)

                Policy_rundays = lives_premium['POLICYRUNDAY21'].drop_duplicates().mean()

                lives_premium['new_Earned_premium'] = lives_premium.drop_duplicates(['POL_NO'])['EARNED_PERMIUM']
                Earned_Premium = lives_premium['new_Earned_premium'].drop_duplicates().sum().astype(int)

                Avg_earned_premium_Per_Life = (Earned_Premium / Total_Lives).astype(int)

                Reported_claims = paid['CONSIDER_COUNT'].sum() + crs['CONSIDER_COUNT'].sum() + out['CONSIDER_COUNT'].sum().astype(int)

                Settled_claims = paid['CONSIDER_COUNT'].sum() + crs['CONSIDER_COUNT'].sum().astype(int)

                total_incurred_amt = paid['LiablityAmt'].sum() + out['LiablityAmt'].sum()

                claim_paid = paid['CONSIDER_COUNT'].sum()

                paid_amount = paid['SettledAmt'].sum()

                IR = ((Reported_claims / Total_Lives) * 100).astype(int)

                prorated_ir = ((IR * 365) / Policy_rundays)
                from decimal import Decimal

                ICR = ((np.int32(total_incurred_amt) / np.int32(Total_premium)) * 100).astype(int)
                ECR = ((np.int32(total_incurred_amt) / np.int32(Earned_Premium)) * 100).astype(int)
                Settlement_ratio = ((np.int32(Settled_claims)/np.int32(Reported_claims)) * 100).astype(int)

                import locale

                def format_currency(amount):
                    locale.setlocale(locale.LC_ALL, 'en_IN')  # Set the locale to en_IN (Indian English)
                    formatted_amount = locale.format_string("%s%.0f", ('₹', amount), grouping=True)
                    return formatted_amount

                def format_comma_separated(number):
                    return "{:,}".format(number)



                Total_Lives1 = format_comma_separated(Total_Lives)
                Avg_Premium_Per_Life1 = format_comma_separated(Avg_Premium_Per_Life)
                Total_premium1 = format_currency(Total_premium)
                Earned_Premium1 = format_currency(Earned_Premium)
                Avg_earned_premium_Per_Life1 = format_comma_separated(Avg_earned_premium_Per_Life)
                Reported_claims1 = format_comma_separated(Reported_claims)
                Settled_claims1 = format_comma_separated(Settled_claims)
                total_incurred_amt1 = format_currency(total_incurred_amt)
                claim_paid1 = format_comma_separated(claim_paid)
                paid_amount1 = format_currency(paid_amount)
                IR1 = format_comma_separated(IR)
                prorated_ir1 = format_comma_separated(prorated_ir)
                ICR1 = format_comma_separated(ICR)
                ECR1 = format_comma_separated(ECR)
                Settlement_ratio1 = format_comma_separated(Settlement_ratio)

                IR1 = f'{IR1}%'

                prorated_ir1 = f'{prorated_ir1}%'

                ICR1 = f'{ICR1}%'

                ECR1 = f'{ECR1}%'


                Settlement_ratio1 = f'{Settlement_ratio1}%'

                summary_overall = {'No Of Policies': no_of_policies, 'Total_Lives': Total_Lives1,
                                   'Total Premium': Total_premium1, 'Avg Premium Per Life': Avg_Premium_Per_Life1,
                                   'Policy Rundays': Policy_rundays, 'Earned Premium': Earned_Premium1,
                                   'Avg Earned Premium Per Life': Avg_earned_premium_Per_Life1,
                                   'Reported Claims': Reported_claims1, 'Settled Claims': Settled_claims1,
                                   'Total Incurred Amt': total_incurred_amt1, 'Paid Claims': claim_paid1,
                                   'Paid Amount': paid_amount1, 'IR': IR1, 'Prorated IR': prorated_ir1, 'ICR': ICR1,
                                   'ECR': ECR1, 'Settlement Ratio': Settlement_ratio1}

                summary_overall = pd.DataFrame(zip(summary_overall.keys(), (summary_overall.values())),
                                               columns=['Parameters', 'summary'])

#####################  summary_ipd_opd


                paid['IC_NAME'] = paid['IC_NAME'].apply(lambda x: ''.join([i[0] for i in x.split()]))
                crs['IC_NAME'] = crs['IC_NAME'].apply(lambda x: ''.join([i[0] for i in x.split()]))
                out['IC_NAME'] = out['IC_NAME'].apply(lambda x: ''.join([i[0] for i in x.split()]))
                lives_premium['IC_NAME'] = lives_premium['IC_NAME'].apply(lambda x: ''.join([i[0] for i in x.split()]))
                customer_care['IC_NAME'] = customer_care['IC_NAME'].apply(lambda x: ''.join([i[0] for i in x.split()]))


                crs_ipd_summary = (crs[crs['IPD_OPD'] == 'IPD'])
                paid_ipd_summary = (paid[paid['IPD_OPD'] == 'IPD'])
                out_ipd_summary = (out[out['IPD_OPD'] == 'IPD'])

                crs_opd_summary = (crs[crs['IPD_OPD'] == 'OPD'])
                paid_opd_summary = (paid[paid['IPD_OPD'] == 'OPD'])
                out_opd_summary = (out[out['IPD_OPD'] == 'OPD'])

                Reported_claims_ipd_summary = paid_ipd_summary['CONSIDER_COUNT'].sum() + crs_ipd_summary[
                    'CONSIDER_COUNT'].sum() + out_ipd_summary['CONSIDER_COUNT'].sum()

                Reported_claims_opd_summary = paid_opd_summary['CONSIDER_COUNT'].sum() + crs_opd_summary[
                    'CONSIDER_COUNT'].sum() + out_opd_summary['CONSIDER_COUNT'].sum()

                Reported_amt_ipd_summary = \
                paid_ipd_summary[(paid_ipd_summary['LodgeType'].str.strip() != "Deductions Payment")]['LodgeAmt'].agg(
                    {'count': sum}) + \
                crs_ipd_summary[(crs_ipd_summary['LodgeType'].str.strip() != "Deductions Payment")]['LodgeAmt'].agg(
                    {'count': sum}) + \
                out_ipd_summary[(out_ipd_summary['LodgeType'].str.strip() != "Deductions Payment")]['LodgeAmt'].agg(
                    {'count': sum})
                Reported_amt_ipd_summary = Reported_amt_ipd_summary[0]

                Reported_amt_opd_summary = \
                paid_opd_summary[(paid_opd_summary['LodgeType'].str.strip() != "Deductions Payment")]['LodgeAmt'].agg(
                    {'count': sum}) + \
                crs_opd_summary[(crs_opd_summary['LodgeType'].str.strip() != "Deductions Payment")]['LodgeAmt'].agg(
                    {'count': sum}) + \
                out_opd_summary[(out_opd_summary['LodgeType'].str.strip() != "Deductions Payment")]['LodgeAmt'].agg(
                    {'count': sum})
                Reported_amt_opd_summary = Reported_amt_opd_summary[0]

                settled_claims_ipd_summary = paid_ipd_summary['CONSIDER_COUNT'].sum() + crs_ipd_summary[
                    'CONSIDER_COUNT'].sum()

                settled_claims_opd_summary = paid_opd_summary['CONSIDER_COUNT'].sum() + crs_opd_summary[
                    'CONSIDER_COUNT'].sum()

                incurred_amt_ipd_summary = paid_ipd_summary['LiablityAmt'].sum() + out_ipd_summary['LiablityAmt'].sum()

                incurred_amt_opd_summary = paid_opd_summary['LiablityAmt'].sum() + out_opd_summary['LiablityAmt'].sum()

                paid_claims_ipd_summary = paid_ipd_summary['CONSIDER_COUNT'].sum()

                paid_claims_opd_summary = paid_opd_summary['CONSIDER_COUNT'].sum()

                paid_amt_ipd_summary = paid_ipd_summary['LiablityAmt'].sum()

                paid_amt_opd_summary = paid_opd_summary['LiablityAmt'].sum()

                lives_ipd_opd = Total_Lives.copy()

                IR_ipd_summary = ((Reported_claims_ipd_summary / lives_ipd_opd) * 100).astype(int)

                IR_opd_summary = ((Reported_claims_opd_summary / lives_ipd_opd) * 100).astype(int)

                prorated_ir_ipd_summary = (((IR_ipd_summary * 365) / Policy_rundays)).astype(int)

                prorated_ir_opd_summary = (((IR_opd_summary * 365) / Policy_rundays)).astype(int)

                ICR_ipd_summary = (np.int32(incurred_amt_ipd_summary / Total_premium) * 100).astype(int)

                ICR_opd_summary = (np.int32(incurred_amt_opd_summary / Total_premium) * 100).astype(int)

                ECR_ipd_summary = (np.int32(incurred_amt_ipd_summary / Earned_Premium) * 100).astype(int)

                ECR_opd_summary = (np.int32(incurred_amt_opd_summary / Earned_Premium) * 100).astype(int)

                Settlement_ratio_ipd_summary = ((settled_claims_ipd_summary / Reported_claims_ipd_summary) * 100).astype(int)

                Settlement_ratio_opd_summary = ((settled_claims_opd_summary / Reported_claims_opd_summary) * 100).astype(int)

                Reported_claims_ipd_summary1=format_comma_separated(Reported_claims_ipd_summary)
                Reported_claims_opd_summary1=format_comma_separated(Reported_claims_opd_summary)
                settled_claims_ipd_summary1=format_comma_separated(settled_claims_ipd_summary)
                settled_claims_opd_summary1=format_comma_separated(settled_claims_opd_summary)
                paid_claims_ipd_summary1 = format_comma_separated(paid_claims_ipd_summary)
                paid_claims_opd_summary1 = format_comma_separated(paid_claims_opd_summary)


                IR_ipd_summary1 = format_comma_separated(IR_ipd_summary)
                IR_ipd_summary1=f'{IR_ipd_summary1}%'
                IR_opd_summary1 = format_comma_separated(IR_opd_summary)
                IR_opd_summary1=f'{IR_opd_summary1}%'

                prorated_ir_ipd_summary1 = format_comma_separated(prorated_ir_ipd_summary)
                prorated_ir_ipd_summary = f'{prorated_ir_ipd_summary1}%'
                prorated_ir_opd_summary1 = format_comma_separated(prorated_ir_opd_summary)
                prorated_ir_opd_summary1 = f'{prorated_ir_opd_summary1}%'

                ICR_ipd_summary1 = format_comma_separated(ICR_ipd_summary)
                ICR_ipd_summary1 = f'{ICR_ipd_summary1}%'
                ICR_opd_summary1 = format_comma_separated(ICR_opd_summary)
                ICR_opd_summary1 = f'{ICR_opd_summary1}%'

                ECR_ipd_summary1 = format_comma_separated(ECR_ipd_summary)
                ECR_ipd_summary1 = f'{ECR_ipd_summary1}%'
                ECR_opd_summary1 = format_comma_separated(ECR_opd_summary)
                ECR_opd_summary1 = f'{ECR_opd_summary1}%'

                Settlement_ratio_ipd_summary1 = format_comma_separated(Settlement_ratio_ipd_summary)
                Settlement_ratio_ipd_summary1 = f'{Settlement_ratio_ipd_summary1}%'
                Settlement_ratio_opd_summary1 = format_comma_separated(Settlement_ratio_opd_summary)
                Settlement_ratio_opd_summary1 = f'{Settlement_ratio_opd_summary1}%'

                Reported_amt_ipd_summary1=format_currency(Reported_amt_ipd_summary)
                Reported_amt_opd_summary1=format_currency(Reported_amt_opd_summary)
                incurred_amt_ipd_summary1=format_currency(incurred_amt_ipd_summary)
                incurred_amt_opd_summary1=format_currency(incurred_amt_opd_summary)
                paid_amt_ipd_summary1 = format_currency(paid_amt_ipd_summary)
                paid_amt_opd_summary1 = format_currency(paid_amt_opd_summary)


                summary_ipd = {'Reported_Claims': Reported_claims_ipd_summary1, 'Reported_Amt': Reported_amt_ipd_summary1,
                               'Settled_Claims': settled_claims_ipd_summary1, 'Incurred_Amt': incurred_amt_ipd_summary1,
                               'Paid_Claims': paid_claims_ipd_summary1, 'Paid_Amt': paid_amt_ipd_summary1,
                               'IR': IR_ipd_summary1, 'Prorated_IR': prorated_ir_ipd_summary1, 'ICR': ICR_ipd_summary1,
                               'ECR': ECR_ipd_summary1, 'Settlement_ratio': Settlement_ratio_ipd_summary1}

                Reported_claims_opd_summary1=format_comma_separated(Reported_claims_opd_summary)

                summary_opd = {'Reported_Claims': Reported_claims_opd_summary1, 'Reported_Amt': Reported_amt_opd_summary1,
                               'Settled_Claims': settled_claims_opd_summary1, 'Incurred_Amt': incurred_amt_opd_summary1,
                               'Paid_Claims': paid_claims_opd_summary1, 'Paid_Amt': paid_amt_opd_summary1,
                               'IR': IR_opd_summary1, 'Prorated_IR': prorated_ir_opd_summary1, 'ICR': ICR_opd_summary1,
                               'ECR': ECR_opd_summary1, 'Settlement_ratio': Settlement_ratio_opd_summary1}

                summary_ipd = pd.DataFrame(zip(summary_ipd.keys(), (summary_ipd.values())),
                                           columns=['Parameters', 'IPD'])
                summary_opd = pd.DataFrame(zip(summary_opd.keys(), (summary_opd.values())),
                                           columns=['Parameters1', 'OPD'])

                summary_ipd_opd = pd.concat([summary_ipd, summary_opd], axis=1)
                summary_ipd_opd = summary_ipd_opd[['Parameters', 'IPD', 'OPD']]


 #################################  claim_settlement_statistics


                claims_paid = paid['CONSIDER_COUNT'].sum()

                claims_crs = crs['CONSIDER_COUNT'].sum()

                claims_out = out['CONSIDER_COUNT'].sum()

                claim_summary = {'PAID': claims_paid, 'CRS': claims_crs,
                                 'OUT': claims_out}

                claim_settlement_statistics = pd.DataFrame(zip(claim_summary.keys(), (claim_summary.values())),
                                                           columns=['claims', 'count'])


##############  outstanding_analysis


                out['SubStatus'] = np.where((out['extra'].isnull()), out['head'], out['extra'])
                outstanding_analysis1 = out.fillna(0).pivot_table(index=['SubStatus'], values=['CONSIDER_COUNT'],
                                                                 aggfunc=np.sum)
                outstanding_analysis = outstanding_analysis1.reset_index().sort_values(['CONSIDER_COUNT'], ascending=False)

 ##############  lodge_amt_analysis

                lodge_amt_analysis = paid[(paid['LodgeType'].str.strip() != "Deductions Payment")].groupby(['ActualLossType'], sort=False,  as_index=False)['LodgeAmt'].agg( {'count': sum})
                lodge_amt_analysis.rename(columns={'count': 'lodge_amt_for_paid'}, inplace=True)

 ##############  paid_amt_analysis

                paid_amt_analysis = paid.groupby(['ActualLossType'], sort=False, as_index=False)['SettledAmt'].agg(  {'count': sum})
                paid_amt_analysis.rename(columns={'count': 'paid_amt'}, inplace=True)

################  icwise_summary


                paid_ic = paid[['IC_NAME', 'POL_NO']]
                crs_ic = crs[['IC_NAME', 'POL_NO']]
                out_ic = out[['IC_NAME', 'POL_NO']]
                ###

                master_ic = lives_premium[['IC_NAME']]
                master_ic = master_ic.drop_duplicates()

                ###

                no_of_policies_icwise = lives_premium[['IC_NAME', 'POL_NO']]
                no_of_policies_icwise = no_of_policies_icwise.drop_duplicates(['IC_NAME', 'POL_NO'])
                no_of_policies_icwise = no_of_policies_icwise.fillna(0).pivot_table(index=['IC_NAME'], values=['POL_NO'],
                                                                                    aggfunc='count')

                ###

                premium_icwise = lives_premium[['IC_NAME', 'Premium_new']]
                premium_icwise = premium_icwise.drop_duplicates(['IC_NAME', 'Premium_new'])
                premium_icwise = premium_icwise.fillna(0).pivot_table(index=['IC_NAME'], values=['Premium_new'], aggfunc='sum')

                ###

                Lives_icwise = lives_premium.groupby(['IC_NAME'])['Lives'].sum()
                Lives_icwise = Lives_icwise.reset_index()

                ###

                Avg_Premium_Per_Life_icwise = pd.merge(premium_icwise, Lives_icwise, on='IC_NAME', how='inner')
                Avg_Premium_Per_Life_icwise['Premium Per Life'] = Avg_Premium_Per_Life_icwise['Premium_new'] / \
                                                                  Avg_Premium_Per_Life_icwise['Lives']
                Avg_Premium_Per_Life_icwise = Avg_Premium_Per_Life_icwise[['IC_NAME', 'Premium Per Life']]

                ###
                policyrundays_icwise = lives_premium[['IC_NAME', 'POLICYRUNDAY']]
                policyrundays_icwise = policyrundays_icwise.drop_duplicates(['IC_NAME', 'POLICYRUNDAY'])
                policyrundays_icwise = policyrundays_icwise.fillna(0).pivot_table(index=['IC_NAME'], values=['POLICYRUNDAY'],
                                                                                  aggfunc='mean')

                ###
                earned_premium_icwise = lives_premium[['IC_NAME', 'EARNED_PERMIUM']]
                earned_premium_icwise = earned_premium_icwise.drop_duplicates(['IC_NAME', 'EARNED_PERMIUM'])
                earned_premium_icwise = earned_premium_icwise.fillna(0).pivot_table(index=['IC_NAME'],
                                                                                    values=['EARNED_PERMIUM'], aggfunc='sum')
                ###

                claim_paid_icwise_summary = paid.groupby(['IC_NAME'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                    {'count': sum})
                claim_paid_icwise_summary.rename(columns={'count': 'Paid Claims'}, inplace=True)


                claim_crs_icwise_summary = crs.groupby(['IC_NAME'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                    {'count': sum})
                claim_crs_icwise_summary.rename(columns={'count': 'Rejected Claims'}, inplace=True)

                claim_os_icwise_summary = out.groupby(['IC_NAME'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                    {'count': sum})
                claim_os_icwise_summary.rename(columns={'count': 'Outstanding Claims'}, inplace=True)

                claim_settlement_statistics_icwise_summary = pd.merge(master_ic, claim_paid_icwise_summary, how='left',
                                                                      on=['IC_NAME'])
                claim_settlement_statistics_icwise_summary = pd.merge(claim_settlement_statistics_icwise_summary,
                                                                      claim_crs_icwise_summary, how='left', on=['IC_NAME'])
                claim_settlement_statistics_icwise_summary = pd.merge(claim_settlement_statistics_icwise_summary,
                                                                      claim_os_icwise_summary, how='left', on=['IC_NAME'])

                claim_settlement_statistics_icwise_summary['Reported Claims'] = claim_settlement_statistics_icwise_summary[
                                                                                    'Paid Claims'].fillna(0) + \
                                                                                claim_settlement_statistics_icwise_summary[
                                                                                    'Rejected Claims'].fillna(0) + \
                                                                                claim_settlement_statistics_icwise_summary[
                                                                                    'Outstanding Claims'].fillna(0)

                claim_settlement_statistics_icwise_summary['Reported Claims']=claim_settlement_statistics_icwise_summary['Reported Claims'].astype(int)

                claim_settlement_statistics_icwise_summary['total%'] = (claim_settlement_statistics_icwise_summary[
                                                                            'Reported Claims'] /
                                                                        claim_settlement_statistics_icwise_summary[
                                                                            'Reported Claims'].sum()) * 100
                claim_settlement_statistics_icwise_summary.loc['Total'] = claim_settlement_statistics_icwise_summary.sum(
                    numeric_only=True, axis=0)

                claim_settlement_statistics_icwise_summary['Settled Claims'] = claim_settlement_statistics_icwise_summary[
                                                                                   'Paid Claims'].fillna(0) + \
                                                                               claim_settlement_statistics_icwise_summary[
                                                                                   'Rejected Claims'].fillna(0)

                #####

                reported_claims_icwise_summary = claim_settlement_statistics_icwise_summary[['IC_NAME', 'Reported Claims']]
                ####

                settled_claims_icwise_summary = claim_settlement_statistics_icwise_summary[['IC_NAME', 'Settled Claims']]
                ####

                paid_claims_icwise_summary = claim_settlement_statistics_icwise_summary[
                    ['IC_NAME', 'Paid Claims']]
                ###
                reported_amt_icwise_summary1 = \
                paid[(paid['LodgeType'].str.strip() != "Deductions Payment")].groupby(['IC_NAME'], sort=False, as_index=False)[
                    'LodgeAmt'].agg({'count': sum})
                reported_amt_icwise_summary2 = \
                crs[(crs['LodgeType'].str.strip() != "Deductions Payment")].groupby(['IC_NAME'], sort=False, as_index=False)[
                    'LodgeAmt'].agg({'count': sum})
                reported_amt_icwise_summary3 = \
                out[(out['LodgeType'].str.strip() != "Deductions Payment")].groupby(['IC_NAME'], sort=False, as_index=False)[
                    'LodgeAmt'].agg({'count': sum})
                reported_amt_icwise_summary = pd.merge(reported_amt_icwise_summary1, reported_amt_icwise_summary2, how='left',
                                                       on=['IC_NAME'])
                reported_amt_icwise_summary = pd.merge(reported_amt_icwise_summary, reported_amt_icwise_summary3, how='left',
                                                       on=['IC_NAME'])
                reported_amt_icwise_summary['Reported Amount'] = reported_amt_icwise_summary['count_x'] + \
                                                              reported_amt_icwise_summary['count_y'] + \
                                                              reported_amt_icwise_summary['count']
                reported_amt_icwise_summary = reported_amt_icwise_summary[['IC_NAME', 'Reported Amount']]

                ###

                incurred_amt_icwise_summary1 = paid.groupby(['IC_NAME'], sort=False, as_index=False)['LiablityAmt'].agg(
                    {'count': sum})
                incurred_amt_icwise_summary2 = out.groupby(['IC_NAME'], sort=False, as_index=False)['LiablityAmt'].agg(
                    {'count': sum})
                incurred_amt_icwise_summary = pd.merge(incurred_amt_icwise_summary1, incurred_amt_icwise_summary2, how='left',
                                                       on=['IC_NAME'])
                incurred_amt_icwise_summary['Incurred Amount'] = incurred_amt_icwise_summary['count_x'] + \
                                                              incurred_amt_icwise_summary['count_y']
                incurred_amt_icwise_summary = incurred_amt_icwise_summary[['IC_NAME', 'Incurred Amount']]
                ###

                paid_amt_icwise_summary = paid.groupby(['IC_NAME'], sort=False, as_index=False)['LiablityAmt'].agg(
                    {'Paid Amount': sum})

                ###

                icwise_summary = pd.merge(master_ic, no_of_policies_icwise, how='left', on=['IC_NAME'])
                icwise_summary = pd.merge(icwise_summary, premium_icwise, how='left', on=['IC_NAME'])
                icwise_summary = pd.merge(icwise_summary, Lives_icwise, how='left', on=['IC_NAME'])
                icwise_summary = pd.merge(icwise_summary, Avg_Premium_Per_Life_icwise, how='left', on=['IC_NAME'])
                icwise_summary = pd.merge(icwise_summary, policyrundays_icwise, how='left', on=['IC_NAME'])
                icwise_summary = pd.merge(icwise_summary, earned_premium_icwise, how='left', on=['IC_NAME'])
                icwise_summary = pd.merge(icwise_summary, reported_claims_icwise_summary, how='left', on=['IC_NAME'])
                icwise_summary = pd.merge(icwise_summary, settled_claims_icwise_summary, how='left', on=['IC_NAME'])
                icwise_summary = pd.merge(icwise_summary, paid_claims_icwise_summary, how='left', on=['IC_NAME'])

                icwise_summary = pd.merge(icwise_summary, reported_amt_icwise_summary, how='left', on=['IC_NAME'])
                icwise_summary = pd.merge(icwise_summary, incurred_amt_icwise_summary, how='left', on=['IC_NAME'])
                icwise_summary = pd.merge(icwise_summary, paid_amt_icwise_summary, how='left', on=['IC_NAME'])
                icwise_summary['Incurred Amount']=icwise_summary['Incurred Amount'].fillna(0).astype(int)
                icwise_summary['Premium_new']=icwise_summary['Premium_new'].fillna(0).astype(int)

                icwise_summary['IR'] = (icwise_summary['Reported Claims'] / icwise_summary['Lives']) * 100
                icwise_summary['Prorated IR'] = ((icwise_summary['IR'] * 365) / icwise_summary[
                    'POLICYRUNDAY']) * 100
                icwise_summary['ICR'] = (icwise_summary['Incurred Amount'] / icwise_summary['Premium_new']) * 100
                icwise_summary['ECR'] = (icwise_summary['Incurred Amount'] / icwise_summary['EARNED_PERMIUM']) * 100
                icwise_summary['Settlement Ratio'] = (icwise_summary['Settled Claims'] / icwise_summary[
                    'Reported Claims']) * 100

                icwise_summary2 = icwise_summary[
                    ['IC_NAME', 'EARNED_PERMIUM', 'Premium_new', 'Reported Amount', 'Incurred Amount']]
                icwise_summary3 = icwise_summary[['IC_NAME', 'IR', 'Prorated IR', 'Settlement Ratio']]

                l1 = list(icwise_summary2.columns)
                l1.remove('IC_NAME')

                l2 = list(icwise_summary3.columns)
                l2.remove('IC_NAME')

                # Create subplot figure
                icwise_summary_fig1 = make_subplots(rows=1, cols=2)

                # Add bar traces to the subplot figure
                for y in l1:
                    icwise_summary_fig1.add_trace(
                        go.Bar(x=icwise_summary2['IC_NAME'], y=icwise_summary2[y], name=y), row=1, col=1)

                for y in l2:
                    icwise_summary_fig1.add_trace(
                        go.Bar(x=icwise_summary3['IC_NAME'], y=icwise_summary3[y], name=y), row=1, col=2)

                icwise_summary_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                icwise_summary_fig1.update_layout(height=500, width=1000)
                icwise_summary_fig1.update_layout(plot_bgcolor="white")

                def convert_to_int(value):
                    try:
                        if pd.isnull(value) or value == float('inf') or value == float('-inf'):
                            return 0  # Return 0 for NaN, inf, and -inf values
                        else:
                            value = int(value)
                            return value
                    except (ValueError, TypeError):
                        return value

                values = [10, 10.5, '20', '30.5', True, False, None, float('nan'), float('inf')]
                converted_values = [convert_to_int(value) for value in values]

                icwise_summary['Premium_new'] =icwise_summary['Premium_new'].apply(lambda x: format_currency(x))
                icwise_summary['Lives'] =icwise_summary['Lives'].apply(lambda x: format_comma_separated(x))
                icwise_summary['Premium Per Life'] =icwise_summary['Premium Per Life'].apply(lambda x: format_currency(x))
                icwise_summary['EARNED_PERMIUM'] =icwise_summary['EARNED_PERMIUM'].apply(lambda x: format_currency(x))
                icwise_summary['Reported Amount'] =icwise_summary['Reported Amount'].apply(lambda x: format_currency(x))
                icwise_summary['Incurred Amount'] =icwise_summary['Incurred Amount'].apply(lambda x: format_currency(x))
                icwise_summary['Reported Claims'] =icwise_summary['Reported Claims'].astype(int)
                icwise_summary['Reported Claims'] =icwise_summary['Reported Claims'].apply(lambda x: format_comma_separated(x))






                icwise_summary['Settled Claims'] =icwise_summary['Settled Claims'].apply(lambda x: convert_to_int(x))
                icwise_summary['Settled Claims'] =icwise_summary['Settled Claims'].apply(lambda x: format_comma_separated(x))

                icwise_summary['Paid Claims'] =icwise_summary['Paid Claims'].apply(lambda x: convert_to_int(x))
                icwise_summary['Paid Claims'] =icwise_summary['Paid Claims'].apply(lambda x: format_comma_separated(x))

                icwise_summary['Paid Amount'] =icwise_summary['Paid Amount'].apply(lambda x: format_currency(x))

                icwise_summary['IR'] =icwise_summary['IR'].apply(lambda x: convert_to_int(x))
                icwise_summary['IR'] =icwise_summary['IR'].apply(lambda x: f'{x}%')

                icwise_summary['Prorated IR'] = icwise_summary['Prorated IR'].apply(lambda x: convert_to_int(x))
                icwise_summary['Prorated IR'] = icwise_summary['Prorated IR'].apply(lambda x: f'{x}%')

                icwise_summary['ICR'] = icwise_summary['ICR'].apply(lambda x: convert_to_int(x))
                icwise_summary['ICR'] = icwise_summary['ICR'].apply(lambda x: f'{x}%')

                icwise_summary['ECR'] = icwise_summary['ECR'].apply(lambda x: convert_to_int(x))
                icwise_summary['ECR'] = icwise_summary['ECR'].apply(lambda x: f'{x}%')

                icwise_summary['Settlement Ratio'] = icwise_summary['Settlement Ratio'].apply(lambda x: convert_to_int(x))
                icwise_summary['Settlement Ratio'] = icwise_summary['Settlement Ratio'].apply(lambda x: f'{x}%')



                icwise_summary1 = icwise_summary.T
                icwise_summary1.columns = [''] * len(icwise_summary1.columns)
                icwise_summary1.columns = list(icwise_summary1.iloc[0])
                icwise_summary1.reset_index(inplace=True)
                icwise_summary1.drop(0, inplace=True)




                data = icwise_summary1
                columns_per_set = 7
                num_sets = (len(data.columns) - 1) // columns_per_set

                table_figures = []

                if len(data.columns) < 7:
                    subset_columns = ['index'] + list(data.columns[1:])
                    subset_data = data[subset_columns]
                    icwise_summary_fig11 = go.Figure(data=[go.Table(
                        header=dict(values=subset_data.columns,
                                    fill_color='#1E90FF', line_color='black',
                                    font=dict(color='White', family="Arial", size=15),
                                    align='center'),
                        cells=dict(values=subset_data.values.T,
                                   fill_color='white', line_color='black',
                                   align='center'))
                    ])

                    icwise_summary_fig11 = plot(icwise_summary_fig11, output_type='div', config=config)
                else:
                    for i in range(num_sets):
                        start_idx = i * columns_per_set
                        end_idx = start_idx + columns_per_set

                        subset_columns = ['index'] + list(data.columns[start_idx + 1:end_idx + 1])
                        subset_data = data[subset_columns]

                        icwise_summary_fig12 = go.Figure(data=[go.Table(
                            header=dict(values=subset_data.columns,
                                        fill_color='#1E90FF', line_color='black',
                                        font=dict(color='White', family="Arial", size=15),
                                        align='center'),
                            cells=dict(values=subset_data.values.T,
                                       fill_color='white', line_color='black',
                                       align='center'))
                        ])
                        icwise_summary_fig12 = plot(icwise_summary_fig12, output_type='div', config=config)

                        if len(data.columns) > (num_sets * columns_per_set) + 1:
                            remaining_columns = ['index'] + list(data.columns[(num_sets * columns_per_set) + 1:])
                            remaining_data = data[remaining_columns]

                            icwise_summary_fig13 = go.Figure(data=[go.Table(
                                header=dict(values=remaining_data.columns,
                                            fill_color='#1E90FF', line_color='black',
                                            font=dict(color='White', family="Arial", size=15),
                                            align='center'),
                                cells=dict(values=remaining_data.values.T,
                                           fill_color='white', line_color='black',
                                           align='center'))
                            ])
                            icwise_summary_fig13 = plot(icwise_summary_fig13, output_type='div', config=config)


                #################  icwise_claim_settlement_statistics2

                claim_paid_icwise_summary = paid.groupby(['IC_NAME'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                    {'count': sum})
                claim_paid_icwise_summary.rename(columns={'count': 'Paid Claims'}, inplace=True)
                claim_paid_icwise_summary['Paid Claims']=claim_paid_icwise_summary['Paid Claims'].fillna(0)

                claim_crs_icwise_summary = crs.groupby(['IC_NAME'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                    {'count': sum}).fillna(0)
                claim_crs_icwise_summary.rename(columns={'count': 'CRS Claims'}, inplace=True)
                claim_crs_icwise_summary['CRS Claims']=claim_crs_icwise_summary['CRS Claims'].fillna(0)

                claim_os_icwise_summary = out.groupby(['IC_NAME'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                    {'count': sum}).fillna(0)
                claim_os_icwise_summary.rename(columns={'count': 'OS Claims'}, inplace=True)
                claim_os_icwise_summary['OS Claims']=claim_os_icwise_summary['OS Claims'].fillna(0)

                icwise_claim_settlement_statistics = pd.merge(master_ic, claim_paid_icwise_summary, how='left',
                                                              on=['IC_NAME'])
                icwise_claim_settlement_statistics = pd.merge(icwise_claim_settlement_statistics,
                                                              claim_crs_icwise_summary, how='left', on=['IC_NAME'])
                icwise_claim_settlement_statistics = pd.merge(icwise_claim_settlement_statistics,
                                                              claim_os_icwise_summary, how='left', on=['IC_NAME'])

                icwise_claim_settlement_statistics1 = icwise_claim_settlement_statistics.T
                icwise_claim_settlement_statistics1.columns = [''] * len(icwise_claim_settlement_statistics1.columns)
                icwise_claim_settlement_statistics1.columns = list(icwise_claim_settlement_statistics1.iloc[0])
                icwise_claim_settlement_statistics1.reset_index(inplace=True)
                icwise_claim_settlement_statistics1.drop(0, inplace=True)




                icwise_claim_settlement_statistics12 = icwise_claim_settlement_statistics[['IC_NAME', 'Paid Claims', 'CRS Claims', 'OS Claims']]

                l3 = list(icwise_claim_settlement_statistics12.columns)
                l3.remove('IC_NAME')

                icwise_claim_settlement_statistics2 = make_subplots()
                # Add bar traces to the subplot figure
                for y in l3:
                    icwise_claim_settlement_statistics2.add_trace(
                        go.Bar(x=icwise_claim_settlement_statistics12.iloc[:, 0],
                               y=icwise_claim_settlement_statistics12[y], name=y,
                               text=icwise_claim_settlement_statistics12[y]))

                    # Update layout
                icwise_claim_settlement_statistics2.update_layout(
                    title={'text': '', 'y': 0.9, 'x': 1, 'xanchor': 'center', 'yanchor': 'top'})
                icwise_claim_settlement_statistics2.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                icwise_claim_settlement_statistics2.update_traces(textfont_size=10, textangle=0, textposition="outside",
                                                                  cliponaxis=False)
                icwise_claim_settlement_statistics2.update_layout(height=600)
                icwise_claim_settlement_statistics2.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                icwise_claim_settlement_statistics2.update_layout(plot_bgcolor="white")
                icwise_claim_settlement_statistics['Paid Claims']=icwise_claim_settlement_statistics['Paid Claims'].apply(convert_to_int)
                icwise_claim_settlement_statistics['CRS Claims']=icwise_claim_settlement_statistics['CRS Claims'].apply(convert_to_int)
                icwise_claim_settlement_statistics['OS Claims']=icwise_claim_settlement_statistics['OS Claims'].apply(convert_to_int)

                icwise_claim_settlement_statistics['Paid Claims']=icwise_claim_settlement_statistics['Paid Claims'].apply(lambda x: format_comma_separated(x))
                icwise_claim_settlement_statistics['CRS Claims']=icwise_claim_settlement_statistics['CRS Claims'].apply(lambda x: format_comma_separated(x))
                icwise_claim_settlement_statistics['OS Claims']=icwise_claim_settlement_statistics['OS Claims'].apply(lambda x: format_comma_separated(x))

                data = icwise_claim_settlement_statistics1
                columns_per_set = 7
                num_sets = (len(data.columns) - 1) // columns_per_set

                table_figures = []

                if len(data.columns) < 7:
                    subset_columns = ['index'] + list(data.columns[1:])
                    subset_data = data[subset_columns]
                    icwise_claim_settlement_statistics_l1 = go.Figure(data=[go.Table(
                        header=dict(values=subset_data.columns,
                                    fill_color='#1E90FF', line_color='black',
                                    font=dict(color='White', family="Arial", size=15),
                                    align='center'),
                        cells=dict(values=subset_data.values.T,
                                   fill_color='white', line_color='black',
                                   align='center'))
                    ])
                    icwise_claim_settlement_statistics_l1 = plot(icwise_claim_settlement_statistics_l1,
                                                                 output_type='div', config=config)
                else:
                    for i in range(num_sets):
                        start_idx = i * columns_per_set
                        end_idx = start_idx + columns_per_set

                        subset_columns = ['index'] + list(data.columns[start_idx + 1:end_idx + 1])
                        subset_data = data[subset_columns]

                        icwise_claim_settlement_statistics_l2 = go.Figure(data=[go.Table(
                            header=dict(values=subset_data.columns,
                                        fill_color='#1E90FF', line_color='black',
                                        font=dict(color='White', family="Arial", size=15),
                                        align='center'),
                            cells=dict(values=subset_data.values.T,
                                       fill_color='white', line_color='black',
                                       align='center'))
                        ])
                        icwise_claim_settlement_statistics_l2 = plot(icwise_claim_settlement_statistics_l2, output_type='div', config=config)

                    if len(data.columns) > (num_sets * columns_per_set) + 1:
                        remaining_columns = ['index'] + list(data.columns[(num_sets * columns_per_set) + 1:])
                        remaining_data = data[remaining_columns]

                        icwise_claim_settlement_statistics_l3 = go.Figure(data=[go.Table(
                            header=dict(values=remaining_data.columns,
                                        fill_color='#1E90FF', line_color='black',
                                        font=dict(color='White', family="Arial", size=15),
                                        align='center'),
                            cells=dict(values=remaining_data.values.T,
                                       fill_color='white', line_color='black',
                                       align='center'))
                        ])
                        icwise_claim_settlement_statistics_l3 = plot(icwise_claim_settlement_statistics_l3,
                                                                     output_type='div', config=config)

                # columns_per_set = 7
                # num_sets = (len(data.columns) - 1) // columns_per_set
                #
                #
                # if len(data.columns) < 7:
                #     subset_columns = ['index'] + list(data.columns[1:])
                #     subset_data = data[subset_columns]
                #     icwise_claim_settlement_statistics_l1 = go.Figure(data=[go.Table(
                #         header=dict(values=subset_data.columns,
                #                     fill_color='#1E90FF', line_color='black',
                #                     font=dict(color='White', family="Arial", size=15),
                #                     align='center'),
                #         cells=dict(values=subset_data.values.T,
                #                    fill_color='white', line_color='black',
                #                    align='center'))
                #     ])
                #
                #     icwise_claim_settlement_statistics_l1 = plot(icwise_claim_settlement_statistics_l1,
                #                                                  output_type='div', config=config)
                # else:
                #     for i in range(num_sets):
                #         start_idx = i * columns_per_set
                #         end_idx = start_idx + columns_per_set
                #
                #         subset_columns = ['index'] + list(data.columns[start_idx + 1:end_idx + 1])
                #         subset_data = data[subset_columns]
                #
                #         icwise_claim_settlement_statistics_l2 = go.Figure(data=[go.Table(
                #             header=dict(values=subset_data.columns,
                #                         fill_color='#1E90FF', line_color='black',
                #                         font=dict(color='White', family="Arial", size=15),
                #                         align='center'),
                #             cells=dict(values=subset_data.values.T,
                #                        fill_color='white', line_color='black',
                #                        align='center'))
                #         ])
                #         icwise_claim_settlement_statistics_l2 = plot(icwise_claim_settlement_statistics_l2,
                #                                                      output_type='div', config=config)
                #         if len(data.columns) > (num_sets * columns_per_set) + 1:
                #             remaining_columns = ['index'] + list(data.columns[(num_sets * columns_per_set) + 1:])
                #             remaining_data = data[remaining_columns]
                #
                #             icwise_claim_settlement_statistics_l3 = go.Figure(data=[go.Table(
                #                 header=dict(values=remaining_data.columns,
                #                             fill_color='#1E90FF', line_color='black',
                #                             font=dict(color='White', family="Arial", size=15),
                #                             align='center'),
                #                 cells=dict(values=remaining_data.values.T,
                #                            fill_color='white', line_color='black',
                #                            align='center'))
                #             ])
                #             icwise_claim_settlement_statistics_l3 = plot(icwise_claim_settlement_statistics_l3, output_type='div', config=config)
                #
                #


                ####################  icwise outstanding analysis

                out['extra'] = out['extra'].replace('', np.nan)
                out['SubStatus'] = np.where((out['extra'].isnull), out['head'], out['extra'])
                out['SubStatus'] = np.where((out['extra'].isnull()), out['head'], out['extra'])

                outstanding_analysis_icwise = pd.crosstab(out['SubStatus'], out['IC_NAME'])

                outstanding_analysis_icwise.reset_index(inplace=True)
                outstanding_analysis_icwise['SubStatus'] = (outstanding_analysis_icwise['SubStatus']).str.strip()
                icwise_outstanding_analysis = outstanding_analysis_icwise.T
                icwise_outstanding_analysis.columns = list(icwise_outstanding_analysis.loc['SubStatus'])
                icwise_outstanding_analysis.drop('SubStatus', axis=0, inplace=True)
                icwise_outstanding_analysis.reset_index(inplace=True)
                l4 = list(icwise_outstanding_analysis.columns)
                l4.remove('IC_NAME')

                icwise_outstanding_analysis2 = icwise_outstanding_analysis.T.reset_index()
                icwise_outstanding_analysis2.columns = [''] * len(icwise_outstanding_analysis2.columns)
                icwise_outstanding_analysis2.columns = list(icwise_outstanding_analysis2.iloc[0])
                icwise_outstanding_analysis2.drop(0, inplace=True)

                data = icwise_outstanding_analysis2
                columns_per_set = 7
                num_sets = (len(data.columns) - 1) // columns_per_set

                table_figures = []

                if len(data.columns) < 7:
                    subset_columns = ['IC_NAME'] + list(data.columns[1:])
                    subset_data = data[subset_columns]
                    icwise_outstanding_analysis2_l1 = go.Figure(data=[go.Table(
                        header=dict(values=subset_data.columns,
                                    fill_color='#1E90FF', line_color='black',
                                    font=dict(color='White', family="Arial", size=15),
                                    align='center'),
                        cells=dict(values=subset_data.values.T,
                                   fill_color='white', line_color='black',
                                   align='center'))
                    ])

                    icwise_outstanding_analysis2_l1 = plot(icwise_outstanding_analysis2_l1,
                                                                 output_type='div', config=config)
                else:
                    for i in range(num_sets):
                        start_idx = i * columns_per_set
                        end_idx = start_idx + columns_per_set

                        subset_columns = ['IC_NAME'] + list(data.columns[start_idx + 1:end_idx + 1])
                        subset_data = data[subset_columns]

                        icwise_outstanding_analysis2_l2 = go.Figure(data=[go.Table(
                            header=dict(values=subset_data.columns,
                                        fill_color='#1E90FF', line_color='black',
                                        font=dict(color='White', family="Arial", size=15),
                                        align='center'),
                            cells=dict(values=subset_data.values.T,
                                       fill_color='white', line_color='black',
                                       align='center'))
                        ])
                        icwise_outstanding_analysis2_l2 = plot(icwise_outstanding_analysis2_l2,
                                                                     output_type='div', config=config)

                        if len(data.columns) > (num_sets * columns_per_set) + 1:
                            remaining_columns = ['IC_NAME'] + list(data.columns[(num_sets * columns_per_set) + 1:])
                            remaining_data = data[remaining_columns]

                            icwise_outstanding_analysis2_l3 = go.Figure(data=[go.Table(
                                header=dict(values=remaining_data.columns,
                                            fill_color='#1E90FF', line_color='black',
                                            font=dict(color='White', family="Arial", size=15),
                                            align='center'),
                                cells=dict(values=remaining_data.values.T,
                                           fill_color='white', line_color='black',
                                           align='center'))
                            ])
                        icwise_outstanding_analysis2_l3 = plot(icwise_outstanding_analysis2_l3,
                                                                     output_type='div', config=config)

                icwise_outstanding_analysis1 = make_subplots()
                # Add bar traces to the subplot figure
                for y in l4:
                    icwise_outstanding_analysis1.add_trace(
                        go.Bar(x=icwise_outstanding_analysis.iloc[:, 0],
                               y=icwise_outstanding_analysis[y], name=y))

                # Update layout
                icwise_outstanding_analysis1.update_layout(
                    title={'text': '', 'y': 0.9, 'x': 1, 'xanchor': 'center', 'yanchor': 'top'})
                icwise_outstanding_analysis1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))

                icwise_outstanding_analysis1.update_layout(height=600)
                icwise_outstanding_analysis1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                icwise_outstanding_analysis1.update_layout(plot_bgcolor="white")





  ######################### relatin wise lives

                Premium_Lives = pd.merge(lives_premium, relation_master, how='left', left_on='IP_Relation_Code',
                                         right_on='RELATION').drop(columns=['id', 'RELATION'])
                relation_wise_lives = Premium_Lives.pivot_table(index=['STD_RELATION'], values=['Lives'], columns=['IC_NAME'],
                                                                aggfunc='sum')

                relation_wise_lives_fig1 = relation_wise_lives.T.reset_index()

                names = list(relation_wise_lives_fig1.columns)[1:]

                relation_wise_lives_fig2 = px.bar(relation_wise_lives_fig1, x="IC_NAME", y=names, title="Relation wise Lives")

                relation_wise_lives_fig2.update_layout(
                    title={'text': "RELATION WISE ANALYSIS", 'y': 0.9, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top'}, xaxis_title='X-axis')

                relation_wise_lives_fig2.update_layout(title=dict(x=0.5, font=dict(color='black', size=30)))
                relation_wise_lives_fig2.update_layout(plot_bgcolor="white")

                relation_wise_lives_fig3 = Premium_Lives.pivot_table(index=['STD_RELATION'], values=['Lives'],
                                                                     columns=['IC_NAME'], aggfunc='sum')
                relation_wise_lives_fig3.columns = relation_wise_lives_fig3.columns.droplevel(0)  # remove amount
                relation_wise_lives_fig3.columns.name = None  # remove categories
                relation_wise_lives_fig3 = relation_wise_lives_fig3.reset_index()

                relation_wise_lives_fig4 = go.Figure(data=[go.Table(
                    header=dict(values=relation_wise_lives_fig3.columns,
                                fill_color='lightcyan', line_color='black', font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=relation_wise_lives_fig3.values.T,
                               fill_color='white', line_color='black',
                               align='center'))])
                relation_wise_lives_fig4.update_layout(width=2000, height=500, title='<b><b>')

 ######################### age band wise lives

                age_band_lives = Premium_Lives.pivot_table(index=['age_band'], values=['Lives'], columns=['IC_NAME'],
                                                           aggfunc='sum')
                age_band_lives_fig1 = age_band_lives.T.reset_index()
                names = list(age_band_lives_fig1.columns)[1:]
                age_band_lives_fig2 = px.bar(age_band_lives_fig1, x="IC_NAME", y=names, title="AGE BAND WISE LIVES")

                age_band_lives_fig2.update_layout(
                    title={'text': "AGE BAND WISE ANALYSIS", 'y': 0.9, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top'},
                    xaxis_title='X-axis', )

                age_band_lives_fig2.update_layout(title=dict(x=0.5, font=dict(color='black', size=30)))
                age_band_lives_fig2.update_layout(plot_bgcolor="white")


                age_band_lives_fig3 = Premium_Lives.pivot_table(index=['age_band'], values=['Lives'],
                                                                columns=['IC_NAME'], aggfunc='sum')
                age_band_lives_fig3.columns = age_band_lives_fig3.columns.droplevel(0)  # remove amount
                age_band_lives_fig3.columns.name = None  # remove categories
                age_band_lives_fig3 = age_band_lives_fig3.reset_index()

                age_band_lives_fig4 = go.Figure(data=[go.Table(
                    header=dict(values=age_band_lives_fig3.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=age_band_lives_fig3.values.T,
                               fill_color='white', line_color='black',
                               align='center'))])


#############   tat wise outstanding analysis

                from datetime import date
                out['As_on_date']=date.today()
                out['last_document_received_date'] = pd.to_datetime(out['last_document_received_date'], format='%y-%m-%d')
                out['last_document_received_date'] =out['last_document_received_date'].dt.date
                out['TAT'] = out['As_on_date'] - out['last_document_received_date']
                out['TAT'].replace([np.inf, -np.inf], 0, inplace=True)
                out['TAT'].replace('Nan', 0, inplace=True)


                #out['TAT']= out['TAT'].str.extract('(\d+)', expand=False).astype(int)

                # out['TAT'] = out['TAT'].astype('timedelta64[D]').astype(int)


                conditions1 = [(out['TAT'] <= '30 Days'),
                               (out['TAT'] > '30 Days') & (out['TAT'] <= '60 Days'),
                               (out['TAT'] >= '61 Days') & (out['TAT'] <= '90 Days'),
                               (out['TAT'] >= '91 Days') & (out['TAT'] <= '180 Days'),
                               (out['TAT'] > '180 Days')]

                values = ['0-30 Days', '31-60 Days', '61-90 Days', '91-180 Days', 'Above 180 Days']

                out['tat_band'] = np.select(conditions1, values)


                outstanding_tat = pd.crosstab(out['tat_band'], out['IC_NAME'])
                outstanding_tat.reset_index(inplace=True)

                outstanding_tat_fig1 = pd.crosstab(out['ActualLossType'], out['tat_band'])
                outstanding_tat_fig1.reset_index(inplace=True)
                names = list(outstanding_tat_fig1.columns)[1:]

                outstanding_tat_fig1 = px.bar(outstanding_tat_fig1, x="ActualLossType", y=names,
                                              title="Relation wise Lives")

                outstanding_tat_fig1.update_layout(
                    title={'text': "OUTSTANDING TAT ANALYSIS", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'}, xaxis_title='X-axis', )

                outstanding_tat_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=30)))

                outstanding_tat_fig1.update_traces(width=0.20)
                outstanding_tat_fig1.update_layout(plot_bgcolor="white")

                #max_lengths = [outstanding_tat[col].astype(str).apply(len).max() for col in outstanding_tat.columns]

                outstanding_tat_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=outstanding_tat.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=outstanding_tat.values.T,
                               fill_color='white', line_color='black',
                               align='center'))])

###############  AGE BAND WISE PAID AMOUNT

###############  age_wise_cashless_paid_amount_analysis ###############

                age_wise_cashless_paid_amount_analysis = paid[paid['ActualLossType'] == 'Cash Less']
                age_wise_non_cashless_paid_amount_analysis = paid[paid['ActualLossType'] == 'Non Cash Less']

                age_wise_cashless_paid_amount_analysis1 = age_wise_cashless_paid_amount_analysis.fillna(0).pivot_table(
                    index=['age_band_rev'],
                    values=['CONSIDER_COUNT'],
                    columns=['ActualLossType'], aggfunc='sum')

                age_wise_cashless_paid_amount_analysis2 = age_wise_cashless_paid_amount_analysis.fillna(0).pivot_table(
                    index=['age_band_rev'],
                    values=['SettledAmt'],
                    columns=['ActualLossType'], aggfunc='sum')

                age_wise_cashless_paid_amount_analysis1.columns = age_wise_cashless_paid_amount_analysis1.columns.droplevel(
                    0)  # remove amount
                age_wise_cashless_paid_amount_analysis1.columns.name = None  # remove categories
                age_wise_cashless_paid_amount_analysis1 = age_wise_cashless_paid_amount_analysis1.reset_index()
                age_wise_cashless_paid_amount_analysis1.columns = ['AGE_BAND', 'cashless_claims']

                age_wise_cashless_paid_amount_analysis2.columns = age_wise_cashless_paid_amount_analysis2.columns.droplevel(
                    0)  # remove amount
                age_wise_cashless_paid_amount_analysis2.columns.name = None  # remove categories
                age_wise_cashless_paid_amount_analysis2 = age_wise_cashless_paid_amount_analysis2.reset_index()
                age_wise_cashless_paid_amount_analysis2.columns = ['AGE_BAND', 'cashless_paidamt']

                age_wise_cashless_paid_amount_analysis = pd.merge(age_wise_cashless_paid_amount_analysis1,
                                                                  age_wise_cashless_paid_amount_analysis2,
                                                                  on=['AGE_BAND'])

                age_wise_cashless_paid_amount_analysis = age_wise_cashless_paid_amount_analysis[['AGE_BAND', 'cashless_paidamt']]

               # age_wise_cashless_paid_amount_analysis['cashless_paidamt'] =age_wise_cashless_paid_amount_analysis['cashless_paidamt'].apply(lambda x: format_currency(x))

                #
                # age_wise_cashless_paid_amount_analysis = go.Figure(data=go.Bar(x=age_wise_cashless_paid_amount_analysis['AGE_BAND'],
                #                             y=age_wise_cashless_paid_amount_analysis['cashless_paidamt'],text=age_wise_cashless_paid_amount_analysis['cashless_paidamt']))
                #
                # age_wise_cashless_paid_amount_analysis.update_xaxes(type='category')
                #
                # age_wise_cashless_paid_amount_analysis.update_layout(plot_bgcolor="white")


                age_wise_cashless_paid_amount_analysis1 = age_wise_cashless_paid_amount_analysis[['AGE_BAND', 'cashless_paidamt']]

                import locale
                age_wise_cashless_paid_amount_analysis = px.bar(age_wise_cashless_paid_amount_analysis1, x='AGE_BAND', y='cashless_paidamt', text="cashless_paidamt")
                formatted_values = [f"₹{locale.format_string('%.0f', val, grouping=True)}" for val in age_wise_cashless_paid_amount_analysis1['cashless_paidamt']]
                age_wise_cashless_paid_amount_analysis.update_traces(text=formatted_values,textfont=dict(family="Arial", size=10, color="black"),textposition='outside')

                age_wise_cashless_paid_amount_analysis.update_xaxes(type='category')

                age_wise_cashless_paid_amount_analysis.update_layout(
                    title={'text': "CASHLESS PAID AMOUNT BY AGE BAND", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'}, xaxis_title='X-axis', )




                age_wise_cashless_paid_amount_analysis.update_layout(plot_bgcolor="white")


                ############  AGE WISE NON CASHLESS PAID AMOUNT ANALYSIS #########


                age_wise_non_cashless_paid_amount_analysis1 = age_wise_non_cashless_paid_amount_analysis.fillna(
                    0).pivot_table(
                    index=['age_band_rev'],
                    values=['CONSIDER_COUNT'],
                    columns=['ActualLossType'], aggfunc='sum')

                age_wise_non_cashless_paid_amount_analysis2 = age_wise_non_cashless_paid_amount_analysis.fillna(
                    0).pivot_table(
                    index=['age_band_rev'],
                    values=['SettledAmt'],
                    columns=['ActualLossType'], aggfunc='sum')

                age_wise_non_cashless_paid_amount_analysis1.columns = age_wise_non_cashless_paid_amount_analysis1.columns.droplevel(
                    0)  # remove amount
                age_wise_non_cashless_paid_amount_analysis1.columns.name = None  # remove categories
                age_wise_non_cashless_paid_amount_analysis1 = age_wise_non_cashless_paid_amount_analysis1.reset_index()
                age_wise_non_cashless_paid_amount_analysis1.columns = ['AGE_BAND', 'cashless_claims']

                age_wise_non_cashless_paid_amount_analysis2.columns = age_wise_non_cashless_paid_amount_analysis2.columns.droplevel(
                    0)  # remove amount
                age_wise_non_cashless_paid_amount_analysis2.columns.name = None  # remove categories
                age_wise_non_cashless_paid_amount_analysis2 = age_wise_non_cashless_paid_amount_analysis2.reset_index()
                age_wise_non_cashless_paid_amount_analysis2.columns = ['AGE_BAND', 'cashless_paidamt']

                age_wise_non_cashless_paid_amount_analysis = pd.merge(age_wise_non_cashless_paid_amount_analysis1,
                                                                      age_wise_non_cashless_paid_amount_analysis2,
                                                                      on=['AGE_BAND'])

                age_wise_non_cashless_paid_amount_analysis1 = age_wise_non_cashless_paid_amount_analysis[['AGE_BAND', 'cashless_paidamt']]
                age_wise_non_cashless_paid_amount_analysis = px.bar(age_wise_non_cashless_paid_amount_analysis1, x='AGE_BAND',
                                                                y='cashless_paidamt', text="cashless_paidamt")
                formatted_values = [f"₹{locale.format_string('%.0f', val, grouping=True)}" for val in age_wise_non_cashless_paid_amount_analysis1['cashless_paidamt']]
                age_wise_non_cashless_paid_amount_analysis.update_traces(text=formatted_values,textfont=dict(family="Arial", size=10, color="black"),textposition='outside')

                age_wise_non_cashless_paid_amount_analysis.update_layout(
                    title={'text': "NON-CASHLESS PAID AMOUNT BY AGE BAND", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'}, xaxis_title='X-axis', )

                age_wise_non_cashless_paid_amount_analysis.update_xaxes(type='category')

                age_wise_non_cashless_paid_amount_analysis.update_layout(plot_bgcolor="white")

############  TOTAL PAID AMOUNT BY AGE BAND  #########

                total_paid_amount_by_age_band = paid.fillna(
                    0).pivot_table(
                    index=['age_band_rev'],
                    values=['SettledAmt'],
                    columns=['ActualLossType'], aggfunc='sum')

                total_paid_amount_by_age_band.columns = total_paid_amount_by_age_band.columns.droplevel(
                    0)  # remove amount
                total_paid_amount_by_age_band.columns.name = None  # remove categories
                total_paid_amount_by_age_band = total_paid_amount_by_age_band.reset_index()
                total_paid_amount_by_age_band.columns = ['AGE_BAND', 'cashless_paidamt', 'Non_cashless_paidamt']
                total_paid_amount_by_age_band['total_paidamt'] = total_paid_amount_by_age_band['cashless_paidamt'].fillna(
                    0) + total_paid_amount_by_age_band['Non_cashless_paidamt'].fillna(0)
                total_paid_amount_by_age_band=total_paid_amount_by_age_band[['AGE_BAND','total_paidamt']]


###############  treatement type icwise

                treatment_type_paid_claim_icwise = paid.fillna(0).pivot_table(index=['treatmenttype'],
                                                                              values=['CONSIDER_COUNT'],
                                                                              columns=['IC_NAME'],
                                                                              aggfunc='sum').reset_index().rename_axis(None)
                treatment_type_paid_claim_icwise.columns = treatment_type_paid_claim_icwise.columns.droplevel(0)
                treatment_type_paid_claim_icwise.columns.name = None
                treatment_type_paid_claim_icwise1 = treatment_type_paid_claim_icwise.T
                treatment_type_paid_claim_icwise1.columns = list(treatment_type_paid_claim_icwise1.loc[''])
                treatment_type_paid_claim_icwise1.drop('', axis=0, inplace=True)
                treatment_type_paid_claim_icwise1.reset_index(inplace=True)

                l5 = list(treatment_type_paid_claim_icwise1.columns)
                l5.remove('index')

                # Create subplot figure
                treatment_type_paid_claim_icwise_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l5:
                    treatment_type_paid_claim_icwise_fig1.add_trace(
                        go.Bar(x=treatment_type_paid_claim_icwise1['index'], y=treatment_type_paid_claim_icwise1[y],
                               name=y),

                    )
                    # Update layout
                treatment_type_paid_claim_icwise_fig1.update_layout(
                    title={'text': "TREATMENT TYPE WISE PAID CLAIM ANALYSIS", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'}, yaxis_title='COUNT' )

                treatment_type_paid_claim_icwise_fig1.update_layout(
                    title=dict(x=0.5, font=dict(color='black', size=30)))


                treatment_type_paid_claim_icwise_fig1.update_layout(plot_bgcolor="white")


                # figure for plotly
                treatment_type_paid_claim_icwise_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=treatment_type_paid_claim_icwise.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=treatment_type_paid_claim_icwise.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])


                treatment_type_paid_claim_icwise_fig2.update_layout(width=2000, height=600, title='')

 ###############  treatement  amt wise type icwise

                treatment_type_paid_amt_icwise = paid.fillna(0).pivot_table(index=['treatmenttype'],
                                                                            values=['SettledAmt'], columns=['IC_NAME'],
                                                                            aggfunc='sum').reset_index().rename_axis( None)
                treatment_type_paid_amt_icwise.columns = treatment_type_paid_amt_icwise.columns.droplevel(0)  # remove amount
                treatment_type_paid_amt_icwise.columns.name = None
                # treatment_type_paid_amt_icwise['Total']= treatment_type_paid_amt_icwise.sum(axis=1)
                # treatment_type_paid_amt_icwise['Total%']=((treatment_type_paid_amt_icwise['Total']/treatment_type_paid_amt_icwise['Total'].sum())*100)
                treatment_type_paid_amt_icwise.loc['Total'] = treatment_type_paid_amt_icwise.sum(numeric_only=True,axis=0)

                treatment_type_paid_amt_icwise1 = treatment_type_paid_amt_icwise.T
                treatment_type_paid_amt_icwise1.columns = list(treatment_type_paid_amt_icwise1.loc[''])
                treatment_type_paid_amt_icwise1.drop('', axis=0, inplace=True)
                treatment_type_paid_amt_icwise1.reset_index(inplace=True)

                l6 = list(treatment_type_paid_amt_icwise1.columns)
                l6.remove('index')

                # Create subplot figure
                treatment_type_paid_amt_icwise_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l6:
                    treatment_type_paid_amt_icwise_fig1.add_trace(
                        go.Bar(x=treatment_type_paid_amt_icwise1['index'], y=treatment_type_paid_amt_icwise1[y],
                               name=y),

                    )

                # Update layout

                treatment_type_paid_amt_icwise_fig1.update_layout(
                    title={'text': "TREATMENT TYPE WISE PAID AMOUNT ANALYSIS", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'}, xaxis_title='X-axis',
                )
                treatment_type_paid_amt_icwise_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))



                treatment_type_paid_amt_icwise_fig1.update_layout(plot_bgcolor="white")



                from babel.numbers import format_currency

                def format_dataframe_currency(dataframe):
                    numeric_cols = dataframe.select_dtypes(include='number').columns
                    for col in numeric_cols:
                        dataframe[col] = dataframe[col].apply(
                            lambda x: format_currency(x, 'INR', locale='en_IN') if pd.notnull(
                                x) else np.nan).str.replace('.00', '')
                    return dataframe

                treatment_type_paid_amt_icwise1 = format_dataframe_currency(treatment_type_paid_amt_icwise)



                treatment_type_paid_amt_icwise_fig2 = go.Figure(data=[go.Table(
                        header=dict(values=treatment_type_paid_amt_icwise1.columns,
                                    fill_color='lightcyan', line_color='black',
                                    font=dict(color='black', family="Aerial", size=15),
                                    align='center'),
                        cells=dict(values=treatment_type_paid_amt_icwise1.values.T,
                                   fill_color='white', line_color='black',
                                   align='center'))
                    ])
                treatment_type_paid_amt_icwise_fig2.update_layout(width=2000, height=600, title='<b><b>')


####### TOP 10 DISEASES WISE ANALYSIS

                top10disease_paidamt1 = paid.sort_values('SettledAmt', axis=0, ascending=False)['new_disease_category']
                top10disease_paidamt1 = top10disease_paidamt1.drop_duplicates().head(10)

                top10disease_paidamt2 = pd.merge(paid, top10disease_paidamt1, how='right', on='new_disease_category')


                top10disease_paidamt = top10disease_paidamt2.fillna(0).pivot_table(index=['new_disease_category'], values=['CONSIDER_COUNT','SettledAmt'], columns=['IPD_OPD'], aggfunc='sum')

                m_idx = top10disease_paidamt.columns

                idx = [f'{i}_{j}' for i, j in m_idx]

                top10disease_paidamt.columns = top10disease_paidamt.columns.droplevel(0)  # remove amount
                top10disease_paidamt.columns = idx
                top10disease_paidamt = top10disease_paidamt.reset_index()



                desired_columns1 = ['new_disease_category', 'CONSIDER_COUNT_IPD', 'SettledAmt_IPD', 'CONSIDER_COUNT_OPD', 'SettledAmt_OPD']
                # desired_columns = ['new_disease_category', 'IPD', 'OPD', 'IPD','OPD']

                top10disease_paidamt = top10disease_paidamt.reindex(columns=desired_columns1, fill_value=0)

                top10disease_paidamt = top10disease_paidamt.rename(columns={ 'CONSIDER_COUNT_IPD':'claims_IPD', 'SettledAmt_IPD':'PaidAmt_IPD', 'CONSIDER_COUNT_OPD':'claims_OPD','SettledAmt_OPD': 'PaidAmt_OPD'})


                top10disease_paidamt['Paid_claims'] = top10disease_paidamt['claims_IPD'].fillna(0) + \
                                                      top10disease_paidamt['claims_OPD'].fillna(0)
                top10disease_paidamt.loc['Total'] = top10disease_paidamt.sum(numeric_only=True, axis=0)




                top10disease_paidamt1 = top10disease_paidamt[['new_disease_category', 'PaidAmt_IPD', 'PaidAmt_OPD']]
                l1 = list(top10disease_paidamt1.columns)
                l1.remove('new_disease_category')



                # Create subplot figure
                top10disease_paidamt_fig2 = make_subplots(specs=[[{"secondary_y": True}]])

                # Add bar traces to the subplot figure
                for y in l1:
                    top10disease_paidamt_fig2.add_trace(
                        go.Bar(x=top10disease_paidamt1['new_disease_category'], y=top10disease_paidamt[y], name=y),
                        secondary_y=False

                    )

                    top10disease_paidamt_fig2.add_trace(
                        go.Scatter(x=top10disease_paidamt['new_disease_category'], y=top10disease_paidamt['Paid_claims'], name='Paid_claims'), secondary_y=True
                    )
                top10disease_paidamt_fig2.update_yaxes(title_text="Paid Amt", range=[0, 50000000], secondary_y=False)

                top10disease_paidamt_fig2.update_yaxes(title_text="Paid Claims", secondary_y=True, range=[0, 1000])

                # set the x-axis title

                # Update layout
                top10disease_paidamt_fig2.update_layout(
                    title={'text': "TOP 10 DISEASE WISE ANALYSIS", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                )
                top10disease_paidamt_fig2.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                top10disease_paidamt_fig2.update_layout(plot_bgcolor="white")

                # Show plot

                # figure for plotly
                top10disease_paidamt_fig1 = go.Figure(data=[go.Table(
                    header=dict(values=top10disease_paidamt.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=top10disease_paidamt.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                top10disease_paidamt_fig1.update_layout(width=2000, height=600, title='<b><b>')




                ############   one by age band abnd si band analysis
                conditions1 = [(paid['sumins'] > 0) & (paid['sumins'] <= 100000),
                               (paid['sumins'] > 100000) & (paid['sumins'] <= 300000),
                               (paid['sumins'] > 300000) & (paid['sumins'] <= 500000),
                               (paid['sumins'] > 500000) & (paid['sumins'] <= 700000),
                               (paid['sumins'] > 700000) & (paid['sumins'] <= 1000000),
                               (paid['sumins'] >= 1000000) & (paid['sumins'] <= 1500000)]

                conditions2 = [(crs['sumins'] > 0) & (crs['sumins'] <= 100000),
                               (crs['sumins'] > 100000) & (crs['sumins'] <= 300000),
                               (crs['sumins'] > 300000) & (crs['sumins'] <= 500000),
                               (crs['sumins'] > 500000) & (crs['sumins'] <= 700000),
                               (crs['sumins'] > 700000) & (crs['sumins'] <= 1000000),
                               (crs['sumins'] >= 1000000) & (crs['sumins'] <= 1500000)]

                conditions3 = [(out['sumins'] > 0) & (out['sumins'] <= 100000),
                               (out['sumins'] > 100000) & (out['sumins'] <= 300000),
                               (out['sumins'] > 300000) & (out['sumins'] <= 500000),
                               (out['sumins'] > 500000) & (out['sumins'] <= 700000),
                               (out['sumins'] > 700000) & (out['sumins'] <= 1000000),
                               (out['sumins'] >= 1000000) & (out['sumins'] <= 1500000)]

                # create a list of the values we want to assign for each condition
                values = ['0-1Lakh', '1-3Lakh', '3-5Lakh', '5-7Lakh', '7-10Lakh', '10-15Lakh']

                # create a new column and use np.select to assign values to it using our lists as arguments
                paid['Si_band'] = np.select(conditions1, values)

                crs['Si_band'] = np.select(conditions2, values)

                out['Si_band'] = np.select(conditions3, values)

                age_wise_paid_amount_analysis = paid.fillna(0).pivot_table(index=['age_band_rev'],
                                                                           values=(['SettledAmt', 'CONSIDER_COUNT']),
                                                                           columns=['ActualLossType'], aggfunc='sum')
                m_idx1 = age_wise_paid_amount_analysis.columns

                idx1= [f'{i}_{j}' for i, j in m_idx1]

                age_wise_paid_amount_analysis.columns = age_wise_paid_amount_analysis.columns.droplevel(0)  # remove amount
                age_wise_paid_amount_analysis.columns = idx1
                age_wise_paid_amount_analysis = age_wise_paid_amount_analysis.reset_index()

                desired_columns2 = ['age_band_rev', 'CONSIDER_COUNT_Cash Less', 'CONSIDER_COUNT_Non Cash Less', 'SettledAmt_Cash Less', 'SettledAmt_Non Cash Less']

                age_wise_paid_amount_analysis = age_wise_paid_amount_analysis.reindex(columns=desired_columns2, fill_value=0)

                age_wise_paid_amount_analysis = age_wise_paid_amount_analysis.rename(columns={ 'CONSIDER_COUNT_Cash Less':'cashless_claims', 'CONSIDER_COUNT_Non Cash Less':'Non_cashless_claims', 'SettledAmt_Cash Less':'cashless_paidamt','SettledAmt_Non Cash Less': 'Non_cashless_paidamt'})

                # Display the resulting DataFrame



               #  d = {'Cash Less': ['cashless_claims', 'cashless_paidamt'],'Non Cash Less':['Non_cashless_claims','Non_cashless_paidamt']}
               #
               #  age_wise_paid_amount_analysis1.rename(columns=lambda c: d[c].pop(0) if c in d.keys() else c)
               #  age_wise_paid_amount_analysis2 = pd.DataFrame(columns=['age_band_rev', 'Cash Less', 'Non Cash Less',
               #                                           'Cash Less', 'Non Cash Less'])
               #
               # # age_wise_paid_amount_analysis3=pd.concat([age_wise_paid_amount_analysis2,age_wise_paid_amount_analysis1])
               #
               #  #age_wise_paid_amount_analysis3=pd.merge(age_wise_paid_amount_analysis2,age_wise_paid_amount_analysis1,on=['age_band_rev'],how='left')
               #
               #
               #  age_wise_paid_amount_analysis.columns = ['AGE_BAND', 'cashless_claims', 'Non_cashless_claims',
               #                                           'cashless_paidamt', 'Non_cashless_paidamt']


                age_wise_paid_amount_analysis['cashless_claims']=age_wise_paid_amount_analysis['cashless_claims'].fillna(0).astype(int)
                age_wise_paid_amount_analysis['Non_cashless_claims']=age_wise_paid_amount_analysis['Non_cashless_claims'].fillna(0).astype(int)
                age_wise_paid_amount_analysis['cashless_paidamt']=age_wise_paid_amount_analysis['cashless_paidamt'].fillna(0).astype(int)
                age_wise_paid_amount_analysis['Non_cashless_paidamt']=age_wise_paid_amount_analysis['Non_cashless_paidamt'].fillna(0).astype(int)

                age_wise_paid_amount_analysis['claim_paid'] = age_wise_paid_amount_analysis['cashless_claims'] + age_wise_paid_amount_analysis['Non_cashless_claims']
                age_wise_paid_amount_analysis['paid_amt'] = age_wise_paid_amount_analysis['cashless_paidamt'] + age_wise_paid_amount_analysis['Non_cashless_paidamt']

                claim_paid_age_band = paid.groupby(['age_band_rev'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                    {'count': sum})
                claim_paid_age_band.rename(columns={'count': 'claim_paid_age_band'}, inplace=True)

                claim_crs_age_band = crs.groupby(['age_band_rev'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                    {'count': sum})
                claim_crs_age_band.rename(columns={'count': 'claim_crs_age_band'}, inplace=True)

                claim_out_age_band = out.groupby(['age_band_rev'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                    {'count': sum})
                claim_out_age_band.rename(columns={'count': 'claim_out_age_band'}, inplace=True)

                age_bandwise_incidence_rate1 = pd.merge(claim_crs_age_band, claim_paid_age_band, how='right',
                                                        on=['age_band_rev'])
                age_bandwise_incidence_rate2 = pd.merge(age_bandwise_incidence_rate1, claim_out_age_band, how='left',
                                                        on=['age_band_rev'])

                age_bandwise_incidence_rate3 = lives_premium[['age_band', 'Lives']]
                age_bandwise_incidence_rate3 = age_bandwise_incidence_rate3.groupby(['age_band'])['Lives'].sum()

                age_bandwise_incidence_rate = pd.merge(age_bandwise_incidence_rate2, age_bandwise_incidence_rate3,
                                                       how='left', left_on=['age_band_rev'], right_on=['age_band'])

                age_bandwise_incidence_rate['reported_claims'] = age_bandwise_incidence_rate[
                                                                     'claim_crs_age_band'].fillna(0) + \
                                                                 age_bandwise_incidence_rate[
                                                                     'claim_paid_age_band'].fillna(0) + \
                                                                 age_bandwise_incidence_rate[
                                                                     'claim_out_age_band'].fillna(0)

                age_bandwise_incidence_rate['IR'] = age_bandwise_incidence_rate['reported_claims'] / \
                                                    age_bandwise_incidence_rate['Lives']
                age_bandwise_incidence_rate.loc['Total'] = age_bandwise_incidence_rate.sum(numeric_only=True, axis=0)

                age_bandwise_incidence_rate1 = age_bandwise_incidence_rate[['age_band_rev', 'IR']]

                age_bandwise_incidence_rate_fig1 = px.bar(age_bandwise_incidence_rate1, x='age_band_rev',
                                                         y=age_bandwise_incidence_rate1['IR'] * 100,
                                                         text="IR")

                formatted_values = [f"{val:.2%}" for val in
                                    age_bandwise_incidence_rate1['IR']]  # Format as percentage with 2 decimal places
                age_bandwise_incidence_rate_fig1.update_traces(text=formatted_values,
                                                              textfont=dict(family="Arial", size=10, color="black"),
                                                              textposition='outside')

                age_bandwise_incidence_rate_fig1.update_xaxes(type='category')
                # fig.update_xaxes(range=[0, 3])
                age_bandwise_incidence_rate_fig1.update_layout(
                    title={'text': "INCIDENCE RATE BY AGE BAND", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                    xaxis_title='X-axis'
                )
                age_bandwise_incidence_rate_fig1.update_layout(plot_bgcolor="white",xaxis_title='AGE BAND',yaxis_title='IR')

                ###############   IR BY AGE SI BAND ####################

                claim_paid_si_band = paid.groupby(['Si_band'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                    {'count': sum})
                claim_paid_si_band.rename(columns={'count': 'claim_paid_si_band'}, inplace=True)


                claim_crs_si_band = crs.groupby(['Si_band'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                    {'count': sum})
                claim_crs_si_band.rename(columns={'count': 'claim_crs_si_band'}, inplace=True)

                claim_out_si_band = out.groupby(['Si_band'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                    {'count': sum})
                claim_out_si_band.rename(columns={'count': 'claim_out_si_band'}, inplace=True)


                si_bandwise_incidence_rate1 = pd.merge(claim_crs_si_band, claim_paid_si_band, how='right',
                                                       on=['Si_band'])
                si_bandwise_incidence_rate = pd.merge(si_bandwise_incidence_rate1, claim_out_si_band, how='left',
                                                      on=['Si_band'])

                si_bandwise_incidence_rate['reported_claims'] = si_bandwise_incidence_rate['claim_crs_si_band'].fillna(
                    0) + si_bandwise_incidence_rate['claim_paid_si_band'].fillna(0) + si_bandwise_incidence_rate[
                                                                    'claim_out_si_band'].fillna(0)
                si_bandwise_incidence_rate['Lives'] = Total_Lives
                si_bandwise_incidence_rate['IR'] = si_bandwise_incidence_rate['reported_claims'] / \
                                                   si_bandwise_incidence_rate['Lives']

                si_bandwise_incidence_rate.loc['Total'] = si_bandwise_incidence_rate.sum(numeric_only=True, axis=0)

                si_bandwise_incidence_rate1 = si_bandwise_incidence_rate[['Si_band', 'IR']]

                si_bandwise_incidence_rate_fig1 = px.bar(si_bandwise_incidence_rate1, x='Si_band',
                                                             y=si_bandwise_incidence_rate1['IR'] * 100,
                                                             text="IR")

                formatted_values = [f"{val:.2%}" for val in
                                    si_bandwise_incidence_rate1['IR']]  # Format as percentage with 2 decimal places
                si_bandwise_incidence_rate_fig1.update_traces(text=formatted_values,
                                                                  textfont=dict(family="Arial", size=10, color="black"),
                                                                  textposition='outside')

                si_bandwise_incidence_rate_fig1.update_xaxes(type='category')
                # fig.update_xaxes(range=[0, 3])
                si_bandwise_incidence_rate_fig1.update_layout(
                    title={'text': "INCIDENCE RATE BY SUM INSURED BAND", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                    xaxis_title='X-axis'
                )
                si_bandwise_incidence_rate_fig1.update_layout(plot_bgcolor="white",xaxis_title='SI BAND',yaxis_title='IR')


                ##################   IR BY PAID AMOUNT BAND ################

                claim_paid_amount_band = paid.groupby(['amount_band'], sort=False, as_index=False)[
                    'CONSIDER_COUNT'].agg({'count': sum})
                claim_paid_amount_band.rename(columns={'count': 'claim_paid_amount_band'}, inplace=True)
                amount_bandwise_incidence_rate = claim_paid_amount_band.copy()

                amount_bandwise_incidence_rate['Lives'] = Total_Lives
                amount_bandwise_incidence_rate['IR'] = amount_bandwise_incidence_rate['claim_paid_amount_band'] / \
                                                       amount_bandwise_incidence_rate['Lives']
                amount_bandwise_incidence_rate.loc['Total'] = amount_bandwise_incidence_rate.sum(numeric_only=True,axis=0)

                amount_bandwise_incidence_rate1 = amount_bandwise_incidence_rate[['amount_band', 'IR']]

                amount_bandwise_incidence_rate_fig1 = px.bar(amount_bandwise_incidence_rate1, x='amount_band', y=amount_bandwise_incidence_rate1['IR']*100,
                                                        text="IR")

                formatted_values = [f"{val:.2%}" for val in
                                    amount_bandwise_incidence_rate1['IR']]  # Format as percentage with 2 decimal places
                amount_bandwise_incidence_rate_fig1.update_traces(text=formatted_values,
                                                             textfont=dict(family="Arial", size=10, color="black"),
                                                             textposition='outside')

                amount_bandwise_incidence_rate_fig1.update_xaxes(type='category')
                amount_bandwise_incidence_rate_fig1.update_layout(
                    title={'text': "INCIDENCE RATE BY AMOUNT BAND", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                    xaxis_title='X-axis'
                )
                amount_bandwise_incidence_rate_fig1.update_layout(plot_bgcolor="white",xaxis_title='AMOUNT BAND',yaxis_title='IR')


                ################# IR BY IPD WISE PAID AMOUNT BAND ###############

                ipd_amount_bandwise_incidence_rate = paid[(paid['IPD_OPD'] == 'IPD') & (paid['CONSIDER_COUNT'] == 1)]

                ipd_amount_bandwise_incidence_rate = ipd_amount_bandwise_incidence_rate.groupby(['amount_band'], sort=False, as_index=False)[
                        'CONSIDER_COUNT'].agg({'count': sum})
                ipd_amount_bandwise_incidence_rate.rename(columns={'count': 'claim_paid_amount_band'}, inplace=True)
                ipd_amount_bandwise_incidence_rate = ipd_amount_bandwise_incidence_rate.copy()

                ipd_amount_bandwise_incidence_rate['Lives'] = Total_Lives
                ipd_amount_bandwise_incidence_rate['IR'] = ipd_amount_bandwise_incidence_rate[
                                                               'claim_paid_amount_band'] / \
                                                           ipd_amount_bandwise_incidence_rate['Lives']

                ipd_amount_bandwise_incidence_rate.loc['Total'] = ipd_amount_bandwise_incidence_rate.sum(
                    numeric_only=True, axis=0)

                ipd_amount_bandwise_incidence_rate1 = ipd_amount_bandwise_incidence_rate[['amount_band', 'IR']]

                ipd_amount_bandwise_incidence_rate_fig1 = px.bar(ipd_amount_bandwise_incidence_rate1, x='amount_band',
                                                          y=ipd_amount_bandwise_incidence_rate1['IR'] * 100,
                                                          text="IR")

                formatted_values = [f"{val:.2%}" for val in
                                    age_bandwise_incidence_rate1['IR']]  # Format as percentage with 2 decimal places
                ipd_amount_bandwise_incidence_rate_fig1.update_traces(text=formatted_values,
                                                               textfont=dict(family="Arial", size=10, color="black"),
                                                               textposition='outside')

                ipd_amount_bandwise_incidence_rate_fig1.update_xaxes(type='category')
                # fig.update_xaxes(range=[0, 3])
                ipd_amount_bandwise_incidence_rate_fig1.update_layout(
                    title={'text': "INCIDENCE RATE BY AMOUNT BAND(IPD)", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                    xaxis_title='X-axis'
                )
                ipd_amount_bandwise_incidence_rate_fig1.update_layout(plot_bgcolor="white", xaxis_title='AGE BAND',
                                                               yaxis_title='IR')

                # age_wise_cashless_paid_amount_analysis = age_wise_cashless_paid_amount_analysis[['AGE_BAND', 'cashless_paidamt']]
                # age_wise_cashless_paid_amount_analysis = go.Figure(data=go.Bar(x=age_wise_cashless_paid_amount_analysis['AGE_BAND'],
                #                             y=age_wise_cashless_paid_amount_analysis['cashless_paidamt'],text=age_wise_cashless_paid_amount_analysis['cashless_paidamt']))
                #
                # age_wise_cashless_paid_amount_analysis.update_xaxes(type='category')
                #
                # age_wise_cashless_paid_amount_analysis.update_layout(plot_bgcolor="white")
                #



                # ######################  AGE WISE PAID CLAIM ANALYSIS #######################
                #
                # age_band_paid_claim_ipd_opd = paid.fillna(0).pivot_table(index=['AGE_BAND_REV'],
                #                                                          values=['SettledAmt', 'CONSIDER_COUNT'],
                #                                                          columns='IPD_OPD', aggfunc='sum')
                # age_band_paid_claim_ipd_opd.columns = age_band_paid_claim_ipd_opd.columns.droplevel(0)  # remove amount
                # age_band_paid_claim_ipd_opd.columns.name = None  # remove categories
                # age_band_paid_claim_ipd_opd = age_band_paid_claim_ipd_opd.reset_index()
                # age_band_paid_claim_ipd_opd.columns = ['AGE_Band', 'claims_IPD', 'claims_OPD', 'PaidAmt_IPD',
                #                                        'PaidAmt_OPD']
                # age_band_paid_claim_ipd_opd['Total_claim'] = age_band_paid_claim_ipd_opd['claims_IPD'].fillna(0) + \
                #                                              age_band_paid_claim_ipd_opd['claims_OPD'].fillna(0)
                # age_band_paid_claim_ipd_opd['Total_paidAmt'] = age_band_paid_claim_ipd_opd['PaidAmt_IPD'].fillna(0) + \
                #                                                age_band_paid_claim_ipd_opd['PaidAmt_OPD'].fillna(0)
                # age_band_paid_claim_ipd_opd['Avg_PaidAmt_IPD'] = age_band_paid_claim_ipd_opd['PaidAmt_IPD'] / \
                #                                                  age_band_paid_claim_ipd_opd['claims_IPD']
                # age_band_paid_claim_ipd_opd['Avg_paidAmt_OPD'] = age_band_paid_claim_ipd_opd['PaidAmt_OPD'] / \
                #                                                  age_band_paid_claim_ipd_opd['claims_OPD']
                # age_band_paid_claim_ipd_opd['Total_Avg_paidAmt'] = age_band_paid_claim_ipd_opd['Total_paidAmt'] / \
                #                                                    age_band_paid_claim_ipd_opd['Total_claim']
                # age_band_paid_claim_ipd_opd.loc['Total'] = age_band_paid_claim_ipd_opd.sum(numeric_only=True, axis=0)
                #
                # new_cols = ['AGE_Band', 'claims_IPD', 'PaidAmt_IPD', 'Avg_PaidAmt_IPD', 'claims_OPD', 'PaidAmt_OPD',
                #             'Avg_paidAmt_OPD', 'Total_claim', 'Total_paidAmt', 'Total_Avg_paidAmt']
                # age_band_paid_claim_ipd_opd = age_band_paid_claim_ipd_opd.reindex(columns=new_cols)
                #
                # ######################  AMUOUNT BAND WISE ANALYSIS #########################
                #
                # amt_band_paid_claim_ipd_opd = paid.fillna(0).pivot_table(index=['Amount_Band'],
                #                                                          values=['SettledAmt', 'CONSIDER_COUNT'],
                #                                                          columns='IPD_OPD', aggfunc='sum')
                # amt_band_paid_claim_ipd_opd.columns = amt_band_paid_claim_ipd_opd.columns.droplevel(0)  # remove amount
                # amt_band_paid_claim_ipd_opd.columns.name = None  # remove categories
                # amt_band_paid_claim_ipd_opd = amt_band_paid_claim_ipd_opd.reset_index()
                # amt_band_paid_claim_ipd_opd.columns = ['Amount_Band', 'claims_IPD', 'claims_OPD', 'PaidAmt_IPD',
                #                                        'PaidAmt_OPD']
                # amt_band_paid_claim_ipd_opd['Total_claim'] = amt_band_paid_claim_ipd_opd['claims_IPD'].fillna(0) + \
                #                                              amt_band_paid_claim_ipd_opd['claims_OPD'].fillna(0)
                # amt_band_paid_claim_ipd_opd['Total_paidAmt'] = amt_band_paid_claim_ipd_opd['PaidAmt_IPD'].fillna(0) + \
                #                                                amt_band_paid_claim_ipd_opd['PaidAmt_OPD'].fillna(0)
                # amt_band_paid_claim_ipd_opd['paidAmt_IPD%'] = (amt_band_paid_claim_ipd_opd['PaidAmt_IPD'] /
                #                                                amt_band_paid_claim_ipd_opd['PaidAmt_IPD'].sum()) * 100
                # amt_band_paid_claim_ipd_opd['paidAmt_OPD%'] = (amt_band_paid_claim_ipd_opd['PaidAmt_OPD'] /
                #                                                amt_band_paid_claim_ipd_opd['PaidAmt_OPD'].sum()) * 100
                # amt_band_paid_claim_ipd_opd['Total_amt%'] = (amt_band_paid_claim_ipd_opd['Total_paidAmt'] /
                #                                              amt_band_paid_claim_ipd_opd['Total_paidAmt'].sum()) * 100
                # amt_band_paid_claim_ipd_opd.loc['Total'] = amt_band_paid_claim_ipd_opd.sum(numeric_only=True, axis=0)
                #
                # new_cols = ['Amount_Band', 'claims_IPD', 'PaidAmt_IPD', 'paidAmt_IPD%', 'claims_OPD', 'PaidAmt_OPD',
                #             'paidAmt_OPD%', 'Total_claim', 'Total_paidAmt', 'Total_amt%']
                # amt_band_paid_claim_ipd_opd = amt_band_paid_claim_ipd_opd.reindex(columns=new_cols)
                #
                # ################### AGE BAND BY CASHLESS  PAID AMOUNT ################
                #
                # age_wise_paid_amount_analysis = paid.fillna(0).pivot_table(index=['AGE_BAND_REV'],
                #                                                            values=['SettledAmt', 'CONSIDER_COUNT'],
                #                                                            columns=['ActualLossType'], aggfunc='sum')
                # age_wise_paid_amount_analysis.columns = age_wise_paid_amount_analysis.columns.droplevel(
                #     0)  # remove amount
                # age_wise_paid_amount_analysis.columns.name = None  # remove categories
                # age_wise_paid_amount_analysis = age_wise_paid_amount_analysis.reset_index()
                # age_wise_paid_amount_analysis.columns = ['AGE_BAND', 'cashless_claims', 'Non_cashless_claims',
                #                                          'cashless_paidamt', 'Non_cashless_paidamt']
                # age_wise_paid_amount_analysis['claim_paid'] = age_wise_paid_amount_analysis['cashless_claims'].fillna(
                #     0) + age_wise_paid_amount_analysis['Non_cashless_claims'].fillna(0)
                # age_wise_paid_amount_analysis['paid_amt'] = age_wise_paid_amount_analysis['cashless_paidamt'].fillna(
                #     0) + age_wise_paid_amount_analysis['Non_cashless_paidamt'].fillna(0)
                #
                # claim_paid_age_band = paid.groupby(['AGE_BAND_REV'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                #     {'count': sum})
                # claim_paid_age_band.rename(columns={'count': 'claim_paid_age_band'}, inplace=True)
                # claim_paid_age_band
                #
                # claim_crs_age_band = crs.groupby(['AGE_BAND_REV'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                #     {'count': sum})
                # claim_crs_age_band.rename(columns={'count': 'claim_crs_age_band'}, inplace=True)
                # claim_crs_age_band
                #
                # claim_out_age_band = out.groupby(['AGE_BAND_REV'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                #     {'count': sum})
                # claim_out_age_band.rename(columns={'count': 'claim_out_age_band'}, inplace=True)
                # claim_out_age_band
                #
                # age_bandwise_incidence_rate1 = pd.merge(claim_crs_age_band, claim_paid_age_band, how='right',
                #                                         on=['AGE_BAND_REV'])
                # age_bandwise_incidence_rate2 = pd.merge(age_bandwise_incidence_rate1, claim_out_age_band, how='left',
                #                                         on=['AGE_BAND_REV'])
                #
                # age_bandwise_incidence_rate3 = lives_premium[['age_band', 'Lives']]
                # age_bandwise_incidence_rate3 = age_bandwise_incidence_rate3.groupby(['age_band'])['Lives'].sum()
                #
                # age_bandwise_incidence_rate = pd.merge(age_bandwise_incidence_rate2, age_bandwise_incidence_rate3,
                #                                        how='left', left_on=['AGE_BAND_REV'], right_on=['age_band'])
                #
                # age_bandwise_incidence_rate['reported_claims'] = age_bandwise_incidence_rate[
                #                                                      'claim_crs_age_band'].fillna(0) + \
                #                                                  age_bandwise_incidence_rate[
                #                                                      'claim_paid_age_band'].fillna(0) + \
                #                                                  age_bandwise_incidence_rate[
                #                                                      'claim_out_age_band'].fillna(0)
                #
                # age_bandwise_incidence_rate['IR'] = age_bandwise_incidence_rate['reported_claims'] / \
                #                                     age_bandwise_incidence_rate['Lives'] * 100
                # age_bandwise_incidence_rate.loc['Total'] = age_bandwise_incidence_rate.sum(numeric_only=True, axis=0)
                #
                # ###############   IR BY AGE SI BAND ####################
                #
                # claim_paid_si_band = paid.groupby(['Si_band'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                #     {'count': sum})
                # claim_paid_si_band.rename(columns={'count': 'claim_paid_si_band'}, inplace=True)
                # claim_paid_si_band
                #
                # claim_crs_si_band = crs.groupby(['Si_band'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                #     {'count': sum})
                # claim_crs_si_band.rename(columns={'count': 'claim_crs_si_band'}, inplace=True)
                # claim_crs_si_band
                #
                # claim_out_si_band = out.groupby(['Si_band'], sort=False, as_index=False)['CONSIDER_COUNT'].agg(
                #     {'count': sum})
                # claim_out_si_band.rename(columns={'count': 'claim_out_si_band'}, inplace=True)
                # claim_out_si_band
                #
                # si_bandwise_incidence_rate1 = pd.merge(claim_crs_si_band, claim_paid_si_band, how='right',
                #                                        on=['Si_band'])
                # si_bandwise_incidence_rate = pd.merge(si_bandwise_incidence_rate1, claim_out_si_band, how='left',
                #                                       on=['Si_band'])
                #
                # si_bandwise_incidence_rate['reported_claims'] = si_bandwise_incidence_rate['claim_crs_si_band'].fillna(
                #     0) + si_bandwise_incidence_rate['claim_paid_si_band'].fillna(0) + si_bandwise_incidence_rate[
                #                                                     'claim_out_si_band'].fillna(0)
                # si_bandwise_incidence_rate['Lives'] = Total_Lives
                # si_bandwise_incidence_rate['IR'] = si_bandwise_incidence_rate['reported_claims'] / \
                #                                    si_bandwise_incidence_rate['Lives'] * 100
                #
                # si_bandwise_incidence_rate.loc['Total'] = si_bandwise_incidence_rate.sum(numeric_only=True, axis=0)
                #
                # ##################   IR BY PAID AMOUNT BAND ################
                #
                # claim_paid_amount_band = paid.groupby(['Amount_Band'], sort=False, as_index=False)[
                #     'CONSIDER_COUNT'].agg({'count': sum})
                # claim_paid_amount_band.rename(columns={'count': 'claim_paid_amount_band'}, inplace=True)
                # amount_bandwise_incidence_rate = claim_paid_amount_band.copy()
                #
                # amount_bandwise_incidence_rate['Lives'] = Total_Lives
                # amount_bandwise_incidence_rate['IR'] = amount_bandwise_incidence_rate['claim_paid_amount_band'] / \
                #                                        amount_bandwise_incidence_rate['Lives'] * 100
                # amount_bandwise_incidence_rate.loc['Total'] = amount_bandwise_incidence_rate.sum(numeric_only=True,
                #                                                                                  axis=0)
                #
                # ################# IR BY IPD WISE PAID AMOUNT BAND ###############
                #
                # ipd_amount_bandwise_incidence_rate = paid[(paid['IPD_OPD'] == 'IPD') & (paid['CONSIDER_COUNT'] == 1)]
                #
                # ipd_amount_bandwise_incidence_rate = \
                # ipd_amount_bandwise_incidence_rate.groupby(['Amount_Band'], sort=False, as_index=False)[
                #     'CONSIDER_COUNT'].agg({'count': sum})
                # ipd_amount_bandwise_incidence_rate.rename(columns={'count': 'claim_paid_amount_band'}, inplace=True)
                # ipd_amount_bandwise_incidence_rate = ipd_amount_bandwise_incidence_rate.copy()
                #
                # ipd_amount_bandwise_incidence_rate['Lives'] = Total_Lives
                # ipd_amount_bandwise_incidence_rate['IR'] = ipd_amount_bandwise_incidence_rate[
                #                                                'claim_paid_amount_band'] / \
                #                                            ipd_amount_bandwise_incidence_rate['Lives'] * 100
                #
                # ipd_amount_bandwise_incidence_rate.loc['Total'] = ipd_amount_bandwise_incidence_rate.sum(
                #     numeric_only=True, axis=0)

 ##########      relation wise paid claim analaysis



                relationwise_paid_claims = pd.merge(relation_master, paid, how='left', left_on=('RELATION'), right_on=('relation'))
                relationwise_paid_claims.columns.name = None  # remove categories
                relationwise_paid_claims.reset_index(inplace=True)

                relation_wise_paid_claims = pd.pivot_table(relationwise_paid_claims, index='STD_RELATION',
                                                           columns='IC_NAME', values='CONSIDER_COUNT', aggfunc='sum')


                relation_wise_paid_claims.columns.name = None
                relation_wise_paid_claims1 = relation_wise_paid_claims.T
                relation_wise_paid_claims1.columns = list(relation_wise_paid_claims1.columns)
                relation_wise_paid_claims1.reset_index(inplace=True)

                # treatment_type_paid_amt_icwise['Total']= treatment_type_paid_amt_icwise.sum(axis=1)
                # treatment_type_paid_amt_icwise['Total%']=((treatment_type_paid_amt_icwise['Total']/treatment_type_paid_amt_icwise['Total'].sum())*100)
                #treatment_type_paid_amt_icwise.loc['Total'] = treatment_type_paid_amt_icwise.sum(numeric_only=True, axis=0)



                l8 = list(relation_wise_paid_claims1.columns)
                l8.remove('index')

                # Create subplot figure
                relation_wise_paid_claims_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l8:
                    relation_wise_paid_claims_fig1.add_trace(
                        go.Bar(x=relation_wise_paid_claims1['index'], y=relation_wise_paid_claims1[y], name=y),

                    )
                    # Update layout
                relation_wise_paid_claims_fig1.update_layout(
                    title={'text': "RELATION WISE PAID CLAIM ANANLYSIS", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                )
                relation_wise_paid_claims_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                relation_wise_paid_claims_fig1.update_layout(plot_bgcolor="white")


                # Show plot

                # figure for plotly
                relation_wise_paid_claims_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=relation_wise_paid_claims1.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=relation_wise_paid_claims1.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                relation_wise_paid_claims_fig2.update_layout(width=2000, height=600, title='<b><b>')


####### AGE WISE PAID CLAIM ANALYSIS

                age_wise_paid_claim = pd.pivot_table(paid, index='age_band_rev', columns='IC_NAME',
                                                     values='CONSIDER_COUNT', aggfunc='sum')
                age_wise_paid_claim1 = age_wise_paid_claim.T
                age_wise_paid_claim1.columns = list(age_wise_paid_claim1.columns)
                age_wise_paid_claim1.reset_index(inplace=True)

                age_wise_paid_claim.columns.name = None  # remove categories
                age_wise_paid_claim.reset_index(inplace=True)

                l9 = list(age_wise_paid_claim1.columns)
                l9.remove('IC_NAME')

                # Create subplot figure
                age_wise_paid_claim_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l9:
                    age_wise_paid_claim_fig1.add_trace(
                        go.Bar(x=age_wise_paid_claim1['IC_NAME'], y=age_wise_paid_claim1[y], name=y),

                    )
                    # Update layout
                age_wise_paid_claim_fig1.update_layout(
                    title={'text': "AGE BAND WISE PAID CLAIM ANANLYSIS", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                )
                age_wise_paid_claim_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                age_wise_paid_claim_fig1.update_layout(plot_bgcolor='white')

                # Show plot

                # figure for plotly
                age_wise_paid_claim_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=age_wise_paid_claim.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=age_wise_paid_claim.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                age_wise_paid_claim_fig2.update_layout(width=2000, height=600, title='<b><b>')


########### PAID AMOUNT BANDWISE ANALYSIS

                paid_amt_band = pd.pivot_table(paid, index='amount_band', columns='IC_NAME', values='SettledAmt',
                                               aggfunc='sum')
                paid_amt_band1 = paid_amt_band.T
                paid_amt_band1.columns = list(paid_amt_band1.columns)
                paid_amt_band1.reset_index(inplace=True)

                paid_amt_band.columns.name = None  # remove categories
                paid_amt_band.reset_index(inplace=True)

                l10= list(paid_amt_band1.columns)
                l10.remove('IC_NAME')

                # Create subplot figure
                paid_amt_band_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l10:
                    paid_amt_band_fig1.add_trace(
                        go.Bar(x=paid_amt_band1['IC_NAME'], y=paid_amt_band1[y], name=y),

                    )
                    # Update layout
                paid_amt_band_fig1.update_layout(
                    title={'text': "PAID AMOUNT BAND WISE ANALYSIS", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                )
                paid_amt_band_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                paid_amt_band_fig1.update_layout(plot_bgcolor='white')


                # Show plot

                # figure for plotly
                paid_amt_band_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=paid_amt_band.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=paid_amt_band.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                paid_amt_band_fig2.update_layout(width=2000, height=600, title='<b><b>')

####### si band wise paid claims

                si_band_wise_paid_claims = pd.pivot_table(paid, index='Si_band', columns='IC_NAME',
                                                          values='CONSIDER_COUNT', aggfunc='sum')
                si_band_wise_paid_claims1 = si_band_wise_paid_claims.T
                si_band_wise_paid_claims1.columns = list(si_band_wise_paid_claims1.columns)
                si_band_wise_paid_claims1.reset_index(inplace=True)
                si_band_wise_paid_claims.columns.name = None  # remove categories
                si_band_wise_paid_claims.reset_index(inplace=True)

                l11 = list(si_band_wise_paid_claims1.columns)
                l11.remove('IC_NAME')

                # Create subplot figure
                si_band_wise_paid_claims_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l11:
                    si_band_wise_paid_claims_fig1.add_trace(
                        go.Bar(x=si_band_wise_paid_claims1['IC_NAME'], y=si_band_wise_paid_claims1[y], name=y),

                    )
                    # Update layout
                si_band_wise_paid_claims_fig1.update_layout(
                    title={'text': "SUM-INSURED BAND WISE PAID CLAIM ANALYSIS", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                )
                si_band_wise_paid_claims_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                si_band_wise_paid_claims_fig1.update_layout(plot_bgcolor='white')


                si_band_wise_paid_claims_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=si_band_wise_paid_claims.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=si_band_wise_paid_claims.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                si_band_wise_paid_claims_fig2.update_layout(width=2000, height=600, title='<b><b>')


###########  si band wise paid amt analysis

                si_band_wise_paid_amt = pd.pivot_table(paid, index='Si_band', columns='IC_NAME', values='SettledAmt',
                                                       aggfunc='sum')
                si_band_wise_paid_amt1 = si_band_wise_paid_amt.T
                si_band_wise_paid_amt1.columns = list(si_band_wise_paid_amt1.columns)
                si_band_wise_paid_amt1.reset_index(inplace=True)
                si_band_wise_paid_amt.columns.name = None  # remove categories
                si_band_wise_paid_amt.reset_index(inplace=True)

                l12 = list(si_band_wise_paid_amt1.columns)
                l12.remove('IC_NAME')

                # Create subplot figure
                si_band_wise_paid_amt_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l12:
                    si_band_wise_paid_amt_fig1.add_trace(
                        go.Bar(x=si_band_wise_paid_amt1['IC_NAME'], y=si_band_wise_paid_amt1[y], name=y),

                    )
                    # Update layout
                si_band_wise_paid_amt_fig1.update_layout(
                    title={'text': "SUM-INSURED BAND WISE PAID AMOUNT ANALYSIS", 'y': 0.9, 'x': 0.5,
                           'xanchor': 'center', 'yanchor': 'top'},
                )
                si_band_wise_paid_amt_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                si_band_wise_paid_amt_fig1.update_layout(plot_bgcolor='white')

                # Show plot

                # figure for plotly
                si_band_wise_paid_amt_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=si_band_wise_paid_amt.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=si_band_wise_paid_amt.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                si_band_wise_paid_amt_fig2.update_layout(width=2000, height=600, title='<b><b>')




########### UTILIZATION BAND WISE ANALYIS

                utilization_band = pd.crosstab(paid['utilizationband'], paid['IC_NAME'])
                utilization_band1 = utilization_band.T
                utilization_band1.columns = list(utilization_band1.columns)
                utilization_band1.reset_index(inplace=True)
                utilization_band.reset_index(inplace=True)

                l1 = list(utilization_band1.columns)
                l1.remove('IC_NAME')

                # Create subplot figure
                utilization_band_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    utilization_band_fig1.add_trace(
                        go.Bar(x=utilization_band1['IC_NAME'], y=utilization_band1[y], name=y),

                    )
                    # Update layout
                utilization_band_fig1.update_layout(
                    title={'text': "UTILIZATION BAND WISE ANALYSIS", 'y': 0.9, 'x': 0.5,
                           'xanchor': 'center', 'yanchor': 'top'},
                )
                utilization_band_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))

                utilization_band_fig1.update_layout(plot_bgcolor='white')


                # figure for plotly
                utilization_band_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=utilization_band.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=utilization_band.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                utilization_band_fig2.update_layout(width=2000, height=600, title='<b><b>')

############### OVERALL TOP 10 hospital WISE ANALYSIS ######

                from babel.numbers import format_currency


                top10hospital_paidamt1 = paid.sort_values('SettledAmt', axis=0, ascending=False)['hospitlname']
                top10hospital_paidamt1 = top10hospital_paidamt1.drop_duplicates().head(10)

                top10hospital_paidamt2 = pd.merge(paid, top10hospital_paidamt1, how='right', on=['hospitlname'])

                top10hospital_paidamt3 = top10hospital_paidamt2.fillna(0).pivot_table(index=['hospitlname'],
                                                                                      values=['SettledAmt',
                                                                                              'CONSIDER_COUNT'],
                                                                                      aggfunc='sum')

                #top10hospital_paidamt3.columns.name = None  # Remove categories
                top10hospital_paidamt3 = top10hospital_paidamt3.reset_index()
                top10hospital_paidamt3.columns = ['HospitalName', 'Paid claims', 'Paid Amt']

                # Format the 'Paid Amt' column
                # top10hospital_paidamt3['Paid Amt'] = top10hospital_paidamt3['Paid Amt'].apply(lambda x: format_currency(x, 'INR', locale='en_IN') if pd.notnull(x) else '')
                import locale
                # Sort the dataframe by 'Paid Amt' column in ascending order
                top10hospital_paidamt3 = top10hospital_paidamt3.sort_values('Paid Amt', ascending=True)

                # Create the bar plot
                top10hospital_paidamt_fig1 = go.Figure()
                top10hospital_paidamt_fig1.add_trace(go.Bar(
                    x=top10hospital_paidamt3['Paid Amt'],
                    y=top10hospital_paidamt3['HospitalName'],
                    text=[f"₹{locale.format_string('%.0f', val, grouping=True)}" for val in
                          top10hospital_paidamt3['Paid Amt']],
                    name='SUBSTATUS',
                    marker_color='#118DFF',
                    orientation='h'
                ))
                top10hospital_paidamt_fig1.update_traces(textposition='auto')
                top10hospital_paidamt_fig1.update_layout(yaxis=dict(autorange="reversed"))
                top10hospital_paidamt_fig1.update_layout(title='<b>TOP 10 HOSPITAL  WISE ANALYSIS<b>')
                top10hospital_paidamt_fig1.update_layout(title_x=0.5,plot_bgcolor='white')

             ####table####


                top10hospital_paidamt1 = paid.sort_values('SettledAmt', axis=0, ascending=False)['hospitlname']
                top10hospital_paidamt1 = top10hospital_paidamt1.drop_duplicates().head(10)

                top10hospital_paidamt2 = pd.merge(paid, top10hospital_paidamt1, how='right', on=['hospitlname'])

                top10hospital_paidamt11 = top10hospital_paidamt2.fillna(0).pivot_table(index=['hospitlname'],
                                                                                     values=['SettledAmt',
                                                                                             'CONSIDER_COUNT'],
                                                                                     aggfunc='sum')

                top10hospital_paidamt1 = top10hospital_paidamt11.reset_index()
                top10hospital_paidamt1.columns = ['HospitlName', 'Paid claims', 'Paid Amt']
                top10hospital_paidamt1 = top10hospital_paidamt1.sort_values('Paid Amt', axis=0, ascending=False)

                top10hospital_paidamt1['Avg.Paid Amount'] = top10hospital_paidamt1['Paid Amt'].fillna(0) / \
                                                           top10hospital_paidamt1['Paid claims'].fillna(0)
                top10hospital_paidamt1.loc['Total'] = top10hospital_paidamt1.sum(numeric_only=True, axis=0)

                total_value = top10hospital_paidamt1.loc['Total', 'Paid claims']
                top10hospital_paidamt1['Paid claims'].fillna(total_value, inplace=True)

                # Move 'Total' name to 'HospitlName' column
                top10hospital_paidamt1.loc['Total', 'HospitlName'] = 'Total'

                # Convert 'Paid Amt' and 'Avg.Paid Amount' columns to Indian rupees format
                numeric_cols = ['Paid Amt', 'Avg.Paid Amount']
                for col in numeric_cols:
                    top10hospital_paidamt1[col] = top10hospital_paidamt1[col].apply(
                        lambda x: format_currency(x, 'INR', locale='en_IN') if pd.notnull(x) else '')

                # Replace 'NaN' values in 'Paid claims' column with the total value

                top10hospital_paidamt_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=top10hospital_paidamt1.columns,
                                fill_color='#1E90FF', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=top10hospital_paidamt1.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
#####################  hospital wise ipd analysis ########

                from babel.numbers import format_currency

                top10hospital_paidamt_ipd_paid = paid[paid['IPD_OPD']=='IPD']

                top10hospital_paidamt_ipd1 = top10hospital_paidamt_ipd_paid.sort_values('SettledAmt', axis=0, ascending=False)['hospitlname']
                top10hospital_paidamt_ipd1 = top10hospital_paidamt_ipd1.drop_duplicates().head(10)

                top10hospital_paidamt_ipd2 = pd.merge(paid, top10hospital_paidamt_ipd1, how='right', on=['hospitlname'])

                top10hospital_paidamt_ipd3 = top10hospital_paidamt_ipd2.fillna(0).pivot_table(index=['hospitlname'],
                                                                                      values=['SettledAmt',
                                                                                              'CONSIDER_COUNT'],
                                                                                      aggfunc='sum')

                top10hospital_paidamt_ipd3.columns.name = None  # Remove categories
                top10hospital_paidamt_ipd3 = top10hospital_paidamt_ipd3.reset_index()
                top10hospital_paidamt_ipd3.columns = ['HospitalName', 'Paid claims', 'Paid Amt']

                # Format the 'Paid Amt' column
                # top10hospital_paidamt3['Paid Amt'] = top10hospital_paidamt3['Paid Amt'].apply(lambda x: format_currency(x, 'INR', locale='en_IN') if pd.notnull(x) else '')
                import locale
                # Sort the dataframe by 'Paid Amt' column in ascending order
                top10hospital_paidamt_ipd = top10hospital_paidamt_ipd3.sort_values('Paid Amt', ascending=True)

                # Create the bar plot
                top10hospital_paidamt_ipd_fig1 = go.Figure()
                top10hospital_paidamt_ipd_fig1.add_trace(go.Bar(
                    x=top10hospital_paidamt_ipd['Paid Amt'],
                    y=top10hospital_paidamt_ipd['HospitalName'],
                    text=[f"₹{locale.format_string('%.0f', val, grouping=True)}" for val in
                          top10hospital_paidamt_ipd['Paid Amt']],
                    name='SUBSTATUS',
                    marker_color='#118DFF',
                    orientation='h'
                ))
                top10hospital_paidamt_ipd_fig1.update_traces(textposition='auto')
                top10hospital_paidamt_ipd_fig1.update_layout(yaxis=dict(autorange="reversed"))
                top10hospital_paidamt_ipd_fig1.update_layout(title='<b>TOP 10 HOSPITAL  WISE ANALYSIS<b>')
                top10hospital_paidamt_ipd_fig1.update_layout(title_x=0.5, plot_bgcolor='white')


                ####  table   ####


                top10hospital_paidamt_ipd_paid = paid[paid['IPD_OPD'] == 'IPD']

                top10hospital_paidamt_ipd1 = top10hospital_paidamt_ipd_paid.sort_values('SettledAmt', axis=0, ascending=False)['hospitlname']
                top10hospital_paidamt_ipd1 = top10hospital_paidamt_ipd1.drop_duplicates().head(10)

                top10hospital_paidamt_ipd2 = pd.merge(top10hospital_paidamt_ipd_paid, top10hospital_paidamt_ipd1, how='right', on=['hospitlname'])

                top10hospital_paidamt_ipd11 = top10hospital_paidamt_ipd2.fillna(0).pivot_table(index=['hospitlname'],
                                                                                              values=['SettledAmt',
                                                                                                      'CONSIDER_COUNT'],
                                                                                              aggfunc='sum')

                top10hospital_paidamt_ipd11 = top10hospital_paidamt_ipd11.reset_index()
                top10hospital_paidamt_ipd11.columns = ['HospitlName', 'Paid claims', 'Paid Amt']
                top10hospital_paidamt_ipd1 = top10hospital_paidamt_ipd11.sort_values('Paid Amt', axis=0, ascending=False)

                top10hospital_paidamt_ipd1['Avg.Paid Amount'] = top10hospital_paidamt_ipd1['Paid Amt'].fillna(0) / \
                                                            top10hospital_paidamt_ipd1['Paid claims'].fillna(0)
                top10hospital_paidamt_ipd1.loc['Total'] = top10hospital_paidamt_ipd1.sum(numeric_only=True, axis=0)

                total_value = top10hospital_paidamt_ipd1.loc['Total', 'Paid claims']
                top10hospital_paidamt_ipd1['Paid claims'].fillna(total_value, inplace=True)

                # Move 'Total' name to 'HospitlName' column
                top10hospital_paidamt_ipd1.loc['Total', 'HospitlName'] = 'Total'

                # Convert 'Paid Amt' and 'Avg.Paid Amount' columns to Indian rupees format
                numeric_cols = ['Paid Amt', 'Avg.Paid Amount']
                for col in numeric_cols:
                    top10hospital_paidamt_ipd1[col] = top10hospital_paidamt_ipd1[col].apply(
                        lambda x: format_currency(x, 'INR', locale='en_IN') if pd.notnull(x) else '')

                # Replace 'NaN' values in 'Paid claims' column with the total value

                top10hospital_paidamt_ipd_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=top10hospital_paidamt_ipd1.columns,
                                fill_color='#1E90FF', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=top10hospital_paidamt_ipd1.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])



                #####################  hospital wise OPD analysis ########

                from babel.numbers import format_currency

                top10hospital_paidamt_opd_paid = paid[paid['IPD_OPD'] == 'OPD']

                top10hospital_paidamt_opd1 = top10hospital_paidamt_opd_paid.sort_values('SettledAmt', axis=0, ascending=False)['hospitlname']
                top10hospital_paidamt_opd1 = top10hospital_paidamt_opd1.drop_duplicates().head(10)

                top10hospital_paidamt_opd2 = pd.merge(paid, top10hospital_paidamt_opd1, how='right', on=['hospitlname'])

                top10hospital_paidamt_opd11 = top10hospital_paidamt_opd2.fillna(0).pivot_table(index=['hospitlname'],
                                                                                             values=['SettledAmt',
                                                                                                     'CONSIDER_COUNT'],
                                                                                             aggfunc='sum')

                top10hospital_paidamt_opd3 = top10hospital_paidamt_opd11.reset_index()

                fixed_columns = ['hospitlname', 'SettledAmt', 'CONSIDER_COUNT']

                top10hospital_paidamt_opd3 = top10hospital_paidamt_opd3.reindex(columns=fixed_columns)

                top10hospital_paidamt_opd3 = top10hospital_paidamt_opd3.fillna(0)

                top10hospital_paidamt_opd3.rename(
                    columns={'hospitlname': 'HospitalName', 'SettledAmt': 'Paid Amt', 'CONSIDER_COUNT': 'Paid claims'},
                    inplace=True)


                top10hospital_paidamt_opd3 = top10hospital_paidamt_opd3.sort_values('Paid Amt', axis=0,
                                                                                     ascending=False)



                top10hospital_paidamt_opd_fig1 = go.Figure()
                top10hospital_paidamt_opd_fig1.add_trace(go.Bar(
                    x=top10hospital_paidamt_opd3['Paid Amt'],
                    y=top10hospital_paidamt_opd3['HospitalName'],
                    text=[f"₹{locale.format_string('%.0f', val, grouping=True)}" for val in
                          top10hospital_paidamt_opd3['Paid Amt']],
                    name='SUBSTATUS',
                    marker_color='#118DFF',
                    orientation='h'
                ))
                top10hospital_paidamt_opd_fig1.update_traces(textposition='auto')
                top10hospital_paidamt_opd_fig1.update_layout(yaxis=dict(autorange="reversed"))
                top10hospital_paidamt_opd_fig1.update_layout(title_x=0.5, plot_bgcolor='white')

                #### OPD TABLE ####



                top10hospital_paidamt_opd_paid = paid[paid['IPD_OPD'] == 'OPD']

                top10hospital_paidamt_opd1 = top10hospital_paidamt_opd_paid.sort_values('SettledAmt', axis=0, ascending=False)['hospitlname']
                top10hospital_paidamt_opd1 = top10hospital_paidamt_opd1.drop_duplicates().head(10)

                top10hospital_paidamt_opd2 = pd.merge(top10hospital_paidamt_opd_paid, top10hospital_paidamt_opd1, how='right', on=['hospitlname'])

                top10hospital_paidamt_opd11 = top10hospital_paidamt_opd2.fillna(0).pivot_table(index=['hospitlname'],
                                                                                              values=['SettledAmt',
                                                                                                      'CONSIDER_COUNT'],
                                                                                              aggfunc='sum')



                top10hospital_paidamt_opd3 = top10hospital_paidamt_opd11.reset_index()


                fixed_columns = ['hospitlname', 'SettledAmt', 'CONSIDER_COUNT']

                top10hospital_paidamt_opd3 = top10hospital_paidamt_opd3.reindex(columns=fixed_columns)

                top10hospital_paidamt_opd3 = top10hospital_paidamt_opd3.fillna(0)


                top10hospital_paidamt_opd3.rename(
                    columns={'hospitlname': 'HospitalName', 'SettledAmt': 'Paid Amt', 'CONSIDER_COUNT': 'Paid claims'},
                    inplace=True)

                top10hospital_paidamt_opd4 = top10hospital_paidamt_opd3.sort_values('Paid Amt', axis=0,
                                                                                     ascending=False)


                top10hospital_paidamt_opd4['Avg.Paid Amount'] = top10hospital_paidamt_opd4['Paid Amt'].fillna(0) / \
                                                                top10hospital_paidamt_opd4['Paid claims'].fillna(0)
                top10hospital_paidamt_opd4.loc['Total'] = top10hospital_paidamt_opd4.sum(numeric_only=True, axis=0)

                total_value = top10hospital_paidamt_opd4.loc['Total', 'Paid claims']
                top10hospital_paidamt_opd4['Paid claims'].fillna(total_value, inplace=True)

                # Move 'Total' name to 'HospitlName' column
                top10hospital_paidamt_opd4.loc['Total', 'HospitlName'] = 'Total'

                # Convert 'Paid Amt' and 'Avg.Paid Amount' columns to Indian rupees format
                numeric_cols = ['Paid Amt', 'Avg.Paid Amount']
                for col in numeric_cols:
                    top10hospital_paidamt_opd4[col] = top10hospital_paidamt_opd4[col].apply(
                        lambda x: format_currency(x, 'INR', locale='en_IN') if pd.notnull(x) else '')

                # Replace 'NaN' values in 'Paid claims' column with the total value

                top10hospital_paidamt_opd_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=top10hospital_paidamt_opd4.columns,
                                fill_color='#1E90FF', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=top10hospital_paidamt_opd4.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])

                #############  customer care wise

                customer_care = customer_care[customer_care['IC_NAME'] != '']
                SourceField_icwise = pd.crosstab(customer_care['sourcefield'], customer_care['IC_NAME'])
                SourceField_icwise = pd.DataFrame(SourceField_icwise)
                SourceField_icwise.reset_index(inplace=True)



                SourceField_icwise1 = SourceField_icwise.T


                SourceField_icwise1.reset_index(inplace=True)
                SourceField_icwise1.columns = [''] * len(SourceField_icwise1.columns)
                SourceField_icwise1.columns = list(SourceField_icwise1.iloc[0])

                SourceField_icwise1 = SourceField_icwise1.drop(SourceField_icwise1.index[0])

                # call_analysis_ic4.reset_index(inplace=True)




                l1 = list(SourceField_icwise1.columns)
                l1.remove('sourcefield')

                # Create subplot figure
                SourceField_icwise_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    SourceField_icwise_fig1.add_trace(
                        go.Bar(x=SourceField_icwise1['sourcefield'], y=SourceField_icwise1[y], name=y),

                    )
                    # Update layout
                SourceField_icwise_fig1.update_layout(
                    title={'text': "CUSTOMER TOUCH POINT ANALYSIS", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                )
                SourceField_icwise_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                SourceField_icwise_fig1.update_layout(plot_bgcolor='white')



                # figure for plotly
                SourceField_icwise_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=SourceField_icwise.columns,
                                fill_color='#1E90FF', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=SourceField_icwise.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                SourceField_icwise_fig2.update_layout(width=2000, height=600, title='<b><b>')


                ###### ic wise call analysis #############

                customer_care_ic = customer_care[customer_care['IC_NAME'] != '']

                customer_care_ic1 = customer_care_ic['call_type'].value_counts().head(10)
                customer_care_ic1 = customer_care_ic1.reset_index()
                customer_care_ic1=customer_care_ic1[['call_type']]

                customer_care_ic2 = pd.crosstab(customer_care_ic['call_type'], customer_care_ic['IC_NAME'])
                customer_care_ic2.reset_index(inplace=True)
                customer_care_ic2 = pd.DataFrame(customer_care_ic2)


                call_analysis_ic3 = pd.merge(customer_care_ic1, customer_care_ic2, how='inner', on=['call_type'])

                #df1 = pd.DataFrame(call_analysis_ic3)

                call_analysis_ic4 = call_analysis_ic3.T

                call_analysis_ic4.columns = [''] * len(call_analysis_ic4.columns)
                call_analysis_ic4.columns = list(call_analysis_ic4.iloc[0])

                call_analysis_ic4 = call_analysis_ic4.drop(call_analysis_ic4.index[0])

                call_analysis_ic4.reset_index(inplace=True)

                l1 = list(call_analysis_ic4.columns)
                l1.remove('index')

                # Create subplot figure
                call_analysis_ic_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    call_analysis_ic_fig1.add_trace(
                        go.Bar(x=call_analysis_ic4['index'], y=call_analysis_ic4[y], name=y),

                    )
                    # Update layout
                call_analysis_ic_fig1.update_layout(
                    title={'text': "CALL ANALYSIS", 'y': 0.9, 'x': 1, 'xanchor': 'center', 'yanchor': 'top'},
                )

                call_analysis_ic_fig1.update_traces(textfont_size=10, textangle=0, textposition="outside",
                                                    cliponaxis=False)

                call_analysis_ic_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                call_analysis_ic_fig1.update_layout(plot_bgcolor="white", bargap=0.10)

                call_analysis_ic_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=call_analysis_ic3.columns,
                                fill_color='#1E90FF', line_color='black',
                                font=dict(color='White', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=call_analysis_ic3.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                call_analysis_ic_fig2.update_layout(width=2000, height=600, title='<b><b>')

########### rEASON foR CALL ANALYSIS##########

                reason_for_call_ic = customer_care['reasonforcall'].value_counts().head(10)
                reason_for_call_ic1 = pd.DataFrame(reason_for_call_ic)
                reason_for_call_ic1.reset_index(inplace=True)
                reason_for_call_ic2 = reason_for_call_ic1[['reasonforcall']]

                reason_for_call_ic3 = pd.merge(customer_care, reason_for_call_ic2, how='inner', on=['reasonforcall'])
                reason_for_call_ic4 = pd.crosstab(reason_for_call_ic3['reasonforcall'], reason_for_call_ic3['IC_NAME'])

                reason_for_call_ic = pd.DataFrame(reason_for_call_ic4)
                reason_for_call_ic.reset_index(inplace=True)

                reason_for_call_ic5 = reason_for_call_ic.T


                reason_for_call_ic5.reset_index(inplace=True)
                reason_for_call_ic5.columns = [''] * len(reason_for_call_ic5.columns)
                reason_for_call_ic5.columns = list(reason_for_call_ic5.iloc[0])

                reason_for_call_ic5 = reason_for_call_ic5.drop(reason_for_call_ic5.index[0])

                # call_analysis_ic4.reset_index(inplace=True)

                l1 = list(reason_for_call_ic5.columns)
                l1.remove('reasonforcall')

                # Create subplot figure
                reason_for_call_ic_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    reason_for_call_ic_fig1.add_trace(
                        go.Bar(x=reason_for_call_ic5['reasonforcall'], y=reason_for_call_ic5[y], name=y),

                    )
                    # Update layout
                reason_for_call_ic_fig1.update_layout(
                    title={'text': "REASON FOR CALL ANALYSIS ICWISE", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                )
                reason_for_call_ic_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                reason_for_call_ic_fig1.update_layout(plot_bgcolor='white')

                # figure for plotly
                reason_for_call_ic_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=reason_for_call_ic.columns,
                                fill_color='#1E90FF', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=reason_for_call_ic.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                reason_for_call_ic_fig2.update_layout(width=2000, height=600, title='<b><b>')

                ############   IC WISE GRIEVANCE #######


                #customer_care['responsegiven'] = customer_care['responsegiven'].str.strip()

                grievance1 = customer_care[(customer_care['responsegiven'] != 'Invalid ADR raised') | (customer_care['responsegiven'] != 'Invalid Closure') | (customer_care['responsegiven'] != 'Invalid deduction made')]

                grievance2 = grievance1[grievance1['call_type'] == 'Grievance']

                grievance3 = grievance2['responsegiven'].value_counts().head(10)

                grievance3 = pd.DataFrame(grievance3)
                grievance3.reset_index(inplace=True)
                grievance4 = grievance3[['responsegiven']]

                grievance5 = pd.merge(grievance2, grievance4, how='inner', on=['responsegiven'])

                grievance6 = pd.crosstab(grievance5['responsegiven'], grievance5['IC_NAME'])


                grievance_analysis_ic = pd.DataFrame(grievance6)
                grievance_analysis_ic.reset_index(inplace=True)

                grievance_analysis_ic1 = grievance_analysis_ic.T


                grievance_analysis_ic1.reset_index(inplace=True)
                grievance_analysis_ic1.columns = [''] * len(grievance_analysis_ic1.columns)
                grievance_analysis_ic1.columns = list(grievance_analysis_ic1.iloc[0])

                grievance_analysis_ic1 = grievance_analysis_ic1.drop(grievance_analysis_ic1.index[0])

                # call_analysis_ic4.reset_index(inplace=True)

                l1 = list(grievance_analysis_ic1.columns)
                l1.remove('responsegiven')

                # Create subplot figure
                grievance_analysis_ic_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    grievance_analysis_ic_fig1.add_trace(
                        go.Bar(x=grievance_analysis_ic1['responsegiven'], y=grievance_analysis_ic1[y], name=y),

                    )
                    # Update layout
                grievance_analysis_ic_fig1.update_layout(
                    title={'text': "IC WISE GRIEVANCE ANALYSIS", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                )
                grievance_analysis_ic_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                grievance_analysis_ic_fig1.update_layout(plot_bgcolor='white')

                # figure for plotly
                grievance_analysis_ic_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=grievance_analysis_ic.columns,
                                fill_color='#1E90FF', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=grievance_analysis_ic.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                grievance_analysis_ic_fig2.update_layout(width=2000, height=600, title='<b><b>')


                ########## TOP5CORPORATEWISE SUMMARY

                lives_premium['rank'] = lives_premium['Premium_new'].rank(method='dense', ascending=False)

                lives_premium['rank'] = lives_premium['rank'].fillna(0)

                lives_premium['rank'] = lives_premium['rank'].astype(int)

                top5_corporatewise = lives_premium[(lives_premium['rank'] >= 1) & (lives_premium['rank'] <= 5)]

                top5_corporatewise['NAME_OF_INSURED'] = top5_corporatewise['NAME_OF_INSURED'].apply(
                    lambda x: ''.join([i[0] for i in x.split()]))

                top5_corporatewise['rank'] = top5_corporatewise['rank'].astype(str)

                top5_corporatewise['rank_by_premium'] = top5_corporatewise['rank'] + '-' + top5_corporatewise[
                    'POL_NO'] + '-' + top5_corporatewise['NAME_OF_INSURED']

                top5_corporatewise = top5_corporatewise[['rank_by_premium', 'POL_NO']]

                prem_corporatewise = lives_premium[['POL_NO', 'Premium_new', 'Lives', 'EARNED_PERMIUM']]

                corporatewise = pd.merge(top5_corporatewise, prem_corporatewise, how='left', on=['POL_NO'])

                premium_corporatewise = corporatewise[['rank_by_premium', 'Premium_new']]
                premium_corporatewise = premium_corporatewise.drop_duplicates(['rank_by_premium', 'Premium_new'])
                premium_corporatewise = premium_corporatewise.fillna(0).pivot_table(index=['rank_by_premium'],
                                                                                    values=['Premium_new'],
                                                                                    aggfunc='sum')


                Lives_corporatewise = corporatewise.groupby(['rank_by_premium'])['Lives'].sum()
                Lives_corporatewise = Lives_corporatewise.reset_index()

                Avg_Premium_Per_Life_corporatewise = pd.merge(premium_corporatewise, Lives_corporatewise, how='left',on=['rank_by_premium'])
                Avg_Premium_Per_Life_corporatewise['Avg Premium Per Life'] = Avg_Premium_Per_Life_corporatewise['Premium_new'] / Avg_Premium_Per_Life_corporatewise['Lives']

                Earned_premium_corporatewise = corporatewise[['rank_by_premium', 'EARNED_PERMIUM']]
                Earned_premium_corporatewise = Earned_premium_corporatewise.drop_duplicates(['rank_by_premium', 'EARNED_PERMIUM'])
                Earned_premium_corporatewise = Earned_premium_corporatewise.fillna(0).pivot_table(index=['rank_by_premium'], values=['EARNED_PERMIUM'], aggfunc='sum')

                corporatewise_summary = pd.merge(Avg_Premium_Per_Life_corporatewise, Earned_premium_corporatewise,how='left', on=['rank_by_premium'])

                top5_corporatewise1 = top5_corporatewise[['POL_NO', 'rank_by_premium']]

                claim_paid_corporatewise_summary = paid.groupby(['POL_NO'], sort=False, as_index=False)[
                    'CONSIDER_COUNT'].agg({'count': sum})
                claim_paid_corporatewise_summary.rename(columns={'count': 'Paid Claims'}, inplace=True)

                claim_crs_corporatewise_summary = crs.groupby(['POL_NO'], sort=False, as_index=False)['CONSIDER_COUNT'].agg({'count': sum})
                claim_crs_corporatewise_summary.rename(columns={'count': 'CRS Claims'}, inplace=True)
                claim_crs_corporatewise_summary['CRS Claims']=claim_crs_corporatewise_summary['CRS Claims'].astype(int)
                claim_out_corporatewise_summary = out.groupby(['POL_NO'], sort=False, as_index=False)['CONSIDER_COUNT'].agg({'count': sum})
                claim_out_corporatewise_summary.rename(columns={'count': 'OS Claims'}, inplace=True)

                corporatewise_claims_summary = pd.merge(top5_corporatewise1, claim_paid_corporatewise_summary,how='left', on=['POL_NO'])

                corporatewise_claims_summary = pd.merge(corporatewise_claims_summary, claim_crs_corporatewise_summary,how='left', on=['POL_NO'])

                corporatewise_claims_summary = pd.merge(corporatewise_claims_summary, claim_out_corporatewise_summary,how='left', on=['POL_NO'])

                corporatewise_claims_summary['Reported Claims'] = corporatewise_claims_summary['Paid Claims'].fillna(0) + \
                                                                  corporatewise_claims_summary['CRS Claims'].fillna(0) + \
                                                                  corporatewise_claims_summary['OS Claims'].fillna(0)
                corporatewise_claims_summary['Reported Claims']=corporatewise_claims_summary['Reported Claims'].astype(int)

                corporatewise_claims_summary['Settled Claims'] = corporatewise_claims_summary['Paid Claims'].fillna(0) + \
                                                                 corporatewise_claims_summary['CRS Claims'].fillna(0)

                corporatewise_claims_summary['Settled Claims']=corporatewise_claims_summary['Settled Claims'].astype(int)


                corporatewise_summary = pd.merge(corporatewise_summary, corporatewise_claims_summary, how='left',
                                                 on=['rank_by_premium'])

                reported_amt_icwise_summary1 = \
                paid[(paid['LodgeType'].str.strip() != "Deductions Payment")].groupby(['POL_NO'], sort=False, as_index=False)['LodgeAmt'].agg({'count': sum})
                reported_amt_icwise_summary2 = \
                crs[(crs['LodgeType'].str.strip() != "Deductions Payment")].groupby(['POL_NO'], sort=False,as_index=False)['LodgeAmt'].agg(
                    {'count': sum})
                reported_amt_icwise_summary3 = \
                out[(out['LodgeType'].str.strip() != "Deductions Payment")].groupby(['POL_NO'], sort=False,
                                                                                    as_index=False)['LodgeAmt'].agg(
                    {'count': sum})

                reported_amt_corporatewise_summary = pd.merge(top5_corporatewise1, reported_amt_icwise_summary1,
                                                              how='left', on=['POL_NO'])
                reported_amt_corporatewise_summary = pd.merge(reported_amt_corporatewise_summary,
                                                              reported_amt_icwise_summary2, how='left', on=['POL_NO'])
                reported_amt_corporatewise_summary = pd.merge(reported_amt_corporatewise_summary,
                                                              reported_amt_icwise_summary3, how='left', on=['POL_NO'])

                reported_amt_corporatewise_summary['Reported Amt'] = reported_amt_corporatewise_summary[
                                                                         'count_x'].fillna(0) + \
                                                                     reported_amt_corporatewise_summary[
                                                                         'count_y'].fillna(0) + \
                                                                     reported_amt_corporatewise_summary['count'].fillna(
                                                                         0)
                reported_amt_corporatewise_summary = reported_amt_corporatewise_summary[['rank_by_premium', 'Reported Amt']]

                corporatewise_summary = pd.merge(corporatewise_summary, reported_amt_corporatewise_summary, how='left',on=['rank_by_premium'])

                incurred_amt_corporatewise_summary1 = paid.groupby(['POL_NO'], sort=False, as_index=False)['LiablityAmt'].agg({'count': sum})
                incurred_amt_corporatewise_summary2 = out.groupby(['POL_NO'], sort=False, as_index=False)['LiablityAmt'].agg({'count': sum})

                incurred_amt_corporatewise_summary = pd.merge(top5_corporatewise1, incurred_amt_corporatewise_summary1,
                                                              how='left', on=['POL_NO'])
                incurred_amt_corporatewise_summary = pd.merge(incurred_amt_corporatewise_summary,
                                                              incurred_amt_corporatewise_summary2, how='left',
                                                              on=['POL_NO'])

                incurred_amt_corporatewise_summary['Incurred Amt'] = incurred_amt_corporatewise_summary[
                                                                         'count_x'].fillna(0) + \
                                                                     incurred_amt_corporatewise_summary[
                                                                         'count_y'].fillna(0)
                incurred_amt_corporatewise_summary = incurred_amt_corporatewise_summary[['rank_by_premium', 'Incurred Amt']]

                paid_amt_corporatewise_summary = paid.groupby(['POL_NO'], sort=False, as_index=False)['LiablityAmt'].agg({'count': sum})
                paid_amt_corporatewise_summary.rename(columns={'count': 'Paid Amt'}, inplace=True)

                ###
                policyrundays_corporatewise = lives_premium[['POL_NO', 'POLICYRUNDAY']]
                policyrundays_corporatewise = policyrundays_corporatewise.drop_duplicates(['POL_NO', 'POLICYRUNDAY'])
                policyrundays_corporatewise = policyrundays_corporatewise.fillna(0).pivot_table(index=['POL_NO'],
                                                                                                values=['POLICYRUNDAY'],
                                                                                                aggfunc='mean')

                corporatewise_summary = pd.merge(corporatewise_summary, incurred_amt_corporatewise_summary, how='left',
                                                 on=['rank_by_premium'])

                corporatewise_summary = pd.merge(corporatewise_summary, paid_amt_corporatewise_summary, how='left',
                                                 on=['POL_NO'])

                corporatewise_summary = pd.merge(corporatewise_summary, policyrundays_corporatewise, how='left',
                                                 on=['POL_NO'])

                corporatewise_summary['IR'] = (corporatewise_summary['Reported Claims'] / corporatewise_summary['Lives'] * 100).astype(int)

                corporatewise_summary['Prorated IR'] = (corporatewise_summary['IR'] * 365 / corporatewise_summary['POLICYRUNDAY']).astype(int)

                corporatewise_summary['ICR'] = ((corporatewise_summary['Incurred Amt'].astype(int) / corporatewise_summary['Premium_new'].astype(int)) * 100).astype(int)

                corporatewise_summary['ECR'] = ((corporatewise_summary['Incurred Amt'].astype(int) / corporatewise_summary['EARNED_PERMIUM'].astype(int)) * 100).astype(int)

                corporatewise_summary['Settlement Ratio'] = ((corporatewise_summary['Settled Claims'] / corporatewise_summary['Reported Claims']) * 100).astype(int)



                corporatewise_summary1 = corporatewise_summary[['rank_by_premium', 'Premium_new', 'EARNED_PERMIUM', 'Incurred Amt', 'Paid Amt']]

                corporatewise_summary2 = corporatewise_summary.T
                corporatewise_summary2.columns = [''] * len(corporatewise_summary2.columns)
                corporatewise_summary2.columns = list(corporatewise_summary2.iloc[0])
                corporatewise_summary2.reset_index(inplace=True)
                corporatewise_summary2.drop(0, inplace=True)


                corporatewise_summary3 = corporatewise_summary[['rank_by_premium', 'IR', 'Prorated IR', 'ICR', 'ECR', 'Settlement Ratio']]
                corporatewise_summary4 = corporatewise_summary3.T
                corporatewise_summary4.columns = [''] * len(corporatewise_summary4.columns)
                corporatewise_summary4.columns = list(corporatewise_summary4.iloc[0])
                corporatewise_summary4.reset_index(inplace=True)
                corporatewise_summary4.drop(0, inplace=True)


                l1 = list(corporatewise_summary1.columns)
                l1.remove('rank_by_premium')

                #### summary bar  1 ####


                corporatewise_summary1_fig1 = make_subplots()

                for y in l1:
                    corporatewise_summary1_fig1.add_trace(
                        go.Bar(x=corporatewise_summary1['rank_by_premium'], y=corporatewise_summary1[y], name=y),

                    )
                    # Update layout
                corporatewise_summary1_fig1.update_layout(
                    title={'text': "CONSOLIDATED SUMMARY (TOP 5 CORPORATE)", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                )

                corporatewise_summary1_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                corporatewise_summary1_fig1.update_layout(plot_bgcolor='white')

                #### summary bar 2####

                corporatewise_summary2_fig2 = make_subplots()


                l1 = list(corporatewise_summary3.columns)
                l1.remove('rank_by_premium')

                for y in l1:
                    corporatewise_summary2_fig2.add_trace(
                        go.Bar(x=corporatewise_summary3['rank_by_premium'], y=corporatewise_summary3[y], name=y, ),

                    )
                    # Update layout
                corporatewise_summary2_fig2.update_layout(
                    title={'text': "CONSOLIDATED SUMMARY (TOP 5 CORPORATE)", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                )

                corporatewise_summary2_fig2.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                corporatewise_summary2_fig2.update_layout(plot_bgcolor='white')

                import locale

                def format_currency(amount):
                    locale.setlocale(locale.LC_ALL, 'en_IN')  # Set the locale to en_IN (Indian English)
                    formatted_amount = locale.format_string("%s%.0f", ('₹', amount), grouping=True)
                    return formatted_amount

                def format_comma_separated(number):
                    return "{:,}".format(number)

                corporatewise_summary1 = corporatewise_summary[['rank_by_premium','Lives','POLICYRUNDAY','Premium_new','Avg Premium Per Life','EARNED_PERMIUM','Reported Claims','Settled Claims','Incurred Amt','Paid Claims','Paid Amt','IR', 'Prorated IR', 'ICR', 'ECR', 'Settlement Ratio']]

                corporatewise_summary1['Premium_new'] = corporatewise_summary1['Premium_new'].apply(lambda x: format_currency(x))
                corporatewise_summary1['EARNED_PERMIUM'] = corporatewise_summary1['EARNED_PERMIUM'].apply(
                    lambda x: format_currency(x))
                corporatewise_summary1['Incurred Amt'] = corporatewise_summary1['Incurred Amt'].apply(
                    lambda x: format_currency(x))
                corporatewise_summary1['Paid Amt'] = corporatewise_summary1['Paid Amt'].apply(
                    lambda x: format_currency(x))
                corporatewise_summary1['Avg Premium Per Life'] = corporatewise_summary1['Avg Premium Per Life'].apply(
                    lambda x: format_currency(x))

                corporatewise_summary1['Lives'] = corporatewise_summary1['Lives'].apply(
                    lambda x: format_comma_separated(x))
                corporatewise_summary1['Paid Claims'] = corporatewise_summary1['Paid Claims'].apply(
                    lambda x: format_comma_separated(x))
                # corporatewise_summary1['CRS Claims'] = corporatewise_summary1['CRS Claims'].apply(lambda x: format_comma_separated(x))
                # corporatewise_summary1['OS Claims'] = corporatewise_summary1['OS Claims'].apply(lambda x: format_comma_separated(x))
                corporatewise_summary1['Reported Claims'] = corporatewise_summary1['Reported Claims'].apply(
                    lambda x: format_comma_separated(x))
                corporatewise_summary1['Settled Claims'] = corporatewise_summary1['Settled Claims'].apply(
                    lambda x: format_comma_separated(x))

                corporatewise_summary1['IR'] = corporatewise_summary1['IR'].apply(lambda x: format_comma_separated(x))
                corporatewise_summary1['ICR'] = corporatewise_summary1['ICR'].apply(lambda x: format_comma_separated(x))
                corporatewise_summary1['ECR'] = corporatewise_summary1['ECR'].apply(lambda x: format_comma_separated(x))
                corporatewise_summary1['Prorated IR'] = corporatewise_summary1['Prorated IR'].apply(
                    lambda x: format_comma_separated(x))
                corporatewise_summary1['Settlement Ratio'] = corporatewise_summary1['Settlement Ratio'].apply(
                    lambda x: format_comma_separated(x))
                corporatewise_summary1['ICR'] = corporatewise_summary1['ICR'].apply(lambda x: f'{x}%')
                corporatewise_summary1['IR'] = corporatewise_summary1['IR'].apply(lambda x: f'{x}%')
                corporatewise_summary1['ECR'] = corporatewise_summary1['ECR'].apply(lambda x: f'{x}%')
                corporatewise_summary1['Prorated IR'] = corporatewise_summary1['Prorated IR'].apply(lambda x: f'{x}%')
                corporatewise_summary1['Settlement Ratio'] = corporatewise_summary1['Settlement Ratio'].apply(
                    lambda x: f'{x}%')

                corporatewise_summary2 = corporatewise_summary1.T
                corporatewise_summary2.columns = [''] * len(corporatewise_summary2.columns)
                corporatewise_summary2.columns = list(corporatewise_summary2.iloc[0])
                corporatewise_summary2.reset_index(inplace=True)
                corporatewise_summary2.drop(0, inplace=True)




                # figure for plotly
                corporatewise_summary1_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=corporatewise_summary2.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=corporatewise_summary2.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                corporatewise_summary1_fig2.update_layout(width=5000, height=600, title='<b><b>')
                corporatewise_summary1_fig2.update_layout(plot_bgcolor='white')


                corporatewise_summary2_fig1 = go.Figure(data=[go.Table(
                    header=dict(values=corporatewise_summary2.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=corporatewise_summary2.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                corporatewise_summary2_fig1.update_layout(width=5000, height=600, title='<b><b>')
                corporatewise_summary2_fig1.update_layout(plot_bgcolor='white')


############ CORPATREWISE CLAIM SETTLEMENT STATISTICS

                corporatewise_claimssettlement_statistics = corporatewise_summary[['rank_by_premium', 'Paid Claims', 'CRS Claims', 'OS Claims']]
                corporatewise_claimssettlement_statistics1 = corporatewise_claimssettlement_statistics.T
                corporatewise_claimssettlement_statistics1.columns = [''] * len(
                corporatewise_claimssettlement_statistics1.columns)
                corporatewise_claimssettlement_statistics1.columns = list(
                corporatewise_claimssettlement_statistics1.iloc[0])
                corporatewise_claimssettlement_statistics1.reset_index(inplace=True)
                corporatewise_claimssettlement_statistics1.drop(0, inplace=True)

                l1 = list(corporatewise_claimssettlement_statistics.columns)
                l1.remove('rank_by_premium')

                # Create subplot figure
                corporatewise_claimssettlement_statistics_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    corporatewise_claimssettlement_statistics_fig1.add_trace(
                        go.Bar(x=corporatewise_claimssettlement_statistics['rank_by_premium'],
                               y=corporatewise_claimssettlement_statistics[y], name=y, ),

                    )
                    # Update layout
                corporatewise_claimssettlement_statistics_fig1.update_layout(
                    title={'text': "CLAIM SETTLEMENT STATISTICS (TOP 5 CORPORATE)", 'y': 0.9, 'x': 0.5,
                           'xanchor': 'center', 'yanchor': 'top'},
                )

                corporatewise_claimssettlement_statistics_fig1.update_layout(
                    title=dict(x=0.5, font=dict(color='black', size=25)))
                corporatewise_claimssettlement_statistics_fig1.update_layout(plot_bgcolor='white')


                # figure for plotly
                corporatewise_claimssettlement_statistics_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=corporatewise_claimssettlement_statistics1.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=corporatewise_claimssettlement_statistics1.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                corporatewise_claimssettlement_statistics_fig2.update_layout(width=2000, height=600, title='<b><b>')

########## corporate wise outstanding analysis

                corporatewise_outstanding_analysis = pd.merge(top5_corporatewise, out, how='left', on=['POL_NO'])
                corporatewise_outstanding_analysis = corporatewise_outstanding_analysis.pivot_table(
                    columns=['rank_by_premium'], index=['SubStatus'], values=['CONSIDER_COUNT'], aggfunc='sum')
                corporatewise_outstanding_analysis.columns = corporatewise_outstanding_analysis.columns.droplevel(
                    0)  # remove amount
                corporatewise_outstanding_analysis.columns.name = None
                corporatewise_outstanding_analysis.reset_index(inplace=True)

                corporatewise_outstanding_analysis1 = corporatewise_outstanding_analysis.T
                corporatewise_outstanding_analysis1.reset_index(inplace=True)
                corporatewise_outstanding_analysis1 = corporatewise_outstanding_analysis.T
                corporatewise_outstanding_analysis1.columns = [''] * len(corporatewise_outstanding_analysis1.columns)
                corporatewise_outstanding_analysis1.columns = list(corporatewise_outstanding_analysis1.iloc[0])
                corporatewise_outstanding_analysis1.reset_index(inplace=True)
                corporatewise_outstanding_analysis1.drop(0, inplace=True)

                l1 = list(corporatewise_outstanding_analysis1.columns)
                l1.remove('index')

                # Create subplot figure
                corporatewise_outstanding_analysis_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    corporatewise_outstanding_analysis_fig1.add_trace(
                        go.Bar(x=corporatewise_outstanding_analysis1['index'], y=corporatewise_outstanding_analysis1[y],
                               name=y, ),

                    )
                    # Update layout
                corporatewise_outstanding_analysis_fig1.update_layout(
                    title={'text': "OUTSTANDING ANALYSIS (TOP  CORPORATE)", 'y': 0.9, 'x': 1, 'xanchor': 'center',
                           'yanchor': 'top'},
                )

                corporatewise_outstanding_analysis_fig1.update_layout(
                    title=dict(x=0.5, font=dict(color='black', size=25)))
                corporatewise_outstanding_analysis_fig1.update_layout(height=600,width=2000)
                corporatewise_outstanding_analysis_fig1.update_layout(plot_bgcolor='white')

                # Show plot

                corporatewise_outstanding_analysis_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=corporatewise_outstanding_analysis.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=corporatewise_outstanding_analysis.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                corporatewise_outstanding_analysis_fig2.update_layout(width=2000, height=1200, title='<b><b>')


############  LODGE AMOUNT WISE ANALYSIS

                Lodg_amount_analysis = pd.merge(top5_corporatewise, paid, how='left', on=['POL_NO'])
                Lodg_amount_analysis = Lodg_amount_analysis.pivot_table(columns=['rank_by_premium'],
                                                                        index=['ActualLossType'],
                                                                        values=['LiablityAmt'], aggfunc='sum')
                Lodg_amount_analysis.columns = Lodg_amount_analysis.columns.droplevel(0)  # remove amount
                Lodg_amount_analysis.columns.name = None
                Lodg_amount_analysis.reset_index(inplace=True)

                Lodg_amount_analysis1 = Lodg_amount_analysis.T
                Lodg_amount_analysis1.columns = list(Lodg_amount_analysis1.iloc[0])
                Lodg_amount_analysis1.reset_index(inplace=True)
                Lodg_amount_analysis1.drop(0, inplace=True)

                l2 = list(Lodg_amount_analysis1.columns)
                l2.remove('index')

                # Create subplot figure
                Lodg_amount_analysis_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l2:
                    Lodg_amount_analysis_fig1.add_trace(
                        go.Bar(x=Lodg_amount_analysis1['index'], y=Lodg_amount_analysis1[y], name=y, ),

                    )
                    # Update layout
                Lodg_amount_analysis_fig1.update_layout(
                    title={'text': "LODGE AMOUNT WISE ANALYSIS", 'y': 0.9, 'x': 1, 'xanchor': 'center',
                           'yanchor': 'top'},
                )

                Lodg_amount_analysis_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                Lodg_amount_analysis_fig1.update_layout(height=600)
                Lodg_amount_analysis_fig1.update_layout(plot_bgcolor='white')


                #Lodg_amount_analysis.iloc[:, 1:] = Lodg_amount_analysis.iloc[:, 1:].applymap(lambda x: format_currency(x))

                #Lodg_amount_analysis = Lodg_amount_analysis.apply(lambda x: x.map(format_currency) if x.dtype != object else x)

                Lodg_amount_analysis_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=Lodg_amount_analysis.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=Lodg_amount_analysis.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                Lodg_amount_analysis_fig2.update_layout(width=2000, height=400, title='<b><b>')


############    AGE BAND WISE ANALYSIS CORPORTAE

                age_band_wise_paid_claim_analysis_corporatewise = pd.merge(top5_corporatewise, paid, how='left',
                                                                           on=['POL_NO'])
                age_band_wise_paid_claim_analysis_corporatewise = age_band_wise_paid_claim_analysis_corporatewise.fillna(
                    0).pivot_table(columns=['rank_by_premium'], index=['age_band_rev'], values=['CONSIDER_COUNT'],
                                   aggfunc='sum')
                age_band_wise_paid_claim_analysis_corporatewise.columns = age_band_wise_paid_claim_analysis_corporatewise.columns.droplevel(
                    0)  # remove amount
                age_band_wise_paid_claim_analysis_corporatewise.columns.name = None
                age_band_wise_paid_claim_analysis_corporatewise.reset_index(inplace=True)
                age_band_wise_paid_claim_analysis_corporatewise1 = age_band_wise_paid_claim_analysis_corporatewise.T
                age_band_wise_paid_claim_analysis_corporatewise1.columns = list(
                age_band_wise_paid_claim_analysis_corporatewise1.iloc[0])
                age_band_wise_paid_claim_analysis_corporatewise1.reset_index(inplace=True)
                age_band_wise_paid_claim_analysis_corporatewise1.drop(0, inplace=True)

                l1 = list(age_band_wise_paid_claim_analysis_corporatewise1.columns)
                l1.remove('index')

                # Create subplot figure
                age_band_wise_paid_claim_analysis_corporatewise_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    age_band_wise_paid_claim_analysis_corporatewise_fig1.add_trace(
                        go.Bar(x=age_band_wise_paid_claim_analysis_corporatewise1['index'],
                               y=age_band_wise_paid_claim_analysis_corporatewise1[y], name=y, ),

                    )
                    # Update layout
                age_band_wise_paid_claim_analysis_corporatewise_fig1.update_layout(
                    title={'text': "AGE BAND WISE PAID CLAIMS ANALYSIS (TOP CORPORATE)", 'y': 0.9, 'x': 1,
                           'xanchor': 'center', 'yanchor': 'top'},
                )

                age_band_wise_paid_claim_analysis_corporatewise_fig1.update_layout(
                    title=dict(x=0.5, font=dict(color='black', size=25)))
                age_band_wise_paid_claim_analysis_corporatewise_fig1.update_layout(height=600)
                age_band_wise_paid_claim_analysis_corporatewise_fig1.update_layout(plot_bgcolor='white')

                # Show plot

                age_band_wise_paid_claim_analysis_corporatewise_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=age_band_wise_paid_claim_analysis_corporatewise.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=age_band_wise_paid_claim_analysis_corporatewise.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                age_band_wise_paid_claim_analysis_corporatewise_fig2.update_layout(width=2000, height=600,
                                                                                   title='<b><b>')
############## age band wise corporatewise PAID AMOUNT WISE ANALYSIS

                age_band_wise_paid_amt_analysis_corporatewise = pd.merge(top5_corporatewise, paid, how='left',
                                                                         on=['POL_NO'])
                age_band_wise_paid_amt_analysis_corporatewise = age_band_wise_paid_amt_analysis_corporatewise.fillna(
                    0).pivot_table(columns=['rank_by_premium'], index=['age_band_rev'], values=['LiablityAmt'],
                                   aggfunc='sum')
                age_band_wise_paid_amt_analysis_corporatewise.columns = age_band_wise_paid_amt_analysis_corporatewise.columns.droplevel(
                    0)  # remove amount
                age_band_wise_paid_amt_analysis_corporatewise.columns.name = None
                age_band_wise_paid_amt_analysis_corporatewise.reset_index(inplace=True)
                age_band_wise_paid_amt_analysis_corporatewise1 = age_band_wise_paid_amt_analysis_corporatewise.T
                age_band_wise_paid_amt_analysis_corporatewise1.columns = list( age_band_wise_paid_amt_analysis_corporatewise1.iloc[0])
                age_band_wise_paid_amt_analysis_corporatewise1.reset_index(inplace=True)
                age_band_wise_paid_amt_analysis_corporatewise1.drop(0, inplace=True)

                l1 = list(age_band_wise_paid_amt_analysis_corporatewise1.columns)
                l1.remove('index')

                # Create subplot figure
                age_band_wise_paid_amt_analysis_corporatewise_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    age_band_wise_paid_amt_analysis_corporatewise_fig1.add_trace(
                        go.Bar(x=age_band_wise_paid_amt_analysis_corporatewise1['index'],
                               y=age_band_wise_paid_amt_analysis_corporatewise1[y], name=y, ),

                    )
                    # Update layout
                age_band_wise_paid_amt_analysis_corporatewise_fig1.update_layout(
                    title={'text': "AGE BAND WISE PAID AMOUNT ANALYSIS (TOP CORPORATE)", 'y': 0.9, 'x': 1,
                           'xanchor': 'center', 'yanchor': 'top'},
                )

                age_band_wise_paid_amt_analysis_corporatewise_fig1.update_layout(
                    title=dict(x=0.5, font=dict(color='black', size=25)))
                age_band_wise_paid_amt_analysis_corporatewise_fig1.update_layout(height=600)
                age_band_wise_paid_amt_analysis_corporatewise_fig1.update_layout(plot_bgcolor='white')


                # Show plot

                age_band_wise_paid_amt_analysis_corporatewise_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=age_band_wise_paid_amt_analysis_corporatewise.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=age_band_wise_paid_amt_analysis_corporatewise.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                age_band_wise_paid_amt_analysis_corporatewise_fig2.update_layout(width=2000, height=600, title='<b><b>')

########## corpo relation wise paid amt analysis


                paid = pd.merge(paid, relation_master, how='left', left_on='relation', right_on='RELATION')#.drop(columns=['id','RELATION'])
                relation_wise_paid_amt_analysis = pd.merge(top5_corporatewise, paid, how='left', on=['POL_NO'])
                relation_wise_paid_amt_analysis = relation_wise_paid_amt_analysis.pivot_table(
                    columns=['rank_by_premium'], index=['STD_RELATION'], values=['LiablityAmt'], aggfunc='sum')
                relation_wise_paid_amt_analysis.columns = relation_wise_paid_amt_analysis.columns.droplevel(
                    0)  # remove amount
                relation_wise_paid_amt_analysis.columns.name = None
                relation_wise_paid_amt_analysis.reset_index(inplace=True)
                relation_wise_paid_amt_analysis1 = relation_wise_paid_amt_analysis.T
                relation_wise_paid_amt_analysis1.columns = list(relation_wise_paid_amt_analysis1.iloc[0])
                relation_wise_paid_amt_analysis1.reset_index(inplace=True)
                relation_wise_paid_amt_analysis1.drop(0, inplace=True)

                l1 = list(relation_wise_paid_amt_analysis1.columns)
                l1.remove('index')

                # Create subplot figure
                corpo_relation_wise_paid_amt_analysis_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    corpo_relation_wise_paid_amt_analysis_fig1.add_trace(
                        go.Bar(x=relation_wise_paid_amt_analysis1['index'], y=relation_wise_paid_amt_analysis1[y],
                               name=y, ),

                    )
                    # Update layout
                corpo_relation_wise_paid_amt_analysis_fig1.update_layout(
                    title={'text': "RELATION WISE PAID AMOUNT ANALYSIS (TOP CORPORATE)", 'y': 0.9, 'x': 1,
                           'xanchor': 'center',
                           'yanchor': 'top'},
                )

                corpo_relation_wise_paid_amt_analysis_fig1.update_layout(
                    title=dict(x=0.5, font=dict(color='black', size=25)))
                corpo_relation_wise_paid_amt_analysis_fig1.update_layout(height=600)
                corpo_relation_wise_paid_amt_analysis_fig1.update_layout(plot_bgcolor='white')

                # Show plot

                corpo_relation_wise_paid_amt_analysis_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=relation_wise_paid_amt_analysis.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=relation_wise_paid_amt_analysis.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                corpo_relation_wise_paid_amt_analysis_fig2.update_layout(width=2000, height=600, title='<b><b>')

 ########## corpo relation wise paid claim analysis

                relation_wise_paid_claim_analysis = pd.merge(top5_corporatewise, paid, how='left', on=['POL_NO'])
                relation_wise_paid_claim_analysis = relation_wise_paid_claim_analysis.pivot_table(
                    columns=['rank_by_premium'], index=['STD_RELATION'], values=['CONSIDER_COUNT'], aggfunc='sum')
                relation_wise_paid_claim_analysis.columns = relation_wise_paid_claim_analysis.columns.droplevel(
                    0)  # remove amount
                relation_wise_paid_claim_analysis.columns.name = None
                relation_wise_paid_claim_analysis.reset_index(inplace=True)
                relation_wise_paid_claim_analysis1 = relation_wise_paid_claim_analysis.T
                relation_wise_paid_claim_analysis1.columns = list(relation_wise_paid_claim_analysis1.iloc[0])
                relation_wise_paid_claim_analysis1.reset_index(inplace=True)
                relation_wise_paid_claim_analysis1.drop(0, inplace=True)

                l1 = list(relation_wise_paid_claim_analysis1.columns)
                l1.remove('index')

                # Create subplot figure
                corpo_relation_wise_paid_claim_analysis_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    corpo_relation_wise_paid_claim_analysis_fig1.add_trace(
                        go.Bar(x=relation_wise_paid_claim_analysis1['index'], y=relation_wise_paid_claim_analysis1[y],
                               name=y, ),

                    )
                    # Update layout
                corpo_relation_wise_paid_claim_analysis_fig1.update_layout(
                    title={'text': "RELATION WISE PAID AMOUNT ANALYSIS (TOP CORPORATE)", 'y': 0.9, 'x': 1,
                           'xanchor': 'center',
                           'yanchor': 'top'},
                )

                corpo_relation_wise_paid_claim_analysis_fig1.update_layout(
                    title=dict(x=0.5, font=dict(color='black', size=25)))
                corpo_relation_wise_paid_claim_analysis_fig1.update_layout(height=600)
                corpo_relation_wise_paid_claim_analysis_fig1.update_layout(plot_bgcolor='white')

                # Show plot

                corpo_relation_wise_paid_claim_analysis_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=relation_wise_paid_claim_analysis.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=relation_wise_paid_claim_analysis.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                corpo_relation_wise_paid_claim_analysis_fig2.update_layout(width=2000, height=600, title='<b><b>')

######   amount band wise paid amount

                amt_band_wise_paidamt_analysis_corporatewise = pd.merge(top5_corporatewise,paid,how='left',on=['POL_NO'])
                amt_band_wise_paidamt_analysis_corporatewise = amt_band_wise_paidamt_analysis_corporatewise.pivot_table(columns=['rank_by_premium'],index=['amount_band'],values=['LiablityAmt'],aggfunc='sum')

                amt_band_wise_paidamt_analysis_corporatewise.columns = amt_band_wise_paidamt_analysis_corporatewise.columns.droplevel(0) #remove amount
                amt_band_wise_paidamt_analysis_corporatewise.columns.name = None
                amt_band_wise_paidamt_analysis_corporatewise.reset_index(inplace=True)
                amt_band_wise_paidamt_analysis_corporatewise1=amt_band_wise_paidamt_analysis_corporatewise.T
                amt_band_wise_paidamt_analysis_corporatewise1.columns=list(amt_band_wise_paidamt_analysis_corporatewise1.iloc[0])


                amt_band_wise_paidamt_analysis_corporatewise1.reset_index(inplace=True)
                amt_band_wise_paidamt_analysis_corporatewise1.drop(0,inplace=True)


                l1 = list(amt_band_wise_paidamt_analysis_corporatewise1.columns)
                l1.remove('index')

                # Create subplot figure
                amt_band_wise_paidamt_analysis_corporatewise_fig1= make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    amt_band_wise_paidamt_analysis_corporatewise_fig1.add_trace(
                        go.Bar(x=amt_band_wise_paidamt_analysis_corporatewise1['index'], y=amt_band_wise_paidamt_analysis_corporatewise1[y], name=y,),

                    )
                    # Update layout
                amt_band_wise_paidamt_analysis_corporatewise_fig1.update_layout(
                   title={'text': "PAID AMOUNT BAND WISE CLAIMS (TOP CORPORATE)",'y':0.9,  'x':1,'xanchor': 'center','yanchor': 'top'},
                )

                amt_band_wise_paidamt_analysis_corporatewise_fig1.update_layout(title=dict(x=0.5,font=dict(color='black',size=25)))
                amt_band_wise_paidamt_analysis_corporatewise_fig1.update_layout( height=600)
                amt_band_wise_paidamt_analysis_corporatewise_fig1.update_layout(plot_bgcolor='white')


                amt_band_wise_paidamt_analysis_corporatewise_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=amt_band_wise_paidamt_analysis_corporatewise.columns,
                                fill_color='lightcyan',line_color='black',font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=amt_band_wise_paidamt_analysis_corporatewise.values.T,
                               fill_color='white',line_color='black',
                               align='center'))
                ])
                amt_band_wise_paidamt_analysis_corporatewise_fig2.update_layout(width=2000, height=600, title = '<b><b>')

########## amount band wise paid claim analysis


                amt_band_wise_paidclaim_analysis_corporatewise = pd.merge(top5_corporatewise, paid, how='left',
                                                                          on=['POL_NO'])
                amt_band_wise_paidclaim_analysis_corporatewise = amt_band_wise_paidclaim_analysis_corporatewise.pivot_table(
                    columns=['rank_by_premium'], index=['amount_band'], values=['CONSIDER_COUNT'], aggfunc='sum')
                amt_band_wise_paidclaim_analysis_corporatewise.columns = amt_band_wise_paidclaim_analysis_corporatewise.columns.droplevel(
                    0)  # remove amount
                amt_band_wise_paidclaim_analysis_corporatewise.columns.name = None
                amt_band_wise_paidclaim_analysis_corporatewise.reset_index(inplace=True)
                amt_band_wise_paidclaim_analysis_corporatewise1 = amt_band_wise_paidclaim_analysis_corporatewise.T

                amt_band_wise_paidclaim_analysis_corporatewise = pd.merge(top5_corporatewise, paid, how='left',
                                                                          on=['POL_NO'])
                amt_band_wise_paidclaim_analysis_corporatewise = amt_band_wise_paidclaim_analysis_corporatewise.pivot_table(
                    columns=['rank_by_premium'], index=['amount_band'], values=['CONSIDER_COUNT'], aggfunc='sum')

                amt_band_wise_paidclaim_analysis_corporatewise.columns = amt_band_wise_paidclaim_analysis_corporatewise.columns.droplevel(
                    0)  # remove amount
                amt_band_wise_paidclaim_analysis_corporatewise.columns.name = None
                amt_band_wise_paidclaim_analysis_corporatewise.reset_index(inplace=True)
                amt_band_wise_paidclaim_analysis_corporatewise1 = amt_band_wise_paidclaim_analysis_corporatewise.T
                amt_band_wise_paidclaim_analysis_corporatewise1.columns = list(
                    amt_band_wise_paidclaim_analysis_corporatewise1.iloc[0])

                amt_band_wise_paidclaim_analysis_corporatewise1.reset_index(inplace=True)
                amt_band_wise_paidclaim_analysis_corporatewise1.drop(0, inplace=True)

                l1 = list(amt_band_wise_paidclaim_analysis_corporatewise1.columns)
                l1.remove('index')

                # Create subplot figure
                amt_band_wise_paidclaim_analysis_corporatewise_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    amt_band_wise_paidclaim_analysis_corporatewise_fig1.add_trace(
                        go.Bar(x=amt_band_wise_paidclaim_analysis_corporatewise1['index'],
                               y=amt_band_wise_paidclaim_analysis_corporatewise1[y], name=y, ),

                    )
                    # Update layout
                amt_band_wise_paidclaim_analysis_corporatewise_fig1.update_layout(
                    title={'text': "PAID AMOUNT BAND  WISE PAID CLAIMS (TOP CORPORATE)", 'y': 0.9, 'x': 1,
                           'xanchor': 'center', 'yanchor': 'top'},
                )

                amt_band_wise_paidclaim_analysis_corporatewise_fig1.update_layout(
                    title=dict(x=0.5, font=dict(color='black', size=25)))
                amt_band_wise_paidclaim_analysis_corporatewise_fig1.update_layout(height=600)

                amt_band_wise_paidclaim_analysis_corporatewise_fig1.update_layout(plot_bgcolor='white')

                amt_band_wise_paidclaim_analysis_corporatewise_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=amt_band_wise_paidclaim_analysis_corporatewise.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=amt_band_wise_paidclaim_analysis_corporatewise.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                amt_band_wise_paidclaim_analysis_corporatewise_fig2.update_layout(width=2000, height=600,
                                                                                  title='<b><b>')

#################  treatment type wise analysis

                treatment_type_paidclaim_analysis_corporatewise = pd.merge(top5_corporatewise, paid, how='left',
                                                                           on=['POL_NO'])
                treatment_type_paidclaim_analysis_corporatewise = treatment_type_paidclaim_analysis_corporatewise.fillna(
                    0).pivot_table(columns=['rank_by_premium'], index=['treatmenttype'], values=['CONSIDER_COUNT'],
                                   aggfunc='sum')

                treatment_type_paidclaim_analysis_corporatewise.columns = treatment_type_paidclaim_analysis_corporatewise.columns.droplevel(
                    0)  # remove amount
                treatment_type_paidclaim_analysis_corporatewise.columns.name = None
                treatment_type_paidclaim_analysis_corporatewise.reset_index(inplace=True)
                treatment_type_paidclaim_analysis_corporatewise1 = treatment_type_paidclaim_analysis_corporatewise.T
                treatment_type_paidclaim_analysis_corporatewise1.columns = list(treatment_type_paidclaim_analysis_corporatewise1.iloc[0])

                treatment_type_paidclaim_analysis_corporatewise1.reset_index(inplace=True)
                treatment_type_paidclaim_analysis_corporatewise1.drop(0, inplace=True)

                l1 = list(treatment_type_paidclaim_analysis_corporatewise1.columns)
                l1.remove('index')

                # Create subplot figure
                treatment_type_paidclaim_analysis_corporatewise_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    treatment_type_paidclaim_analysis_corporatewise_fig1.add_trace(
                        go.Bar(x=treatment_type_paidclaim_analysis_corporatewise1['index'],
                               y=treatment_type_paidclaim_analysis_corporatewise1[y], name=y, ),

                    )
                    # Update layout
                treatment_type_paidclaim_analysis_corporatewise_fig1.update_layout(
                    title={'text': "TREATMENT TYPE WISE ANALYSIS (TOP CORPORATE)", 'y': 0.9, 'x': 1,
                           'xanchor': 'center', 'yanchor': 'top'},
                )

                treatment_type_paidclaim_analysis_corporatewise_fig1.update_layout(
                    title=dict(x=0.5, font=dict(color='black', size=25)))
                treatment_type_paidclaim_analysis_corporatewise_fig1.update_layout(height=600,width=2000)
                treatment_type_paidclaim_analysis_corporatewise_fig1.update_layout(plot_bgcolor='white')

                # Show plot

                treatment_type_paidclaim_analysis_corporatewise_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=treatment_type_paidclaim_analysis_corporatewise.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=treatment_type_paidclaim_analysis_corporatewise.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                treatment_type_paidclaim_analysis_corporatewise_fig2.update_layout(width=2000, height=600,
                                                                                   title='<b><b>')

################ top 10 disease wise
                #
                #
                # top10disease_paidamt_corporatewise1 = pd.merge(top5_corporatewise, paid, how='left', on=['POL_NO'])
                # top10disease_paidamt_corporatewise1 = top10disease_paidamt_corporatewise1[top10disease_paidamt_corporatewise1['new_disease_category'] != 'Other']
                # top10disease_paidamt_corporatewise1 = top10disease_paidamt_corporatewise1.sort_values('SettledAmt', axis=0, ascending=False)[['new_disease_category', 'rank_by_premium']]
                # top10disease_paidamt_corporatewise1 = top10disease_paidamt_corporatewise1.drop_duplicates().head(10)
                # top10disease_paidamt_corporatewise2 = pd.merge(paid, top10disease_paidamt_corporatewise1, how='right',on='new_disease_category')
                # top10disease_paidamt_corporatewise3= top10disease_paidamt_corporatewise2.fillna(0).pivot_table(index=['new_disease_category'], values=['SettledAmt'], columns=['rank_by_premium'], aggfunc='sum')
                #
                # top10disease_paidamt_corporatewise3 = top10disease_paidamt_corporatewise3.T.reset_index()
                # names = list(age_band_lives_fig1.columns)[1:]
                # age_band_lives_fig2 = px.bar(age_band_lives_fig1, x="IC_NAME", y=names, title="AGE BAND WISE LIVES")
                #
                # # top10disease_paidamt_corporatewise3.columns = top10disease_paidamt_corporatewise3.columns.droplevel(0)  # remove amount
                # # top10disease_paidamt_corporatewise3.columns = idx
                # top10disease_paidamt_corporatewise3 = top10disease_paidamt_corporatewise3.reset_index()
                #
                # l1 = list(top10disease_paidamt_corporatewise3.columns)
                # l1.remove('new_disease_category')
                #
                # top10disease_paidamt_corporatewise = top10disease_paidamt_corporatewise3.T.reset_index()


                top10disease_paidamt_corporatewise1 = pd.merge(top5_corporatewise, paid, how='left', on=['POL_NO'])
                top10disease_paidamt_corporatewise1 = top10disease_paidamt_corporatewise1[top10disease_paidamt_corporatewise1['new_disease_category'] != 'Other']

                top10disease_paidamt_corporatewise1 = top10disease_paidamt_corporatewise1[top10disease_paidamt_corporatewise1['new_disease_category'] != 'Other']
                top10disease_paidamt_corporatewise1 = top10disease_paidamt_corporatewise1.sort_values('SettledAmt', axis=0, ascending=False)[['new_disease_category', 'rank_by_premium']]
                top10disease_paidamt_corporatewise1 = top10disease_paidamt_corporatewise1.drop_duplicates().head(10)
                top10disease_paidamt_corporatewise2 = pd.merge(paid, top10disease_paidamt_corporatewise1, how='right',on='new_disease_category')
                top10disease_paidamt_corporatewise = top10disease_paidamt_corporatewise2.fillna(0).pivot_table(index=['new_disease_category'], values=['SettledAmt'], columns=['rank_by_premium'], aggfunc='sum')
                top10disease_paidamt_corporatewise.columns = top10disease_paidamt_corporatewise.columns.droplevel(0)  # remove amount
                top10disease_paidamt_corporatewise = top10disease_paidamt_corporatewise.reset_index()
                top10disease_paidamt_corporatewise1 = top10disease_paidamt_corporatewise.T
                top10disease_paidamt_corporatewise1.columns = list(top10disease_paidamt_corporatewise1.iloc[0])
                top10disease_paidamt_corporatewise1.reset_index(inplace=True)
                top10disease_paidamt_corporatewise1.drop(0, inplace=True)

                # Assuming you already have the DataFrame "df" with the data

                # Define the list of columns for the stacked chart
                columns = list(top10disease_paidamt_corporatewise1.columns[1:])

                # Create the stacked column chart
                top10disease_paidamt_corporatewise2_fig1 = go.Figure(data=[go.Bar(x=top10disease_paidamt_corporatewise1['rank_by_premium'],y=top10disease_paidamt_corporatewise1[column],name=column) for column in columns])

                # Update the layout
                top10disease_paidamt_corporatewise2_fig1.update_layout(
                    barmode='stack',
                    xaxis_title='Rank by Premium',
                    yaxis_title='Values')


                top10disease_paidamt_corporatewise2_fig1.update_layout(
                    title=dict(x=0.5, font=dict(color='black', size=25)))
                top10disease_paidamt_corporatewise2_fig1.update_layout(plot_bgcolor='white')


                top10disease_paidamt_corporatewise2_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=top10disease_paidamt_corporatewise.columns,
                                fill_color='skyblue', line_color='black',
                                font=dict(color='white', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=top10disease_paidamt_corporatewise.values.T,
                               fill_color='white', line_color='black',
                               align='center'))])
                top10disease_paidamt_corporatewise2_fig2.update_layout(width=2000, height=500)

###### si band wise analysis


                conditions1 = [(paid['sumins'] >= 0) & (paid['sumins'] <= 100000),
                               (paid['sumins'] >= 100000) & (paid['sumins'] <= 300000),
                               (paid['sumins'] >= 300000) & (paid['sumins'] <= 500000),
                               (paid['sumins'] >= 500000) & (paid['sumins'] <= 700000),
                               (paid['sumins'] >= 700000) & (paid['sumins'] <= 1000000),
                               (paid['sumins'] >= 1000000) & (paid['sumins'] <= 1500000)]

                # create a list of the values we want to assign for each condition
                values = ['00-01 Lakh', '01-03 Lakh', '03-05 Lakh', '05-07 Lakh', '07-10 Lakh', '10-15 Lakh']

                # create a new column and use np.select to assign values to it using our lists as arguments
                paid['si_band'] = np.select(conditions1, values)

                siwise_paidclaim_analysis_corporatewise = pd.merge(top5_corporatewise, paid, how='left', on=['POL_NO'])
                siwise_paidclaim_analysis_corporatewise = siwise_paidclaim_analysis_corporatewise.fillna(0).pivot_table(
                    columns=['rank_by_premium'], index=['si_band'], values=['CONSIDER_COUNT'], aggfunc='sum')

                siwise_paidclaim_analysis_corporatewise.columns = siwise_paidclaim_analysis_corporatewise.columns.droplevel(
                    0)  # remove amount
                siwise_paidclaim_analysis_corporatewise.columns.name = None
                siwise_paidclaim_analysis_corporatewise.reset_index(inplace=True)
                siwise_paidclaim_analysis_corporatewise1 = siwise_paidclaim_analysis_corporatewise.T
                siwise_paidclaim_analysis_corporatewise1.columns = list(
                    siwise_paidclaim_analysis_corporatewise1.iloc[0])

                siwise_paidclaim_analysis_corporatewise1.reset_index(inplace=True)
                siwise_paidclaim_analysis_corporatewise1.drop(0, inplace=True)

                l1 = list(siwise_paidclaim_analysis_corporatewise1.columns)
                l1.remove('index')

                # Create subplot figure
                siwise_paidclaim_analysis_corporatewise_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    siwise_paidclaim_analysis_corporatewise_fig1.add_trace(
                        go.Bar(x=siwise_paidclaim_analysis_corporatewise1['index'],
                               y=siwise_paidclaim_analysis_corporatewise1[y], name=y, ),

                    )
                    # Update layout
                siwise_paidclaim_analysis_corporatewise_fig1.update_layout(
                    title={'text': "SUM INSURED WISE PAID CLAIM ANALYSIS (TOP CORPORATE)", 'y': 0.9, 'x': 1,
                           'xanchor': 'center', 'yanchor': 'top'},
                )

                siwise_paidclaim_analysis_corporatewise_fig1.update_layout(
                    title=dict(x=0.5, font=dict(color='black', size=25)))
                siwise_paidclaim_analysis_corporatewise_fig1.update_layout(height=600,width=2000)
                siwise_paidclaim_analysis_corporatewise_fig1.update_layout(plot_bgcolor='white')


                siwise_paidclaim_analysis_corporatewise_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=siwise_paidclaim_analysis_corporatewise.columns,
                                fill_color='lightcyan', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=siwise_paidclaim_analysis_corporatewise.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                siwise_paidclaim_analysis_corporatewise_fig2.update_layout(width=2000, height=600, title='<b><b>')

########### SI AMOUNT BAND WISE ANALYSIS

                siwise_paidamt_analysis_corporatewise = pd.merge(top5_corporatewise, paid, how='left', on=['POL_NO'])
                siwise_paidamt_analysis_corporatewise = siwise_paidamt_analysis_corporatewise.fillna(0).pivot_table(
                    columns=['rank_by_premium'], index=['Si_band'], values=['LiablityAmt'], aggfunc='sum')

                siwise_paidamt_analysis_corporatewise.columns = siwise_paidamt_analysis_corporatewise.columns.droplevel(
                    0)  # remove amount
                siwise_paidamt_analysis_corporatewise.columns.name = None
                siwise_paidamt_analysis_corporatewise.reset_index(inplace=True)
                siwise_paidamt_analysis_corporatewise1 = siwise_paidamt_analysis_corporatewise.T
                siwise_paidamt_analysis_corporatewise1.columns = list(siwise_paidamt_analysis_corporatewise1.iloc[0])

                siwise_paidamt_analysis_corporatewise1.reset_index(inplace=True)
                siwise_paidamt_analysis_corporatewise1.drop(0, inplace=True)

                l1 = list(siwise_paidamt_analysis_corporatewise1.columns)
                l1.remove('index')

                # Create subplot figure
                siwise_paidamt_analysis_corporatewise_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    siwise_paidamt_analysis_corporatewise_fig1.add_trace(
                        go.Bar(x=siwise_paidamt_analysis_corporatewise1['index'],
                               y=siwise_paidamt_analysis_corporatewise1[y], name=y),

                    )
                    # Update layout
                siwise_paidamt_analysis_corporatewise_fig1.update_layout(
                    title={'text': "SUM INSURED WISE PAID AMOUNT ANALYSIS (TOP CORPORATE)", 'y': 0.9, 'x': 1,
                           'xanchor': 'center', 'yanchor': 'top'},
                )

                siwise_paidamt_analysis_corporatewise_fig1.update_layout(
                    title=dict(x=0.5, font=dict(color='black', size=25)))
                siwise_paidamt_analysis_corporatewise_fig1.update_layout(height=600)
                siwise_paidamt_analysis_corporatewise_fig1.update_layout(plot_bgcolor='white')

                # Show plot

                siwise_paidamt_analysis_corporatewise_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=siwise_paidamt_analysis_corporatewise.columns,
                                fill_color='#1E90FF', line_color='black',
                                font=dict(color='white', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=siwise_paidamt_analysis_corporatewise.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                siwise_paidamt_analysis_corporatewise_fig2.update_layout(width=2000, height=600, title='<b><b>')

##############      SOURCE FILED WISE

                Sourcefiledwise_analysis_corporatewise = pd.merge(top5_corporatewise, customer_care, how='left',
                                                                  on=['POL_NO'])
                Sourcefiledwise_analysis_corporatewise = pd.crosstab(
                    Sourcefiledwise_analysis_corporatewise['sourcefield'],
                    Sourcefiledwise_analysis_corporatewise['rank_by_premium'])

                Sourcefiledwise_analysis_corporatewise.columns.name = None
                Sourcefiledwise_analysis_corporatewise.reset_index(inplace=True)
                Sourcefiledwise_analysis_corporatewise1 = Sourcefiledwise_analysis_corporatewise.T
                Sourcefiledwise_analysis_corporatewise1.columns = list(Sourcefiledwise_analysis_corporatewise1.iloc[0])

                Sourcefiledwise_analysis_corporatewise1.reset_index(inplace=True)
                Sourcefiledwise_analysis_corporatewise1.drop(0, inplace=True)

                l1 = list(Sourcefiledwise_analysis_corporatewise1.columns)
                l1.remove('index')

                # Create subplot figure
                Sourcefiledwise_analysis_corporatewise_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    Sourcefiledwise_analysis_corporatewise_fig1.add_trace(
                        go.Bar(x=Sourcefiledwise_analysis_corporatewise1['index'],
                               y=Sourcefiledwise_analysis_corporatewise1[y], name=y, ),

                    )
                    # Update layout
                Sourcefiledwise_analysis_corporatewise_fig1.update_layout(
                    title={'text': "CUSTOMER TOUCH POINT ANALYSIS (TOP CORPORATE)", 'y': 0.9, 'x': 1,
                           'xanchor': 'center', 'yanchor': 'top'},
                )

                Sourcefiledwise_analysis_corporatewise_fig1.update_layout(
                    title=dict(x=0.5, font=dict(color='black', size=25)))
                Sourcefiledwise_analysis_corporatewise_fig1.update_layout(height=600)
                Sourcefiledwise_analysis_corporatewise_fig1.update_layout(plot_bgcolor="white")

                # Show plot

                Sourcefiledwise_analysis_corporatewise_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=Sourcefiledwise_analysis_corporatewise.columns,
                                fill_color='#1E90FF', line_color='black',
                                font=dict(color='white', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=Sourcefiledwise_analysis_corporatewise.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                Sourcefiledwise_analysis_corporatewise_fig2.update_layout(width=2000, height=600, title='<b><b>')

############  reason for call

                reason_for_call1 = pd.merge(top5_corporatewise, customer_care, how='left', on=['POL_NO'])
                reason_for_call_corporate= reason_for_call1['reasonforcall'].value_counts().head(10)
                reason_for_call_corporate1 = pd.DataFrame(reason_for_call_corporate)
                reason_for_call_corporate1.reset_index(inplace=True)
                reason_for_call_corporate2 = reason_for_call_corporate1[['reasonforcall']]

                reason_for_call_corporate3 = pd.merge(reason_for_call1, reason_for_call_corporate2, how='inner', on=['reasonforcall'])
                reason_for_call_corporate4 = pd.crosstab(reason_for_call_corporate3['reasonforcall'], reason_for_call_corporate3['rank_by_premium'])

                reason_for_call_corporate = pd.DataFrame(reason_for_call_corporate4)
                reason_for_call_corporate.reset_index(inplace=True)

                reason_for_call_corporate5 = reason_for_call_corporate.T

                reason_for_call_corporate5.reset_index(inplace=True)
                reason_for_call_corporate5.columns = [''] * len(reason_for_call_corporate5.columns)
                reason_for_call_corporate5.columns = list(reason_for_call_corporate5.iloc[0])

                reason_for_call_corporate5 = reason_for_call_corporate5.drop(reason_for_call_corporate5.index[0])

                # call_analysis_ic4.reset_index(inplace=True)

                l1 = list(reason_for_call_corporate5.columns)
                l1.remove('reasonforcall')

                # Create subplot figure
                reason_for_call_corporate_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    reason_for_call_ic_fig1.add_trace(
                        go.Bar(x=reason_for_call_corporate5['reasonforcall'], y=reason_for_call_corporate5[y], name=y),

                    )
                    # Update layout
                reason_for_call_corporate_fig1.update_layout(
                    title={'text': "REASON FOR CALL ANALYSIS ICWISE", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                )
                reason_for_call_corporate_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                reason_for_call_corporate_fig1.update_layout(plot_bgcolor='white')

                # figure for plotly
                reason_for_call_corporate_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=reason_for_call_corporate.columns,
                                fill_color='#1E90FF', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=reason_for_call_corporate.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                reason_for_call_corporate_fig2.update_layout(width=2000, height=600, title='<b><b>')

               #  reason_for_call1 = reason_for_call1['reasonforcall'].value_counts().head(10)
               #  reason_for_call1 = reason_for_call1.reset_index()
               #
               #  reason_for_call2 = pd.merge(top5_corporatewise, customer_care, how='left', on=['POL_NO'])
               #  reason_for_call2 = pd.crosstab(reason_for_call2['reasonforcall'], reason_for_call2['rank_by_premium'])
               #  reason_for_call2.reset_index(inplace=True)
               #  reason_for_call2 = pd.DataFrame(reason_for_call2)
               #
               #  reason_for_call = pd.merge(reason_for_call1, reason_for_call2, how='left', left_on=['reasonforcall'],
               #                             right_on=['reasonforcall'])
               # # reason_for_call = reason_for_call.drop(['reasonforcall_x', 'reasonforcall_y'], axis=1)
               #
               #  reason_for_call3 = reason_for_call.T.reset_index()
               #  reason_for_call3.columns = [''] * len(reason_for_call3.columns)
               #  reason_for_call3.columns = list(reason_for_call3.iloc[0])
               #  reason_for_call3.drop(0, inplace=True)
               #  reason_for_call1 = pd.merge(top5_corporatewise, customer_care, how='left', on=['POL_NO'])
               #  reason_for_call1 = reason_for_call1['reasonforcall'].value_counts().head(10)
               #  reason_for_call1 = reason_for_call1.reset_index()
               #
               #
               #  reason_for_call2 = pd.merge(top5_corporatewise, customer_care, how='left', on=['POL_NO'])
               #  reason_for_call2 = pd.crosstab(reason_for_call2['reasonforcall'], reason_for_call2['rank_by_premium'])
               #  reason_for_call2.reset_index(inplace=True)
               #  reason_for_call2 = pd.DataFrame(reason_for_call2)
               #  l1 = list(reason_for_call3.columns)
               #
               #
               #  l1.remove('reasonforcall')
               #
               #  # Create subplot figure
               #  reasonforcall_analysis_corporatewise_fig1 = make_subplots()
               #
               #  # Add bar traces to the subplot figure
               #  for y in l1:
               #      reasonforcall_analysis_corporatewise_fig1.add_trace(
               #          go.Bar(x=reason_for_call3['reasonforcall'], y=reason_for_call3[y], name=y, text=reason_for_call3[y]),
               #
               #      )
               #      # Update layout
               #  reasonforcall_analysis_corporatewise_fig1.update_layout(
               #      title={'text': "REASON FOR CALL ANALYSIS", 'y': 0.9, 'x': 1, 'xanchor': 'center', 'yanchor': 'top'},
               #  )
               #
               #  reasonforcall_analysis_corporatewise_fig1.update_traces(textfont_size=10, textangle=0, textposition="outside",
               #                                     cliponaxis=False)
               #  reasonforcall_analysis_corporatewise_fig1.update_traces(width=0.10)
               #  reasonforcall_analysis_corporatewise_fig1.update_layout(height=600, bargap=0.10)
               #  reasonforcall_analysis_corporatewise_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
               #  reasonforcall_analysis_corporatewise_fig1.update_layout(height=600)
               #  reasonforcall_analysis_corporatewise_fig1.update_layout(plot_bgcolor="white")
               #
               #  # Show plot
               #
               #  reasonforcall_analysis_corporatewise_fig2 = go.Figure(data=[go.Table(
               #      header=dict(values=reason_for_call.columns,
               #                  fill_color='#1E90FF', line_color='black',
               #                  font=dict(color='White', family="Aerial", size=15),
               #                  align='center'),
               #      cells=dict(values=reason_for_call.values.T,
               #                 fill_color='white', line_color='black',
               #                 align='center'))
               #  ])
               #  reasonforcall_analysis_corporatewise_fig2.update_layout(width=2000, height=600, title='<b><b>')

 ####### grievance analysis

                # customer_care['responsegiven'] = customer_care['responsegiven'].str.strip()

                grievance_analysis_coporate = pd.merge(top5_corporatewise,customer_care, how='left', on=['POL_NO'])

                grievance_analysis_coporate1 = grievance_analysis_coporate[(grievance_analysis_coporate['responsegiven'] != 'Invalid ADR raised') | (
                            grievance_analysis_coporate['responsegiven'] != 'Invalid Closure') | (
                                                       grievance_analysis_coporate['responsegiven'] != 'Invalid deduction made')]

                grievance_analysis_coporate2 = grievance_analysis_coporate1[grievance_analysis_coporate1['call_type'] == 'Grievance']

                grievance_analysis_coporate3 = grievance_analysis_coporate2['responsegiven'].value_counts().head(10)

                grievance_analysis_coporate3 = pd.DataFrame(grievance_analysis_coporate3)
                grievance_analysis_coporate3.reset_index(inplace=True)
                grievance_analysis_coporate4 = grievance_analysis_coporate3[['responsegiven']]

                grievance_analysis_coporate5 = pd.merge(grievance_analysis_coporate2, grievance_analysis_coporate4, how='inner', on=['responsegiven'])

                grievance_analysis_coporate6 = pd.crosstab(grievance_analysis_coporate5['responsegiven'], grievance_analysis_coporate5['IC_NAME'])

                grievance_analysis_coporate6 = pd.DataFrame(grievance_analysis_coporate6)
                grievance_analysis_coporate6.reset_index(inplace=True)

                grievance_analysis_coporate = grievance_analysis_coporate6.T

                grievance_analysis_coporate.reset_index(inplace=True)
                grievance_analysis_coporate.columns = [''] * len(grievance_analysis_coporate.columns)
                grievance_analysis_coporate.columns = list(grievance_analysis_coporate.iloc[0])

                grievance_analysis_coporate = grievance_analysis_coporate.drop(grievance_analysis_coporate.index[0])

                # call_analysis_ic4.reset_index(inplace=True)

                l1 = list(grievance_analysis_coporate6.columns)
                l1.remove('responsegiven')

                # Create subplot figure
                grievance_analysis_corporate_fig1 = make_subplots()

                # Add bar traces to the subplot figure
                for y in l1:
                    grievance_analysis_corporate_fig1.add_trace(
                        go.Bar(x=grievance_analysis_coporate6['responsegiven'], y=grievance_analysis_coporate6[y], name=y),

                    )
                    # Update layout
                grievance_analysis_corporate_fig1.update_layout(
                    title={'text': "IC WISE GRIEVANCE ANALYSIS", 'y': 0.9, 'x': 0.5, 'xanchor': 'center',
                           'yanchor': 'top'},
                )
                grievance_analysis_corporate_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
                grievance_analysis_corporate_fig1.update_layout(plot_bgcolor='white')

                # figure for plotly
                grievance_analysis_corporate_fig2 = go.Figure(data=[go.Table(
                    header=dict(values=grievance_analysis_coporate.columns,
                                fill_color='#1E90FF', line_color='black',
                                font=dict(color='black', family="Aerial", size=15),
                                align='center'),
                    cells=dict(values=grievance_analysis_coporate.values.T,
                               fill_color='white', line_color='black',
                               align='center'))
                ])
                grievance_analysis_corporate_fig2.update_layout(width=2000, height=600, title='<b><b>')
               #
               #  grievance_analysis = customer_care[customer_care['call_type'] == 'Grievance']
               #  grievance_analysis1 = pd.merge(top5_corporatewise, grievance_analysis, how='left', on=['POL_NO'])
               #  grievance_analysis1 = grievance_analysis1['reasonforcall'].value_counts().head(10)
               #  grievance_analysis1 = grievance_analysis1.reset_index()
               #
               #  grievance_analysis2 = pd.merge(top5_corporatewise, customer_care, how='left', on=['POL_NO'])
               #  grievance_analysis2 = pd.crosstab(grievance_analysis2['reasonforcall'],
               #                                    grievance_analysis2['rank_by_premium'])
               #  grievance_analysis2.reset_index(inplace=True)
               #  grievance_analysis2 = pd.DataFrame(grievance_analysis2)
               #
               #  grievance_analysis = pd.merge(grievance_analysis1, grievance_analysis2, how='left', left_on=['reasonforcall'],
               #                                right_on=['reasonforcall'])
               # # grievance_analysis = grievance_analysis.drop(['reasonforcall_x', 'reasonforcall_y'], axis=1)
               #
               #  grievance_analysis3 = grievance_analysis.T.reset_index()
               #  grievance_analysis3.columns = [''] * len(grievance_analysis3.columns)
               #  grievance_analysis3.columns = list(grievance_analysis3.iloc[0])
               #  grievance_analysis3.drop(0, inplace=True)
               #
               #  l1 = list(grievance_analysis3.columns)
               #  l1.remove('reasonforcall')
               #
               #  # Create subplot figure
               #  grievance_analysis_fig1 = make_subplots()
               #
               #  # Add bar traces to the subplot figure
               #  for y in l1:
               #      grievance_analysis_fig1.add_trace(
               #          go.Bar(x=grievance_analysis3['reasonforcall'], y=grievance_analysis3[y], name=y,
               #                 text=grievance_analysis3[y]),
               #
               #      )
               #      # Update layout
               #  grievance_analysis_fig1.update_layout(
               #      title={'text': "GRIEVANCE ANALYSIS", 'y': 0.9, 'x': 1, 'xanchor': 'center', 'yanchor': 'top'})
               #  grievance_analysis_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
               #
               #  grievance_analysis_fig1.update_traces(textfont_size=10, textangle=0, textposition="outside",
               #                                        cliponaxis=False)
               #
               #  grievance_analysis_fig1.update_traces(width=0.10)
               #
               #  grievance_analysis_fig1.update_layout(height=600)
               #
               #  grievance_analysis_fig1.update_layout(title=dict(x=0.5, font=dict(color='black', size=25)))
               #  grievance_analysis_fig1.update_layout(plot_bgcolor="white")
               #
               #  # Show plot
               #
               #  grievance_analysis_fig2 = go.Figure(data=[go.Table(
               #      header=dict(values=grievance_analysis.columns,
               #                  fill_color='#1E90FF', line_color='black',
               #                  font=dict(color='White', family="Aerial", size=15),
               #                  align='center'),
               #      cells=dict(values=grievance_analysis.values.T,
               #                 fill_color='white', line_color='black',
               #                 align='center'))
               #  ])
               #  grievance_analysis_fig2.update_layout(width=2000, height=600, title='<b><b>')
               #




                # Create subplot figure
                #brokername=plot(brokername,output_type='div', config=config)
                tb2 = plot(table(summary_overall, 600, 800), output_type='div', config=config)
                summary_ipd_opd = plot(table(summary_ipd_opd, 500, 800), output_type='div', config=config)
                claim_settlement_statistics = plot(Donut_chart(claim_settlement_statistics, 'CLAIM SETTLEMENT STATISTICS'), output_type='div', config=config)
                outstanding_analysis = plot(horizontal_bar_chart(outstanding_analysis, 'OUTSTANDING ANALYSIS'),
                                            output_type='div', config=config)
                paid_amt_analysis = plot(pie_chart(paid_amt_analysis, 'PAID AMOUNT ANALYSIS'), output_type='div',config=config)
                lodge_amt_analysis = plot(pie_chart(lodge_amt_analysis, 'LODGE AMOUNT ANALYSIS'), output_type='div', config=config)
                icwise_summary_fig1 = plot(icwise_summary_fig1, output_type='div', config=config)
                icwise_claim_settlement_statistics2 = plot(icwise_claim_settlement_statistics2, output_type='div',config=config)
                icwise_outstanding_analysis1 = plot(icwise_outstanding_analysis1, output_type='div',  config=config)
                relation_wise_lives_fig2 = plot(relation_wise_lives_fig2, output_type='div',  config=config)
                relation_wise_lives_fig4 = plot(relation_wise_lives_fig4, output_type='div',  config=config)
                age_band_lives_fig2 = plot(age_band_lives_fig2, output_type='div',  config=config)
                age_band_lives_fig4 = plot(age_band_lives_fig4, output_type='div',  config=config)
                outstanding_tat_fig1 = plot(outstanding_tat_fig1, output_type='div',  config=config)
                outstanding_tat_fig2 = plot(outstanding_tat_fig2, output_type='div',  config=config)
                age_wise_cashless_paid_amount_analysis = plot(age_wise_cashless_paid_amount_analysis, output_type='div',  config=config)
                age_wise_non_cashless_paid_amount_analysis=plot(age_wise_non_cashless_paid_amount_analysis, output_type='div',  config=config)
                total_paid_amount_by_age_band=plot(pie_chart(total_paid_amount_by_age_band, 'TOTAL PAID AMOUNT BY AGE BAND'), output_type='div',  config=config)
                treatment_type_paid_claim_icwise_fig1 = plot(treatment_type_paid_claim_icwise_fig1, output_type='div',  config=config)
                treatment_type_paid_claim_icwise_fig2 = plot(treatment_type_paid_claim_icwise_fig2, output_type='div',  config=config)
                treatment_type_paid_amt_icwise_fig1 = plot(treatment_type_paid_amt_icwise_fig1, output_type='div',  config=config)
                treatment_type_paid_amt_icwise_fig2 = plot(treatment_type_paid_amt_icwise_fig2, output_type='div',  config=config)
                age_bandwise_incidence_rate_fig1=plot(age_bandwise_incidence_rate_fig1, output_type='div',  config=config)
                si_bandwise_incidence_rate_fig1=plot(si_bandwise_incidence_rate_fig1, output_type='div',  config=config)
                amount_bandwise_incidence_rate_fig1=plot(amount_bandwise_incidence_rate_fig1, output_type='div',  config=config)
                ipd_amount_bandwise_incidence_rate_fig1=plot(ipd_amount_bandwise_incidence_rate_fig1, output_type='div',  config=config)
                top10disease_paidamt_fig2= plot(top10disease_paidamt_fig2, output_type='div',  config=config)
                top10disease_paidamt_fig1 = plot(top10disease_paidamt_fig1, output_type='div',  config=config)
                relation_wise_paid_claims_fig1= plot(relation_wise_paid_claims_fig1, output_type='div',  config=config)
                relation_wise_paid_claims_fig2= plot(relation_wise_paid_claims_fig2, output_type='div',  config=config)
                age_wise_paid_claim_fig1=plot(age_wise_paid_claim_fig1, output_type='div',  config=config)
                age_wise_paid_claim_fig2=plot(age_wise_paid_claim_fig2, output_type='div',  config=config)
                paid_amt_band_fig1=plot(paid_amt_band_fig1, output_type='div',  config=config)
                paid_amt_band_fig2=plot(paid_amt_band_fig2, output_type='div',  config=config)
                si_band_wise_paid_claims_fig1=plot(si_band_wise_paid_claims_fig1, output_type='div',  config=config)
                si_band_wise_paid_claims_fig2=plot(si_band_wise_paid_claims_fig2, output_type='div',  config=config)
                si_band_wise_paid_amt_fig1=plot(si_band_wise_paid_amt_fig1, output_type='div',  config=config)
                si_band_wise_paid_amt_fig2=plot(si_band_wise_paid_amt_fig2, output_type='div',  config=config)
                utilization_band_fig1=plot(utilization_band_fig1, output_type='div',  config=config)
                utilization_band_fig2=plot(utilization_band_fig2, output_type='div',  config=config)
                top10hospital_paidamt_fig1 =plot(top10hospital_paidamt_fig1, output_type='div',  config=config)
                top10hospital_paidamt_fig2 =plot(top10hospital_paidamt_fig2, output_type='div',  config=config)
                top10hospital_paidamt_ipd_fig1 = plot(top10hospital_paidamt_ipd_fig1, output_type='div', config=config)
                top10hospital_paidamt_ipd_fig2 = plot(top10hospital_paidamt_ipd_fig2, output_type='div', config=config)
                top10hospital_paidamt_opd_fig1 = plot(top10hospital_paidamt_opd_fig1, output_type='div', config=config)
                top10hospital_paidamt_opd_fig2 = plot(top10hospital_paidamt_opd_fig2, output_type='div', config=config)
                SourceField_icwise_fig1 = plot(SourceField_icwise_fig1, output_type='div', config=config)
                SourceField_icwise_fig2 = plot(SourceField_icwise_fig2, output_type='div', config=config)
                call_analysis_ic_fig1=plot(call_analysis_ic_fig1,output_type='div', config=config)
                call_analysis_ic_fig2=plot(call_analysis_ic_fig2,output_type='div', config=config)
                reason_for_call_ic_fig1=plot(reason_for_call_ic_fig1,output_type='div', config=config)
                reason_for_call_ic_fig2=plot(reason_for_call_ic_fig2,output_type='div', config=config)
                grievance_analysis_ic_fig2=plot(grievance_analysis_ic_fig2,output_type='div', config=config)
                grievance_analysis_ic_fig1=plot(grievance_analysis_ic_fig1,output_type='div', config=config)
                corporatewise_summary1_fig1=plot(corporatewise_summary1_fig1, output_type='div', config=config)
                corporatewise_summary1_fig2=plot(corporatewise_summary1_fig2, output_type='div', config=config)
                corporatewise_summary2_fig1=plot(corporatewise_summary2_fig1, output_type='div', config=config)
                corporatewise_summary2_fig2=plot(corporatewise_summary2_fig2, output_type='div', config=config)
                corporatewise_claimssettlement_statistics_fig1=plot(corporatewise_claimssettlement_statistics_fig1, output_type='div', config=config)
                corporatewise_claimssettlement_statistics_fig2=plot(corporatewise_claimssettlement_statistics_fig2, output_type='div', config=config)
                corporatewise_outstanding_analysis_fig1=plot(corporatewise_outstanding_analysis_fig1, output_type='div', config=config)
                corporatewise_outstanding_analysis_fig2=plot(corporatewise_outstanding_analysis_fig2, output_type='div', config=config)
                Lodg_amount_analysis_fig1=plot(Lodg_amount_analysis_fig1, output_type='div', config=config)
                Lodg_amount_analysis_fig2 = plot(Lodg_amount_analysis_fig2, output_type='div', config=config)
                age_band_wise_paid_claim_analysis_corporatewise_fig1 = plot(age_band_wise_paid_claim_analysis_corporatewise_fig1, output_type='div', config=config)
                age_band_wise_paid_claim_analysis_corporatewise_fig2 = plot(age_band_wise_paid_claim_analysis_corporatewise_fig2, output_type='div', config=config)
                age_band_wise_paid_amt_analysis_corporatewise_fig1 = plot(age_band_wise_paid_amt_analysis_corporatewise_fig1, output_type='div', config=config)
                age_band_wise_paid_amt_analysis_corporatewise_fig2 = plot(age_band_wise_paid_amt_analysis_corporatewise_fig2, output_type='div', config=config)
                corpo_relation_wise_paid_amt_analysis_fig1 = plot(corpo_relation_wise_paid_amt_analysis_fig1, output_type='div', config=config)
                corpo_relation_wise_paid_amt_analysis_fig2 = plot(corpo_relation_wise_paid_amt_analysis_fig2, output_type='div', config=config)
                corpo_relation_wise_paid_claim_analysis_fig1 = plot(corpo_relation_wise_paid_claim_analysis_fig1, output_type='div', config=config)
                corpo_relation_wise_paid_claim_analysis_fig2 = plot(corpo_relation_wise_paid_claim_analysis_fig2, output_type='div', config=config)
                amt_band_wise_paidamt_analysis_corporatewise_fig1 = plot(amt_band_wise_paidamt_analysis_corporatewise_fig1, output_type='div', config=config)
                amt_band_wise_paidamt_analysis_corporatewise_fig2 = plot(amt_band_wise_paidamt_analysis_corporatewise_fig2, output_type='div', config=config)
                amt_band_wise_paidclaim_analysis_corporatewise_fig1 = plot(amt_band_wise_paidclaim_analysis_corporatewise_fig1, output_type='div', config=config)
                amt_band_wise_paidclaim_analysis_corporatewise_fig2 = plot(amt_band_wise_paidclaim_analysis_corporatewise_fig2, output_type='div', config=config)
                treatment_type_paidclaim_analysis_corporatewise_fig1 = plot(treatment_type_paidclaim_analysis_corporatewise_fig1, output_type='div', config=config)
                treatment_type_paidclaim_analysis_corporatewise_fig2 = plot(treatment_type_paidclaim_analysis_corporatewise_fig2, output_type='div', config=config)
                top10disease_paidamt_corporatewise2_fig1 = plot(top10disease_paidamt_corporatewise2_fig1, output_type='div', config=config)
                top10disease_paidamt_corporatewise2_fig2 = plot(top10disease_paidamt_corporatewise2_fig2, output_type='div', config=config)
                siwise_paidclaim_analysis_corporatewise_fig1 = plot(siwise_paidclaim_analysis_corporatewise_fig1, output_type='div', config=config)
                siwise_paidclaim_analysis_corporatewise_fig2 = plot(siwise_paidclaim_analysis_corporatewise_fig2, output_type='div', config=config)
                siwise_paidamt_analysis_corporatewise_fig1 = plot(siwise_paidamt_analysis_corporatewise_fig1, output_type='div', config=config)
                siwise_paidamt_analysis_corporatewise_fig2 = plot(siwise_paidamt_analysis_corporatewise_fig2, output_type='div', config=config)
                Sourcefiledwise_analysis_corporatewise_fig1 = plot(Sourcefiledwise_analysis_corporatewise_fig1, output_type='div', config=config)
                Sourcefiledwise_analysis_corporatewise_fig2 = plot(Sourcefiledwise_analysis_corporatewise_fig2, output_type='div', config=config)
                reason_for_call_corporate_fig1 = plot(reason_for_call_corporate_fig1, output_type='div', config=config)
                reason_for_call_corporate_fig2 = plot(reason_for_call_corporate_fig2, output_type='div', config=config)
                grievance_analysis_corporate_fig1 = plot(grievance_analysis_corporate_fig1, output_type='div', config=config)
                grievance_analysis_corporate_fig2= plot(grievance_analysis_corporate_fig2, output_type='div', config=config)




        mydict = {
                    'broker_name': broker_name,
                    'tb2': tb2,
                    'summary_ipd_opd':summary_ipd_opd,
                    'claim_settlement_statistics':claim_settlement_statistics,
                    'outstanding_analysis':outstanding_analysis,
                    'paid_amt_analysis': paid_amt_analysis,
                    'lodge_amt_analysis': lodge_amt_analysis,
                    'icwise_summary_fig1':icwise_summary_fig1,
                    'icwise_summary_fig11': icwise_summary_fig11,
                    'icwise_summary_fig12': icwise_summary_fig12,
                    'icwise_summary_fig13': icwise_summary_fig13,
                    'icwise_claim_settlement_statistics2':icwise_claim_settlement_statistics2,
                    'icwise_claim_settlement_statistics_l1':icwise_claim_settlement_statistics_l1,
                    'icwise_claim_settlement_statistics_l2': icwise_claim_settlement_statistics_l2,
                    'icwise_claim_settlement_statistics_l3': icwise_claim_settlement_statistics_l3,
                    #'icwise_claim_settlement_statistics_l4':icwise_claim_settlement_statistics_l4,
                    'icwise_outstanding_analysis1':icwise_outstanding_analysis1,
                    'icwise_outstanding_analysis2_l1': icwise_outstanding_analysis2_l1,
                    'icwise_outstanding_analysis2_l2': icwise_outstanding_analysis2_l2,
                    'icwise_outstanding_analysis2_l3': icwise_outstanding_analysis2_l3,
                    'relation_wise_lives_fig2':relation_wise_lives_fig2,
                    'relation_wise_lives_fig4': relation_wise_lives_fig4,
                    'age_band_lives_fig2':age_band_lives_fig2,
                    'age_band_lives_fig4':age_band_lives_fig4,
                    'outstanding_tat_fig1':outstanding_tat_fig1,
                    'outstanding_tat_fig2':outstanding_tat_fig2,
                    'age_wise_cashless_paid_amount_analysis':age_wise_cashless_paid_amount_analysis,
                    'age_wise_non_cashless_paid_amount_analysis':age_wise_non_cashless_paid_amount_analysis,
                    'total_paid_amount_by_age_band':total_paid_amount_by_age_band,
                    'treatment_type_paid_claim_icwise_fig1':treatment_type_paid_claim_icwise_fig1,
                    'treatment_type_paid_claim_icwise_fig2':treatment_type_paid_claim_icwise_fig2,
                    'treatment_type_paid_amt_icwise_fig1': treatment_type_paid_amt_icwise_fig1,
                    'treatment_type_paid_amt_icwise_fig2': treatment_type_paid_amt_icwise_fig2,
                    'age_bandwise_incidence_rate_fig1':age_bandwise_incidence_rate_fig1,
                    'si_bandwise_incidence_rate_fig1':si_bandwise_incidence_rate_fig1,
                    'amount_bandwise_incidence_rate_fig1':amount_bandwise_incidence_rate_fig1,
                    'ipd_amount_bandwise_incidence_rate_fig1':ipd_amount_bandwise_incidence_rate_fig1,
                    'relation_wise_paid_claims_fig1':relation_wise_paid_claims_fig1,
                    'relation_wise_paid_claims_fig2':relation_wise_paid_claims_fig2,
                    'age_wise_paid_claim_fig1':age_wise_paid_claim_fig1,
                    'age_wise_paid_claim_fig2':age_wise_paid_claim_fig2,
                    'paid_amt_band_fig1':paid_amt_band_fig1,
                    'paid_amt_band_fig2':paid_amt_band_fig2,
                    'si_band_wise_paid_claims_fig1':si_band_wise_paid_claims_fig1,
                    'si_band_wise_paid_claims_fig2':si_band_wise_paid_claims_fig2,
                    'si_band_wise_paid_amt_fig1':si_band_wise_paid_amt_fig1,
                    'si_band_wise_paid_amt_fig2':si_band_wise_paid_amt_fig2,
                    'utilization_band_fig1':utilization_band_fig1,
                    'utilization_band_fig2':utilization_band_fig2,
                    'top10hospital_paidamt_fig1':top10hospital_paidamt_fig1,
                    'top10hospital_paidamt_fig2':top10hospital_paidamt_fig2,
                    'top10hospital_paidamt_ipd_fig1': top10hospital_paidamt_ipd_fig1,
                    'top10hospital_paidamt_ipd_fig2': top10hospital_paidamt_ipd_fig2,
                    'top10hospital_paidamt_opd_fig1': top10hospital_paidamt_opd_fig1,
                    'top10hospital_paidamt_opd_fig2': top10hospital_paidamt_opd_fig2,
                    'top10disease_paidamt_fig2':top10disease_paidamt_fig2,
                    'top10disease_paidamt_fig1':top10disease_paidamt_fig1,
                    'SourceField_icwise_fig1':SourceField_icwise_fig1,
                    'SourceField_icwise_fig2':SourceField_icwise_fig2,
                    'call_analysis_ic_fig1':call_analysis_ic_fig1,
                    'call_analysis_ic_fig2':call_analysis_ic_fig2,
                    'reason_for_call_ic_fig1':reason_for_call_ic_fig1,
                    'reason_for_call_ic_fig2':reason_for_call_ic_fig2,
                    'grievance_analysis_ic_fig2':grievance_analysis_ic_fig2,
                    'grievance_analysis_ic_fig1':grievance_analysis_ic_fig1,
                    'corporatewise_summary1_fig1':corporatewise_summary1_fig1,
                    'corporatewise_summary1_fig2':corporatewise_summary1_fig2,
                    'corporatewise_summary2_fig2':corporatewise_summary2_fig2,
                    'corporatewise_summary2_fig1':corporatewise_summary2_fig1,
                    'corporatewise_claimssettlement_statistics_fig1':corporatewise_claimssettlement_statistics_fig1,
                    'corporatewise_claimssettlement_statistics_fig2':corporatewise_claimssettlement_statistics_fig2,
                    'corporatewise_outstanding_analysis_fig1':corporatewise_outstanding_analysis_fig1,
                    'corporatewise_outstanding_analysis_fig2':corporatewise_outstanding_analysis_fig2,
                    'Lodg_amount_analysis_fig1':Lodg_amount_analysis_fig1,
                    'Lodg_amount_analysis_fig2':Lodg_amount_analysis_fig2,
                    'age_band_wise_paid_claim_analysis_corporatewise_fig1':age_band_wise_paid_claim_analysis_corporatewise_fig1,
                    'age_band_wise_paid_claim_analysis_corporatewise_fig2':age_band_wise_paid_claim_analysis_corporatewise_fig2,
                    'age_band_wise_paid_amt_analysis_corporatewise_fig1': age_band_wise_paid_amt_analysis_corporatewise_fig1,
                    'age_band_wise_paid_amt_analysis_corporatewise_fig2': age_band_wise_paid_amt_analysis_corporatewise_fig2,
                    'corpo_relation_wise_paid_amt_analysis_fig1': corpo_relation_wise_paid_amt_analysis_fig1,
                    'corpo_relation_wise_paid_amt_analysis_fig2': corpo_relation_wise_paid_amt_analysis_fig2,
                    'corpo_relation_wise_paid_claim_analysis_fig1': corpo_relation_wise_paid_claim_analysis_fig1,
                    'corpo_relation_wise_paid_claim_analysis_fig2': corpo_relation_wise_paid_claim_analysis_fig2,
                    'amt_band_wise_paidamt_analysis_corporatewise_fig1': amt_band_wise_paidamt_analysis_corporatewise_fig1,
                    'amt_band_wise_paidamt_analysis_corporatewise_fig2': amt_band_wise_paidamt_analysis_corporatewise_fig2,
                    'amt_band_wise_paidclaim_analysis_corporatewise_fig1': amt_band_wise_paidclaim_analysis_corporatewise_fig1,
                    'amt_band_wise_paidclaim_analysis_corporatewise_fig2': amt_band_wise_paidclaim_analysis_corporatewise_fig2,
                    'treatment_type_paidclaim_analysis_corporatewise_fig1': treatment_type_paidclaim_analysis_corporatewise_fig1,
                    'treatment_type_paidclaim_analysis_corporatewise_fig2': treatment_type_paidclaim_analysis_corporatewise_fig2,
                    'top10disease_paidamt_corporatewise2_fig1': top10disease_paidamt_corporatewise2_fig1,
                    'top10disease_paidamt_corporatewise2_fig2': top10disease_paidamt_corporatewise2_fig2,
                    'siwise_paidclaim_analysis_corporatewise_fig1': siwise_paidclaim_analysis_corporatewise_fig1,
                    'siwise_paidclaim_analysis_corporatewise_fig2': siwise_paidclaim_analysis_corporatewise_fig2,
                    'siwise_paidamt_analysis_corporatewise_fig1': siwise_paidamt_analysis_corporatewise_fig1,
                    'siwise_paidamt_analysis_corporatewise_fig2': siwise_paidamt_analysis_corporatewise_fig2,
                    'Sourcefiledwise_analysis_corporatewise_fig1': Sourcefiledwise_analysis_corporatewise_fig1,
                    'Sourcefiledwise_analysis_corporatewise_fig2': Sourcefiledwise_analysis_corporatewise_fig2,
                    'reason_for_call_corporate_fig1': reason_for_call_corporate_fig1,
                    'reason_for_call_corporate_fig2': reason_for_call_corporate_fig2,
                    'grievance_analysis_corporate_fig1': grievance_analysis_corporate_fig1,
                    'grievance_analysis_corporate_fig2': grievance_analysis_corporate_fig2,

        }

        return render(request, 'Management/broker.html', context=mydict)

        # class BrokerView(View):
        #     def get(self, request, *args, **kwargs):
        #         return render(request, 'chart_form.html', {})
        #
        #     # your code for handling GET requests
        #
        #     def post(self, request, *args, **kwargs):
        #         start_date = request.POST.get('start_date')
        #         end_date = request.POST.get('end_date')
        #         product_type = request.POST.get('product_type')
        #
        #         # filter data based on user inputs
        #         table1_data = Table1.objects.filter(Q(date__gte=start_date) & Q(date__lte=end_date))
        #         table2_data = Table2.objects.filter(product_type=product_type)
        #
        #         # create charts based on filtered data
        #         chart1 = self.create_chart(table1_data)
        #         chart2 = self.create_chart(table2_data)
        #         return render(request, 'chart_results.html', {'chart1': chart1, 'chart2': chart2})


def profile(request):
    if request.user.is_authenticated:
        user_management = Management.objects.filter(user=request.user.id).values()

        return render(request, 'Management/profile.html', {'data': user_management})



def change_password(request):
    if request.method == 'POST':
        form = PasswordChangeForm(request.user, request.POST)
        if form.is_valid():
            user = form.save()
            update_session_auth_hash(request, user)  # Important!
            messages.success(request, 'Your password was successfully updated!')
            return redirect('change_password')
        else:
            messages.error(request, 'Please correct the error below.')
    else:
        form = PasswordChangeForm(request.user)
    return render(request, 'Management/change_password.html', {
        'form': form
    })







